<?xml version="1.0" encoding="UTF-8"?>
<document signature="Hero Lab Data">
  <loadonce key="PF_Spheres_DDS - Spheres"/>
  <fileinfo>
    <info_author>(C) James Risner, 2023-2025
BSD-2-Clause license</info_author>
    </fileinfo>
  <thing id="sogSpArtifice" name="Artifice Sphere" compset="SoGSphere" uniqueness="unique">
    <usesource source="pPF1e_Sph_Guile"/>
    <tag group="SoGSphere" tag="Artifice" name="Artifice"/>
    </thing>
  <thing id="resSGPkArtifice" name="Artifice Packages" compset="Resource" panellink="tbSoGArtifice">
    <fieldval field="resObject" value="Artifice Packages"/>
    <usesource source="pPF1e_Sph_Guile"/>
    <tag group="SoGSphere" tag="Artifice"/>
    <tag group="SoGPackage" tag="Artifice"/>
    </thing>
  <thing id="resSGSEArtifice" name="Bonus Artifice Talents" compset="Resource" panellink="tbSoGArtifice">
    <fieldval field="resObject" value="Bonus Artifice Talents"/>
    <usesource source="pPF1e_Sph_Guile"/>
    <tag group="SoGSphere" tag="Artifice"/>
    <tag group="SoGBonTal" tag="Artifice"/>
    <eval phase="Final">~ Add bonus talents
        field[resMax].value += hero.tagcount[SoGBonTal.Artifice]</eval>
    <eval phase="Final" priority="999999999999" index="2"><![CDATA[
        ~ If we have any bonus talents, show the sphere tab
        if (field[resMax].value > 0) then
          perform pulltags[SoGBonTal.?,SoGSphTab]
          perform hero.pushtags[SoGSphTab.?]
        endif]]></eval>
    </thing>
  <thing id="sogTlHdArt" name="{align center}Artifice" compset="SoGTalent" isshowonly="yes">
    <tag group="SoGSphere" tag="Artifice"/>
    <tag group="SoGTlClass" tag="GainSphere"/>
    </thing>
  <thing id="sogTlSpArtifice" name="Artifice Sphere" compset="SoGTalent" description="Operatives of the Artifice sphere are adept at using objects to their fullest potential at a fast pace, offering operatives ways of creating, fixing, and augmenting objects to make them fit the operatives needs at a given moment.\n\n{b}Associated Skill{/b}: One Artistry or Craft skill (depending on your chosen package).\n\nYou gain the following benefits when you gain the Artifice sphere:\n\nYou gain 5 ranks in the chosen associated skill, plus 5 ranks per additional talent spent in the Artifice sphere (maximum ranks equal to your Hit Dice). If you already have ranks in the associated skill you may immediately retrain them.\n\n{b}Skill Leverage{/b}: You unlock skill leverage with your chosen package's associated skill, and one Artistry skill, one Craft skill, or Knowledge (engineering).\n\n{b}Package{/b}: When you gain the Artifice sphere, you gain one of the following packages. You may take the Expanded Artificer talent to gain an additional package. When you gain a package, you choose one of the package’s associated skills to be the associated skill for that package and its effects.\n\n{b}Bonus Talent{/b}: You gain a single (function) talent, depending on the package you chose. It cannot be an exceptional talent. If the bonus talent you choose is a [utility] talent (and is not from the (gear) package), you can take the base sphere as a [utility] talent.\n\nAdditionally, you gain the Trinket and Cobbled Creation abilities." summary="Gain access to the Artifice Sphere." panellink="tbSoGArtifice" uniqueness="useronce">
    <fieldval field="usrCandid1" value="component.BaseSkill &amp; (Helper.SkCatCraft | Helper.SkCatArt | thingid.skKnowEng)"/>
    <usesource source="pPF1e_Sph_Guile"/>
    <tag group="SoGSphere" tag="Artifice"/>
    <tag group="SoGTlClass" tag="GainSphere"/>
    <tag group="SoGTlClass" tag="UtilStart"/>
    <tag group="ChooseSrc1" tag="Hero"/>
    <tag group="Hide" tag="Activation"/>
    <tag group="User" tag="NoAutoName"/>
    <bootstrap thing="abSoGSkLeverage"></bootstrap>
    <bootstrap thing="sogSpArtifice"></bootstrap>
    <bootstrap thing="sogTlCobbledCreat">
      <containerreq phase="First" priority="500">!SoGBanTal.sogTlCobbledCreat</containerreq>
      </bootstrap>
    <bootstrap thing="sogTlTrinket">
      <containerreq phase="First" priority="500">!SoGBanTal.sogTlTrinket</containerreq>
      </bootstrap>
    <eval phase="PostLevel" priority="1500" name="Assign initial Skill Leverage"><![CDATA[~ Get out if disabled
     doneif (tagis[Helper.SpcDisable] <> 0)
     ~ or a duplicate.
     doneif (tagis[Helper.FirstCopy] = 0)
     ~ or if no choice made.
     doneif (field[usrChosen1].ischosen = 0)

     perform assignstr["SkLeverage." & field[usrChosen1].chosen.idstring]]]></eval>
    </thing>
  <thing id="sogTlTrinket" name="Trinket" compset="SoGTalent" description="You can create a trinket—a makeshift version of an object—in 1 minute with an artisan’s kit. You must succeed a Craft check against the object’s Craft DC to create a fully-functioning trinket—you can take 10 on this check, even while distracted or in combat. A trinket lasts for 1 hour + 10 minutes per point you exceed the DC (maximum 1 day), or 30 minutes on a failure. After this time, it breaks down into its base components.\n\nYou can only craft certain objects as a trinket (as determined by the package(s) you possess), and cannot be alchemical, magical, have limited uses, involve special materials, or require knowledge you do not possess (such as a specific key). A trinket shares the same statistics as the replicated item.\n\nA trinket’s size must be at least two size categories smaller than you, but you can increase its Craft DC by +5 and craft time by +5 minutes to increase its size category by one–this is cumulative, to a maximum size equal to one size larger than you. Some trinkets must be made at a larger size to be functional (like clothing, a ladder, etc.).\n\nThe necessary materials for creating a trinket are gathered over the course of a given day—there is no monetary cost to creating a trinket, and has no monetary value (DC 0 Appraise check to determine).\n\n{b}Note{/b}: You cannot create a trinket that replicates an item from another sphere talent (even if you possess that sphere), such as an Alchemy sphere formulae, Trap sphere trap, etc.">
    <tag group="SoGSphere" tag="Artifice"/>
    <tag group="SoGTlClass" tag="InitTalent"/>
    <tag group="SoGTlClass" tag="Talent"/>
    <tag group="AbilType" tag="Extra"/>
    </thing>
  <thing id="sogTlCobbledCreat" name="Cobbled Creation" compset="SoGTalent" description="You can adopt this approach as a swift action. While maintaining this approach, you can create a trinket as a full-round action, even if you do not have access to an artisan’s kit. When you create a trinket this way, it only lasts for 1 round per associated skill rank you possess. You can create a larger trinket this way by spending 1 round (not a full-round action) for each minute normally required.">
    <tag group="SoGSphere" tag="Artifice"/>
    <tag group="SoGTlClass" tag="InitTalent"/>
    <tag group="SoGTlClass" tag="Talent"/>
    <tag group="SoGTalDesc" tag="Approach"/>
    <tag group="AbilType" tag="Extra"/>
    </thing>
  <thing id="sogTlArtwork" name="Artwork" compset="SoGTalent" description="Your creations are mostly for creative expression, outward appearance, and hidden meanings. Your trinkets can replicate the function of objects such as flags, art pieces, statues, clothing, jewelry, items used for Charisma-based skill checks (such as musical instruments), or any other form of artistic expression.\n\n{b}Associated Skill{/b}: Artistry (choreography, literature, musical composition, or playwriting) or Craft (books, calligraphy, carpentry, cloth, clothing, glass, jewelry, musical instruments, paintings, pottery, sculptures, stonemasonry, tattoos, or taxidermy)." summary="Gain the artwork package." panellink="tbSoGArtifice" uniqueness="useronce">
    <fieldval field="usrCandid1" value="component.BaseSkill &amp; (thingid.skAtrChore | thingid.skArtLiter | thingid.skArtMusCo | thingid.skArtPlayw | thingid.skCrafBook | thingid.skCrafCall | thingid.skCrafCarp | thingid.skCrafRClot | thingid.skCrafRWorn | thingid.skCrafGlas | thingid.skCrafJewe | thingid.skCrafMusi | thingid.skCrafPain | thingid.skCrafPott | thingid.skCrafScul | thingid.skCrafSton | thingid.skCrafTatt | thingid.skCrafRTaxidermy)"/>
    <usesource source="pPF1e_Sph_Guile" parent="pPF1e_Sph" name="Spheres of Guile"/>
    <tag group="SoGSphere" tag="Artifice"/>
    <tag group="SoGTlClass" tag="Package" name="Package" abbrev="Package"/>
    <tag group="SoGTalDesc" tag="ArtArtwork"/>
    <tag group="SoGIsPkg" tag="Artwork"/>
    <tag group="ChooseSrc1" tag="Hero"/>
    <tag group="Helper" tag="SpecUp" name="SpecUp" abbrev="SpecUp"/>
    <tag group="SoGFreeTal" tag="ArtArtwork"/>
    <tag group="SoGFreeTal" tag="ArtFunctio"/>
    <bootstrap thing="abSoGSkLeverage"></bootstrap>
    <eval phase="PostLevel" priority="1500" name="Assign initial Skill Leverage"><![CDATA[~ Get out if disabled
     doneif (tagis[Helper.SpcDisable] <> 0)
     ~ or a duplicate.
     doneif (tagis[Helper.FirstCopy] = 0)
     ~ or if no choice made.
     doneif (field[usrChosen1].ischosen = 0)

     perform hero.childfound[sogTlSpArtifice].assignstr["SkLeverage." & field[usrChosen1].chosen.idstring]]]></eval>
    <eval phase="First" priority="103" name="Assign initial Associated Skill"><![CDATA[~ Get out if disabled
     doneif (tagis[Helper.SpcDisable] <> 0)
     ~ or if no choice made.
     doneif (field[usrChosen1].ischosen = 0)

     perform hero.childfound[sogTlSpArtifice].assignstr["SoGAssocSk." & field[usrChosen1].chosen.idstring]]]></eval>
    </thing>
  <thing id="sogTlFabrication" name="Fabrication" compset="SoGTalent" description="You are versed in the wider scope of creation and construction, creating things that have more generic, domestic uses than other packages. When you gain this package, your trinkets can replicate the function of objects that increase your carrying capacity (such as a basket or backpack), offer a different or enhanced mode of transport (such as a rope, ladder, sledge, etc.), or are tools suitable for skill checks (such as a crowbar or magnifying glass).\n\n{b}Associated Skill{/b}: Craft (baskets, blacksmithing, carpentry, clockwork, cloth, clothing, glass, leather, locks, mechanical, shoes, or stonemasonry)." summary="Gain the fabrication package" panellink="tbSoGArtifice" uniqueness="useronce">
    <fieldval field="usrCandid1" value="component.BaseSkill &amp; (thingid.skCrafBask | thingid.skCrafBlac | thingid.skCrafCarp | thingid.skCrafCloc | thingid.skCrafRClot | thingid.skCrafRWorn | thingid.skCrafGlas | thingid.skCrafLeat | thingid.skCrafLock | thingid.skCrafMech | thingid.skCrafShoe | thingid.skCrafSton)"/>
    <usesource source="pPF1e_Sph_Guile" parent="pPF1e_Sph" name="Spheres of Guile"/>
    <tag group="SoGSphere" tag="Artifice"/>
    <tag group="SoGTlClass" tag="Package" name="Package" abbrev="Package"/>
    <tag group="SoGTalDesc" tag="ArtFabrica"/>
    <tag group="SoGIsPkg" tag="Fabrication"/>
    <tag group="ChooseSrc1" tag="Hero"/>
    <tag group="Helper" tag="SpecUp" name="SpecUp" abbrev="SpecUp"/>
    <tag group="SoGFreeTal" tag="ArtFabrica"/>
    <tag group="SoGFreeTal" tag="ArtFunctio"/>
    <bootstrap thing="abSoGSkLeverage"></bootstrap>
    <eval phase="First" priority="103" name="Assign initial Associated Skill"><![CDATA[~ Get out if disabled
     doneif (tagis[Helper.SpcDisable] <> 0)
     ~ or if no choice made.
     doneif (field[usrChosen1].ischosen = 0)

     perform hero.childfound[sogTlSpArtifice].assignstr["SoGAssocSk." & field[usrChosen1].chosen.idstring]]]></eval>
    <eval phase="PostLevel" priority="1500" name="Assign initial Skill Leverage"><![CDATA[~ Get out if disabled
     doneif (tagis[Helper.SpcDisable] <> 0)
     ~ or a duplicate.
     doneif (tagis[Helper.FirstCopy] = 0)
     ~ or if no choice made.
     doneif (field[usrChosen1].ischosen = 0)

     perform hero.childfound[sogTlSpArtifice].assignstr["SkLeverage." & field[usrChosen1].chosen.idstring]]]></eval>
    </thing>
  <thing id="sogTlGear" name="Gear" compset="SoGTalent" description="The things you create have specific, functional uses, and typically need to be held or worn to be of any use. When you gain this package, your trinkets can replicate the function of objects that damage objects or surfaces (such as a saw or drill), are ammo or weapons (or function as improvised weapons), or that can be worn (such as armor, clothing, or manacles). If you replicate a weapon that you are not proficient with, you must be able to examine such a weapon (or talk with a creature who is proficient) while creating the trinket. You can only replicate weapons that you have seen before.\n\nAssociated Skill: Craft (alchemy, armor, blacksmithing, bows, clothing, firearms, leather, shoes, traps, or weapons)." summary="Gain the gear package." panellink="tbSoGArtifice" uniqueness="useronce">
    <fieldval field="usrCandid1" value="component.BaseSkill &amp; (thingid.skCrafAlch | thingid.skCrafArm | thingid.skCrafBlac | thingid.skCrafBows | thingid.skCrafRWorn | thingid.skCrafGun | thingid.skCrafLeat  | thingid.skCrafShoe | thingid.skCrafTrap | thingid.skCrafWeap)"/>
    <usesource source="pPF1e_Sph_Guile" parent="pPF1e_Sph" name="Spheres of Guile"/>
    <tag group="SoGSphere" tag="Artifice"/>
    <tag group="SoGTlClass" tag="Package" name="Package" abbrev="Package"/>
    <tag group="SoGTalDesc" tag="ArtGear"/>
    <tag group="SoGIsPkg" tag="Gear"/>
    <tag group="ChooseSrc1" tag="Hero"/>
    <tag group="Helper" tag="SpecUp" name="SpecUp" abbrev="SpecUp"/>
    <tag group="SoGFreeTal" tag="ArtFunctio"/>
    <tag group="SoGFreeTal" tag="ArtGear"/>
    <bootstrap thing="abSoGSkLeverage"></bootstrap>
    <eval phase="First" priority="103" name="Assign initial Associated Skill"><![CDATA[~ Get out if disabled
     doneif (tagis[Helper.SpcDisable] <> 0)
     ~ or if no choice made.
     doneif (field[usrChosen1].ischosen = 0)

     perform hero.childfound[sogTlSpArtifice].assignstr["SoGAssocSk." & field[usrChosen1].chosen.idstring]]]></eval>
    <eval phase="PostLevel" priority="1500" name="Assign initial Skill Leverage"><![CDATA[~ Get out if disabled
     doneif (tagis[Helper.SpcDisable] <> 0)
     ~ or a duplicate.
     doneif (tagis[Helper.FirstCopy] = 0)
     ~ or if no choice made.
     doneif (field[usrChosen1].ischosen = 0)

     perform hero.childfound[sogTlSpArtifice].assignstr["SkLeverage." & field[usrChosen1].chosen.idstring]]]></eval>
    </thing>
  <thing id="sogTlExpressiveCr" name="Expressive Creativity" compset="SoGTalent" description="{b}Bespoke (+5 DC){/b}: When you apply this function, choose a specific faction, cultural group, or motivation. The user gains a +2 circumstance bonus to Bluff, Diplomacy, Disguise, Intimidate, and Perform checks, as well as checks made as an impressive display of skill. This bonus increases by an additional +2 when made against creatures of the chosen group or that possess the chosen motivation.\n\n{b}Special{/b}: If you possess the Fundamental Expertise talent, you can choose a second social group, faction, or motivation for this function to apply to." uniqueness="useronce">
    <usesource source="pPF1e_Sph_Guile"/>
    <tag group="SoGSphere" tag="Artifice"/>
    <tag group="SoGTlClass" tag="Talent"/>
    <tag group="SoGTalDesc" tag="ArtArtwork"/>
    <tag group="SoGTalDesc" tag="ArtFunctio"/>
    <tag group="SoGTalDesc" tag="Utility"/>
    <tag group="SoGReqPkg" tag="Artwork"/>
    <tag group="User" tag="NeedDomain"/>
    </thing>
  <thing id="sogTlMakeshiftToo" name="Makeshift Tools" compset="SoGTalent" description="{b}Tool (+5 DC){/b}: When you apply this function, choose a Strength- or Dexterity-based ability check (excluding initiative checks) or skill check or an Artistry, Craft, or Profession skill. The trinket functions as a masterwork tool of the chosen skill, but grants a +4 circumstance bonus to the chosen skill (instead of the normal +2). Additionally, the user temporarily unlocks skill leverage with the chosen skill while using the tool.\n\n{b}Special{/b}: If you possess the Fundamental Expertise talent, you can choose a second skill check for this function to apply to." uniqueness="useronce">
    <usesource source="pPF1e_Sph_Guile"/>
    <tag group="SoGSphere" tag="Artifice"/>
    <tag group="SoGTlClass" tag="Talent"/>
    <tag group="SoGTalDesc" tag="ArtFabrica"/>
    <tag group="SoGTalDesc" tag="ArtFunctio"/>
    <tag group="SoGTalDesc" tag="Utility"/>
    <tag group="SoGReqPkg" tag="Fabrication"/>
    <bootstrap thing="gMakeshiftTools"></bootstrap>
    </thing>
  <thing id="sogTlChemicalArma" name="Chemical Armaments" compset="SoGTalent" description="{b}Distinct (+10 DC){/b}: When you apply this function, choose a single artwork that you can create. The user can spend a standard action to display the artwork until the start of their next turn–this functions similarly to a gaze attack, treating creatures within 30 feet that can see the artwork as though they had engaged with it unless they choose to avert their eyes.\n\nThe artwork’s duration changes to 1 + 1 round per 4 associated ranks. Once a creature has engaged with an artwork using this function, they become immune to functions that use the same artwork for 1 hour" uniqueness="useronce">
    <comment>TODO: Bootstrap a tool, so it can be equipped to provide the bonus.</comment>
    <usesource source="pPF1e_Sph_Guile"/>
    <tag group="SoGSphere" tag="Artifice"/>
    <tag group="SoGTlClass" tag="Talent"/>
    <tag group="SoGTalDesc" tag="ArtFunctio"/>
    <tag group="SoGTalDesc" tag="ArtGear"/>
    <tag group="SoGTalDesc" tag="Utility"/>
    <tag group="SoGAbV1Sc" tag="1_4A"/>
    <tag group="LvNamePar" tag="AppValue"/>
    <tag group="LvNamePar" tag="SignAppVal"/>
    <tag group="SoGReqPkg" tag="Gear"/>
    </thing>
  <thing id="sogTlMobileDefens" name="Mobile Defenses" compset="SoGTalent" description="You can provide the following function to your trinkets:\n\n{b}Cover (+10 DC){/b}: You create a trinket that can be deployed on the ground as a standard action, folding out to be a 5-foot wall that is half your height (or generally whatever height would grant you partial cover), 5-foot wide wall.\n\nWhen deployed, the user chooses one edge of their space to treat as granting partial cover to creatures that use it. While deployed, all other functions that the trinket possesses cannot be used until it is retracted as a standard action. This cover can be moved as a swift action, choosing a new edge, or moved to a new square completely as part of an action to move.\n\nAdditionally, you can grant one of the following additions to the cover, plus one per 7 ranks you possess in this package’s associated skill (unless otherwise specified, an addition can only be applied once):\n{indent 20}\n* The width of the wall increases by 5 feet, allowing you to choose an additional edge as long as it is contiguous. This addition can be chosen multiple times.\n* The height of the wall increases by 50%, granting creatures cover (instead of partial cover).\n* The cover may be deployed and retracted as a move action. This addition can be chosen a second time to change the time to deploy and retract the cover to a swift action." uniqueness="useronce">
    <fieldval field="abText" value="additions"/>
    <fieldval field="abValue" value="1"/>
    <usesource source="pPF1e_Sph_Guile"/>
    <tag group="SoGSphere" tag="Artifice"/>
    <tag group="SoGTlClass" tag="Talent"/>
    <tag group="SoGTalDesc" tag="ArtFabrica"/>
    <tag group="SoGTalDesc" tag="ArtFunctio"/>
    <tag group="SoGAbV1Sc" tag="1_7A"/>
    <tag group="LvNamePar" tag="AppText"/>
    <tag group="LvNamePar" tag="AppValue"/>
    <tag group="SoGReqPkg" tag="Fabrication"/>
    </thing>
  <thing id="sogTlImpressiveWe" name="Impressive Weaponry" compset="SoGTalent" description="You gain the following function:\n\n{b} Weapon (+5 DC){/b}: When you apply this function, choose bludgeoning, piercing, or slashing, and whether the weapon is light, one-handed, or two-handed. The trinket can be used as a simple melee or ranged weapon that deals 1d6 damage of the chosen damage type (1d4 for Small, 1d8 for Large)–this increases to 1d8 if one-handed, or 1d12 if two-handed; you are proficient with this weapon.\nIf it is a ranged weapon, it has a range of 60 feet, is created with 20 pieces of ammunition, and can be reloaded as a move action (or a standard action if two-handed).\n\nAdditionally, you can add one of the following options, plus one per 7 associated ranks you possess.\n{indent 20}\n* Gain one of the following properties: blocking, brace, disarm, distracting, nonlethal, performance, reach, or trip.\n* The weapon becomes a thrown weapon with a range increment of 50 feet, or 30 feet if the weapon is one-handed, or 20 feet if the weapon is two-handed. If the weapon is a ranged weapon, its range increment increases by 30 feet.\n* The critical threat range increases to 19-20. This can be chosen a second time to increase the threat range to 18-20.\n* The action cost to reload the weapon is reduced by one step (full-round action, standard action, move action, swift action, free action). This can be chosen multiple times.\n\nYou can also choose to make the weapon fragile (Pathfinder Roleplaying Game: Ultimate Equipment).\n\n{b}Special{/b}: If you possess the Fundamental Expertise talent, you can choose two of the listed damage types for the weapon to deal instead of one." uniqueness="useronce">
    <comment>TODO: Bootstrap a tool, so it can be equipped to provide the bonus.</comment>
    <fieldval field="abText" value="options"/>
    <fieldval field="abValue" value="1"/>
    <usesource source="pPF1e_Sph_Guile"/>
    <tag group="SoGSphere" tag="Artifice"/>
    <tag group="SoGTlClass" tag="Talent"/>
    <tag group="SoGTalDesc" tag="ArtFunctio"/>
    <tag group="SoGTalDesc" tag="ArtGear"/>
    <tag group="SoGTalDesc" tag="Utility"/>
    <tag group="SoGAbV1Sc" tag="1_7A"/>
    <tag group="LvNamePar" tag="AppText"/>
    <tag group="LvNamePar" tag="AppValue"/>
    <tag group="SoGReqPkg" tag="Gear"/>
    </thing>
  <thing id="sogTlClearInterpr" name="Clear Interpretations" compset="SoGTalent" description="You gain the following function:\n\n{b} Distinct (+10 DC){/b}: When you apply this function, choose a single artwork that you can create. The user can spend a standard action to display the artwork until the start of their next turn–this functions similarly to a gaze attack, treating creatures within 30 feet that can see the artwork as though they had engaged with it unless they choose to avert their eyes.\n\nThe artwork’s duration changes to 1 + 1 round per 4 associated ranks. Once a creature has engaged with an artwork using this function, they become immune to functions that use the same artwork for 1 hour" uniqueness="useronce">
    <fieldval field="abText" value="rounds"/>
    <fieldval field="abValue" value="1"/>
    <usesource source="pPF1e_DRS_InvIng"/>
    <usesource source="pPF1e_Sph_Guile"/>
    <tag group="SoGSphere" tag="Artifice"/>
    <tag group="SoGTlClass" tag="Talent"/>
    <tag group="SoGTalDesc" tag="ArtArtwork"/>
    <tag group="SoGTalDesc" tag="ArtFunctio"/>
    <tag group="SoGTalDesc" tag="Utility"/>
    <tag group="SoGAbV1Sc" tag="1_4A"/>
    <tag group="LvNamePar" tag="AppText"/>
    <tag group="LvNamePar" tag="AppValue"/>
    <tag group="SoGReqPkg" tag="Artwork"/>
    <tag group="User" tag="NeedDomain"/>
    </thing>
  <thing id="sogTlCompoundCrea" name="Compound Creation" compset="SoGTalent" description="When you apply this flourish to an object, you incorporate an additional object + 1 object per 6 ranks in the package’s associated skill to it. All objects must be within three size categories of each other, and cannot be a trinket. Each incorporated object is treated as an individual object for all purposes (except that no other objects can have this flourish), including magic item creation (requiring individual magical weapons to be enchanted separately, as though ends of a double weapon). An object with this flourish weighs as much as the heaviest object incorporated within it.\n\nThe user can spend a move action to switch to a different incorporated object—or as part of the same action to draw a weapon if you possess at least 5 ranks in a package’s associated skill.\n\nIf this flourish is applied to a trinket, the trinket can have +1 function, +1 function per 6 ranks in the package’s associated skill you possess.\n\nIf this flourish receives special maintenance, you can choose to combine two incorporated objects into one to allow both objects to be used concurrently. The two objects generally must have a similar method of use (such as being a held item; a longsword and flute could be combined, but not a set of full plate and a guitar); up to GMs discretion. The combined object combines its total and current hit points, and uses the better of any other statistics the object may possess (such as hardness); when the objects are no longer combined, any damage is split equally between both objects." uniqueness="useronce">
    <fieldval field="abText" value="objects/functions"/>
    <fieldval field="abValue" value="1"/>
    <usesource source="pPF1e_Sph_Guile"/>
    <tag group="SoGSphere" tag="Artifice"/>
    <tag group="SoGTlClass" tag="Talent"/>
    <tag group="SoGTalDesc" tag="ArtFlouris"/>
    <tag group="SoGAbV1Sc" tag="1_6A"/>
    <tag group="LvNamePar" tag="AppText"/>
    <tag group="LvNamePar" tag="AppValue"/>
    </thing>
  <thing id="sogTlEmotiveStyle" name="Emotive Styles" compset="SoGTalent" description="You gain the following {i}artworks{/i}:\n\n{b}Bleak{/b}: Creatures that engage with the artwork must succeed at a Will saving throw or have any morale bonus they benefit from instead become an equivalent penalty, as well as being unable to benefit from teamwork feats or aid another.\n\nOn a successful save, the creature instead reduces any morale bonuses they would benefit from by 1.\n\n{b}Hopeful{/b}: Creatures that engage with the artwork gain a +1 morale bonus to attack rolls and skill checks, +1 per 10 associated ranks. Additionally, any morale bonus the creature benefits from lasts twice as long (as long as it has a duration of at least 1 round, to a maximum duration equal to the artwork’s duration)." uniqueness="useronce">
    <fieldval field="abText" value="morale"/>
    <fieldval field="abValue" value="1"/>
    <usesource source="pPF1e_DRS_InvIng"/>
    <usesource source="pPF1e_Sph_Guile"/>
    <tag group="SoGSphere" tag="Artifice"/>
    <tag group="SoGTlClass" tag="Talent"/>
    <tag group="SoGTalDesc" tag="ArtArtwork"/>
    <tag group="SoGTalDesc" tag="ArtFlouris"/>
    <tag group="SoGAbV1Sc" tag="1_0A"/>
    <tag group="LvNamePar" tag="AppText"/>
    <tag group="LvNamePar" tag="AppValue"/>
    </thing>
  <thing id="sogTlEvocativeVis" name="Evocative Visuals" compset="SoGTalent" description="You can create an artwork with any of the following additions:\n\n    * Creatures become fascinated and distracted with the artwork for as long as they engage with it.\n    * The artwork has a ‘trigger’, such as a specific creature, faction, symbol, etc. When a creature engages with this artwork, for the next 24 hours, its effects (including duration) only start when they perceive the chosen trigger.\n\nAdditionally, you gain the following artwork:\n\n{b}Articulating{/b}: When you create this artwork, choose a single skill use that involves talking with a creature (such as demoralize, insult, perplex, etc) and would take up to the same amount of time as engaging with the artwork. Whenever a creature engages with an artwork, they are subject to the chosen skill use–if it requires a skill check, its check result is equal to 10 + this package’s associated skill modifier (or the skill modifier of the chosen skill, whichever is higher).\n\n{b}Special{/b}: If you possess the Bluster or Performance sphere, you can choose a (lyric) or (quip) instead of a skill use. The talent cannot have any costs associated with it, and makes the ability instead rely on the same components as the artwork (usually visual). If the chosen ability requires a saving throw, you can use your Artifice sphere DC or the sphere DC of the chosen talent.\n\nIf you have the Tug The Heartstrings feat, creatures that engage with the artwork are treated as though the chosen motivation were invoked for the purposes of determining the effects of the chosen skill use or sphere ability." uniqueness="useronce">
    <fieldval field="abText" value="morale"/>
    <usesource source="pPF1e_Sph_Guile"/>
    <tag group="SoGSphere" tag="Artifice"/>
    <tag group="SoGTlClass" tag="Talent"/>
    <tag group="SoGTalDesc" tag="ArtArtwork"/>
    <tag group="SoGTalDesc" tag="ArtFlouris"/>
    </thing>
  <thing id="sogTlInfluentialA" name="Influential Artistry" compset="SoGTalent" description="You can choose to have creatures that engage with your artworks be treated as if you had performed an impressive display of skill against them with a check result equal to 10 + your package’s associated skill modifier; this condition lasts for 1 day on a success.\n\n{b}Special{/b}: If you have the Social Clout Faction sphere talent (or similar ability, like the renown vigilante talent), as long as such an artwork remains convenient to access for 1 day, creatures within the community and area you have clout in (and would be impressed by the artwork) seek out the artwork to engage with it–this popularity may extend beyond your area of clout, up to GMs discretion. You can use this sphere’s associated ranks instead of your Faction sphere’s associated ranks when determining this effect.\n\nYou can spend 1 use of skill leverage to ignore this talent requirement, but you treat your associated ranks as being 2 lower when doing so (minimum 1).\n\nYou also gain the following artworks:\n\n{b}Review{/b}: When you create this artwork, choose a creature or organization. A creature that engages with the artwork must succeed at a Will saving throw or have their attitude towards the target be worsened or improved by 1 step (chosen when created) for 1 week. If the creature is friendly or unfriendly towards the target, they gain a +2 bonus to this saving throw if the artwork attempts to adjust their attitude in the other direction–this artwork has no effect on creatures that are hostile or helpful towards the target. Additionally, the creature gains a minor motivation involving the target for 1 week, usually one that is aligned with their current motivations.\nA creature with at least 4 fewer Hit Dice than this package’s associated ranks do not receive a saving throw.\n\n{b}Thought-Provoking{/b}: A creature who engages with this artwork gains a +4 bonus to Linguistics checks attempted to detect forgeries, to Sense Motive checks to discern secret messages, detect lies, or any similar checks to discover hidden meanings in words or visual imagery. Additionally, they gain a +2 competence bonus to saving throws against illusions, visual effects, and effects that would give them a disorientation condition. The bonuses granted by this artwork last for 1 hour per rank in this package’s associated skill you possess." uniqueness="useronce">
    <fieldval field="abText" value="morale"/>
    <usesource source="pPF1e_Sph_Guile"/>
    <tag group="SoGSphere" tag="Artifice"/>
    <tag group="SoGTlClass" tag="Talent"/>
    <tag group="SoGTalDesc" tag="ArtArtwork"/>
    <tag group="SoGTalDesc" tag="ArtFlouris"/>
    <tag group="SoGTalDesc" tag="Utility"/>
    </thing>
  <thing id="sogTlFieldRepair" name="Field Repair" compset="SoGTalent" description="If you are trained in a Craft skill appropriate to a broken item, you can repair that item with no raw material cost. You also take no penalty to Craft checks made using improvised tools.\n\nAs a standard action that provokes attacks of opportunity, you can grant an object within your natural reach a number of temporary hit points equal to twice your associated ranks for 10 minutes–this requires artisan’s tools or similar. This cannot cause the combined total of current and temporary hit points to exceed the object’s maximum hit points.\n\nIf the object is broken, it ignores this instance of the condition while these temporary hit points persist.\n\nYou can spend 1 minute with an artisan’s kit to convert these temporary hit points to normal hit points (effectively repairing the item).\n\n{b}Associated Feat{/b}: Field Repair (Ultimate Combat)." uniqueness="useronce">
    <fieldval field="abText" value="objects/functions"/>
    <fieldval field="abValue" value="1"/>
    <usesource source="pPF1e_Sph_Guile"/>
    <tag group="SoGSphere" tag="Artifice"/>
    <tag group="SoGTlClass" tag="Talent"/>
    <tag group="SoGTalDesc" tag="ArtFlouris"/>
    <tag group="HasFeat" tag="fFieldRepa"/>
    </thing>
  <thing id="sogTlMeticulousUp" name="Meticulous Upkeep" compset="SoGTalent" description="As a plan revealed as an immediate action, you can reveal that you had provided maintenance to a flourish.\n\nWhen you provide maintenance to a flourish, the object gains the following benefits:\n\n    * It ignores the effects of the broken condition.\n    * It is only destroyed when it reaches a number of negative hit points equal to your operative modifier (minimum 1) + one of your package’s associated ranks.\n    * It gains a number of temporary hit points equal to your associated ranks + your operative modifier (minimum 1).\n\nYou can also provide maintenance to an object that does not have a flourish to grant it benefits reliant on maintenance (as if it were a flourish). An object that remains in your possession (including flourishes) temporarily gains the benefits of your maintenance.\n\nYou can also provide maintenance to a flourish any amount of times per day–this does not allow benefits to stack, but may grant you multiple opportunities to replenish or refresh certain benefits." uniqueness="useronce">
    <fieldval field="abText" value="hit points"/>
    <usesource source="pPF1e_DRS_InvIng"/>
    <usesource source="pPF1e_Sph_Guile"/>
    <tag group="SoGSphere" tag="Artifice"/>
    <tag group="SoGTlClass" tag="Talent"/>
    <tag group="SoGTalDesc" tag="ArtFlouris"/>
    <tag group="SoGAbV1OM" tag="Value"/>
    <tag group="SoGAbV1Sc" tag="1_1A"/>
    <tag group="LvNamePar" tag="AppText"/>
    <tag group="LvNamePar" tag="AppValue"/>
    <tag group="HasFeat" tag="fFieldRepa"/>
    <tag group="SoGFreeTal" tag="Plan"/>
    </thing>
  <thing id="sogTlGreaterTrink" name="Greater Trinkets" compset="SoGTalent" description="When you create a trinket, they last 8 hours, plus an additional hour for every point your check exceeds the Craft DC before it returns to its base components. You can also create trinkets that are complex in nature without increasing its Craft DC. This does not benefit trinkets created in 1 round or shorter, or those created with Cobbled Creation.\n\nAdditionally, while you maintain the cobbled creation approach, you can create a trinket as a standard action instead of a full-round action. For every 10 ranks you possess in the associated skill, this action cost is reduced by one step (standard to move, move to swift)." uniqueness="useronce">
    <usesource source="pPF1e_Sph_Guile"/>
    <tag group="SoGSphere" tag="Artifice"/>
    <tag group="SoGTlClass" tag="Talent"/>
    <tag group="SoGAbV1Sc" tag="1_0A"/>
    <tag group="LvNamePar" tag="AppText"/>
    <eval phase="Render" priority="400"><![CDATA[~ Do nothing if disabled.
  doneif (tagis[Helper.SpcDisable] <> 0)

  if (field[abValue].value >= 2) then
    field[abText].text = "swift"
  elseif (field[abValue].value = 1) then
    field[abText].text = "move"
  else
    field[abText].text = "standard"
  endif]]></eval>
    </thing>
  <thing id="sogTlAestheticArt" name="Aesthetic Artifice" compset="SoGTalent" description="You unlock skill leverage with one of the skills listed below. Additionally, you gain the following benefits if you have unlocked skill leverage with the appropriate skill (as listed below):\n\n{b}Glimmering (flourish) (jewelry) (Craft (jewelry)){/b}: The wearer gains a +2 circumstance bonus to Bluff and Diplomacy checks, as well as checks made to entertain or impress. This bonus increases by +1 per 5 ranks in Craft (jewelry) you possess, and by +2 against creatures that value grand wealth and extravagant apparel (such as nobles and merchants).\n\nAdditionally, the wearer can make an impressive display of skill as a move action using either their Diplomacy or your Craft (jewelry) bonus.\n\n{b}Literary Text (Artistry (literature) or Craft (books or calligraphy)){/b}: When you create an artwork in a written form (such as a book), you can choose to make it a literary artwork. A literary artwork takes 1 hour to engage with, becomes a language-dependent effect, and lasts twice as long as normal.\n\nAdditionally, choose 1 + 1 skills per 10 ranks in Artistry (literature) or Craft (books or calligraphy) you possess. A creature that engages with a literary artwork is considered taught in the chosen skills (new skill use) and unlocks skill leverage with those skills for 24 hours.\n\n{b}Living Canvas (Craft (tattoos)){/b}: You can apply +1 artwork to a creature–such a creature can engage with artworks applied to them without having to see it, and can enter the following approach:\n\n    {b}Ink-proud [approach]{/b}: You can reveal artworks applied to you as though it were a distinct trinket function (as per the Clear Interpretations talent).\n\n{b}Sonorous (flourish) (musical instruments) (Craft (musical instruments)){/b}: The instrument grants a +2 circumstance bonus to Perform checks made to perform with the instrument, +1 per 5 ranks in Craft (musical instruments) you possess.–this bonus stacks with the circumstance bonus due to being masterwork.\n\nAdditionally, whenever the instrument is played, the area that it can be clearly heard is increased by 50% (this includes abilities such as a Performance sphere instrumental or an instrument-based bardic performance). You can also alter the instrument so that it sounds like a different instrument (such as making a lute sound like a guitar, or a keyboard sound like drums), although the qualities of the instrument (such as volume, pitch, method of playing) are unchanged.\n\n{b}Visual Expression (Craft (paintings, pottery, or sculptures)){/b}: You can apply +1 artwork to Small-sized objects or larger, and artworks applied to such an object function as though your associated ranks were 4 higher for determining its effects." uniqueness="useronce">
    <comment>TODO coding missing.</comment>
    <usesource source="pPF1e_DRS_InvIng"/>
    <usesource source="pPF1e_Sph_Guile"/>
    <tag group="SoGSphere" tag="Artifice"/>
    <tag group="SoGTlClass" tag="Talent"/>
    <tag group="LvNamePar" tag="AppText"/>
    <eval phase="Render" priority="400"><![CDATA[~ Do nothing if disabled.
  doneif (tagis[Helper.SpcDisable] <> 0)

  if (field[abValue].value >= 2) then
    field[abText].text = "swift"
  elseif (field[abValue].value = 1) then
    field[abText].text = "move"
  else
    field[abText].text = "standard"
  endif]]></eval>
    </thing>
  <thing id="sogDbCarefulEngin" name="Careful Engineer" compset="SoGDrawbk" description="You lose the trinket ability and cobbled creation approach, as well as the bonus (function) talent granted when you gain a package. You gain a [utility] talent and a (flourish) talent of your choice.\n\n{b}Special{/b}: This drawback can be taken as a [utility start] if the chosen (flourish) talent is a utility talent." panellink="tbSoGArtifice" uniqueness="useronce">
    <usesource source="pPF1e_Sph_Guile" parent="pPF1e_Sph" name="Spheres of Guile"/>
    <tag group="SoGSphere" tag="Artifice" name="Artifice" abbrev="Artifice"/>
    <tag group="Helper" tag="AlwaysAvl" name="AlwaysAvl" abbrev="AlwaysAvl"/>
    <tag group="SoGBanTal" tag="sogTlCobbledCreat" name="Cobbled Creation" abbrev="Cobbled Creation"/>
    <tag group="SoGBanTal" tag="sogTlTrinket" name="Trinket" abbrev="Trinket"/>
    <tag group="SoGFreeTal" tag="ArtFlouris" name="Artifice (flourish)" abbrev="Artifice (flourish)"/>
    <eval phase="First"><![CDATA[~ Add one [utility] talent.
     doneif (tagis[Helper.SpcDisable] <> 0)

     debug "🛠 Adding one [utility] talent from Careful Engineer."
     hero.findchild[Resource, "thingid.resSGUtilTal"].field[resMax].value += 1

     doneif (hero.tagis[source.pPF1e_ExpUtil] = 0)

     ~ Also add here if enabled.
     debug "🛠 Adding one Expanded [utility] talent from Careful Engineer."
     hero.findchild[Resource, "thingid.resSGExUtilTal"].field[resMax].value += 1]]></eval>
    </thing>
  <thing id="sogSpBluster" name="Bluster Sphere" compset="SoGSphere" uniqueness="unique">
    <usesource source="pPF1e_Sph_Guile"/>
    <tag group="SoGSphere" tag="Bluster" name="Bluster"/>
    </thing>
  <thing id="resSGSEBluster" name="Bonus Bluster Talents" compset="Resource" panellink="tbSoGBluster">
    <fieldval field="resObject" value="Bonus Bluster Talents"/>
    <usesource source="pPF1e_Sph_Guile"/>
    <tag group="SoGSphere" tag="Bluster"/>
    <tag group="SoGBonTal" tag="Bluster"/>
    <eval phase="Final">~ Add bonus talents
        field[resMax].value += hero.tagcount[SoGBonTal.Bluster]</eval>
    <eval phase="Final" priority="999999999999" index="2"><![CDATA[
        ~ If we have any bonus talents, show the sphere tab
        if (field[resMax].value > 0) then
          perform pulltags[SoGBonTal.?,SoGSphTab]
          perform hero.pushtags[SoGSphTab.?]
        endif]]></eval>
    </thing>
  <thing id="sogTlHdBlu" name="{align center}Bluster" compset="SoGTalent" isshowonly="yes">
    <tag group="SoGSphere" tag="Bluster"/>
    <tag group="SoGTlClass" tag="GainSphere"/>
    </thing>
  <thing id="sogTlSpBluster" name="Bluster Sphere" compset="SoGTalent" description=" Operatives of the Bluster sphere are skilled at trickery and emotional influence. They know how to make the most of information about enemies’ hopes and fears.\n\n{b}Associated Skill{/b}: Bluff or Intimidate. Choose one to be the associated skill when you gain the sphere.\n\nYou gain the following benefits when you gain the Bluster sphere:\n\nYou gain 5 ranks in the chosen skill, plus 5 ranks per additional talent spent in the Bluster sphere (maximum ranks equal to your Hit Dice). If you already have ranks in the chosen skill, you may immediately retrain them.\n\n{b}Skill Leverage{/b}: You unlock skill leverage with the Bluff and Intimidate skills.\n\n{b}Bonus Talent{/b}: When you gain the Bluster sphere, you gain one (quip) talent of your choice. It cannot be an exceptional talent. If you choose one with the [utility] tag, you can take the Bluster base sphere as a [utility] talent.\n\nYou also gain the Flaunt Secrets and Quip abilities." summary="Gain access to the Bluster Sphere." panellink="tbSoGBluster" uniqueness="useronce">
    <comment>TODO: Implement Bonus Talent.</comment>
    <fieldval field="usrCandid1" value="component.BaseSkill &amp; (thingid.skBluff | thingid.skIntim)"/>
    <usesource source="pPF1e_Sph_Guile"/>
    <tag group="SoGSphere" tag="Bluster"/>
    <tag group="SkLeverage" tag="skBluff"/>
    <tag group="SkLeverage" tag="skIntim"/>
    <tag group="SoGTlClass" tag="GainSphere"/>
    <tag group="SoGTlClass" tag="UtilStart"/>
    <tag group="ChooseSrc1" tag="Hero"/>
    <tag group="Helper" tag="AlwaysAvl"/>
    <tag group="Hide" tag="Activation"/>
    <bootstrap thing="abSoGSkLeverage"></bootstrap>
    <bootstrap thing="sogSpBluster"></bootstrap>
    <bootstrap thing="sogTlFlauntSecret">
      <containerreq phase="First" priority="500">!SoGBanTal.sogTlFlauntSecret</containerreq>
      </bootstrap>
    <bootstrap thing="sogTlQuip">
      <containerreq phase="First" priority="500">!SoGBanTal.sogTlQuip</containerreq>
      </bootstrap>
    <eval phase="First" priority="103" name="Assign initial Associated Skill"><![CDATA[~ Get out if disabled
     doneif (tagis[Helper.SpcDisable] <> 0)
     ~ or if no choice made.
     doneif (field[usrChosen1].ischosen = 0)

     perform assignstr["SoGAssocSk." & field[usrChosen1].chosen.idstring]]]></eval>
    </thing>
  <thing id="sogTlFlauntSecret" name="Flaunt Secrets" compset="SoGTalent" description="You know how to taunt a creature with its secrets to make it reckless and easier to outmaneuver. You can outwit a creature by invoking a motivation it does not share freely (although there is no other benefit for invoking that motivation this way).\n\nOnce you outwit a creature using this ability, you cannot outwit that creature by invoking the same motivation for 24 hours.">
    <tag group="SoGSphere" tag="Bluster"/>
    <tag group="SoGTlClass" tag="InitTalent"/>
    <tag group="SoGTlClass" tag="Talent"/>
    <tag group="AbilType" tag="Extra"/>
    </thing>
  <thing id="sogTlQuip" name="Quip" compset="SoGTalent" description="As a standard action, you make a quip to a creature within close range (25 feet + 5 feet per 2 ranks in the associated skill). You apply the effect of a (quip) talent you possess to that creature. If the creature is unwilling, it gets a Will saving throw to resist. Each time you target that creature again within 24 hours with the same (quip), the save DC to avoid it (if any) decreases by 4 and the skill DC to apply it (if any) increases by 4. Quipping is a language-dependent, mind-affecting emotion effect.">
    <tag group="SoGSphere" tag="Bluster"/>
    <tag group="SoGTlClass" tag="InitTalent"/>
    <tag group="SoGTlClass" tag="Talent"/>
    <tag group="AbilType" tag="Extra"/>
    </thing>
  <thing id="sogSpBodyCont" name="Body Control Sphere" compset="SoGSphere" uniqueness="unique">
    <usesource source="pPF1e_Sph_Guile"/>
    <tag group="SoGSphere" tag="BodyControl" name="Body Control" abbrev="Body Control"/>
    </thing>
  <thing id="resSGSEBodyCont" name="Bonus Body Control Talents" compset="Resource" panellink="tbSoGBodyControl">
    <fieldval field="resObject" value="Bonus Body Control Talents"/>
    <usesource source="pPF1e_Sph_Guile"/>
    <tag group="SoGSphere" tag="BodyControl"/>
    <tag group="SoGBonTal" tag="BodyControl"/>
    <eval phase="Final">~ Add bonus talents
        field[resMax].value += hero.tagcount[SoGBonTal.BodyControl]</eval>
    <eval phase="Final" priority="999999999999" index="2"><![CDATA[
        ~ If we have any bonus talents, show the sphere tab
        if (field[resMax].value > 0) then
          perform pulltags[SoGBonTal.?,SoGSphTab]
          perform hero.pushtags[SoGSphTab.?]
        endif]]></eval>
    </thing>
  <thing id="sogTlHdBCo" name="{align center}Body Control" compset="SoGTalent" isshowonly="yes">
    <tag group="SoGSphere" tag="BodyControl"/>
    <tag group="SoGTlClass" tag="GainSphere"/>
    </thing>
  <thing id="sogTlSpBodyCont" name="Body Control Sphere" compset="SoGTalent" description="Operatives of the Body Control sphere are skilled at meditation and unlocking the limits of their internal physiology. They can make their bodies do extraordinary things otherwise thought possible only with magic. \n\n{b}Associated Skill{/b}: Escape Artist.\n\nYou gain the following benefits when you gain the Body Control sphere.\n\nWhen you gain the Body Control sphere, you gain 5 ranks in Escape Artist, plus 5 ranks per additional talent spent in the Body Control sphere (maximum ranks equal to your Hit Dice). If you already have ranks in Escape Artist, you may immediately retrain them.\n\n{b}Skill Leverage{/b}: You unlock skill leverage with the Acrobatics and Escape Artist skills.\n\nYou also gain the Meditate and Slip Past abilities." summary="Gain access to the Body Control Sphere." panellink="tbSoGBodyControl" uniqueness="useronce">
    <usesource source="pPF1e_Sph_Guile"/>
    <tag group="SoGSphere" tag="BodyControl" name="Body Control" abbrev="Body Control"/>
    <tag group="SoGAssocSk" tag="skEscape"/>
    <tag group="SkLeverage" tag="skAcrobat"/>
    <tag group="SkLeverage" tag="skEscape"/>
    <tag group="SoGTlClass" tag="GainSphere"/>
    <tag group="SoGTlClass" tag="UtilStart"/>
    <bootstrap thing="abSoGSkLeverage"></bootstrap>
    <bootstrap thing="sogSpBodyCont"></bootstrap>
    <bootstrap thing="sogTlMaintainStam">
      <containerreq phase="First" priority="500">!SoGBanTal.sogTlMeditate</containerreq>
      </bootstrap>
    <bootstrap thing="sogTlMeditate">
      <containerreq phase="First" priority="500">!SoGBanTal.sogTlMeditate</containerreq>
      </bootstrap>
    <bootstrap thing="sogTlSlipPast">
      <containerreq phase="First" priority="500">!SoGBanTal.sogTlMeditate</containerreq>
      </bootstrap>
    </thing>
  <thing id="sogTlMeditate" name="Meditate" compset="SoGTalent" description="Adopting this approach is a swift action. While you maintain this approach, you gain some conscious control over your physiological processes and your emotional responses determined by the (control) talent you choose when you adopt the approach. You can endure certain effects listed in the talent when you fail an ability check, skill check, or saving throw against an effect permitted by your current (control) talent. To endure an effect, you attempt an associated skill check as a swift or immediate action. The DC and effect depend on whether it was an ability check, saving throw, or skill check.\n\n    * {b}Ability Check (twice the DC){/b}: If your skill check succeeds, you get a +2 insight bonus on the ability check, which can cause you to succeed instead of fail.\n    * {b}Saving Throw (DC 150% the save DC){/b}: If your skill check succeeds, you get a +3 insight bonus on the saving throw, which can cause it to succeed instead of fail.\n    * {b}Skill Check (DC 5 + the skill check DC){/b}: If your associated skill check succeeds, the failed skill check becomes a success.\n\nWhen you meditate, you may add up to two (control) talents to the approach, but you cannot have more than one unless at least one of those talents has the [utility] tag.\n\nYou gain the Maintain Stamina talent when you gain the Body Control sphere." summary="Meditation approach" uniqueness="useronce">
    <usesource source="pPF1e_Sph_Guile"/>
    <tag group="SoGSphere" tag="BodyControl" name="Body Control" abbrev="Body Control"/>
    <tag group="SoGTlClass" tag="InitTalent" name="Base Sphere Ability" abbrev="Base Sphere Ability"/>
    <tag group="SoGTalDesc" tag="Approach"/>
    <tag group="AbilType" tag="Extra"/>
    <tag group="User" tag="Activation" name="Activation" abbrev="Activation"/>
    </thing>
  <thing id="sogTlSlipPast" name="Slip Past" compset="SoGTalent" description="You can move through a space as narrow as half yours without squeezing, as narrow as one-quarter your space at half speed, as narrow as your shoulders at one-quarter speed, and as narrow as your head at a rate of 5 feet per full-round action. You can move freely through the spaces of creatures one size category closer to yours (usually reduced from three sizes different to two sizes different; you still provoke attacks of opportunity). You can use your Escape Artist modifier in place of your Acrobatics modifier for checks to move through the spaces of creatures closer to you in size and to avoid attacks of opportunity.\n\n{b}Associated Feat{/b}: Serpentine Compression (Pathfinder Roleplaying Game Monster Codex)." summary="Meditation approach" uniqueness="useronce">
    <usesource source="pPF1e_Sph_Guile"/>
    <tag group="SoGSphere" tag="BodyControl" name="Body Control" abbrev="Body Control"/>
    <tag group="SoGTlClass" tag="InitTalent" name="Base Sphere Ability" abbrev="Base Sphere Ability"/>
    <tag group="AbilType" tag="Extra"/>
    <tag group="HasFeat" tag="fSerpCompr"/>
    </thing>
  <thing id="sogTlMaintainStam" name="Maintain Stamina" compset="SoGTalent" description="You can endure any failed ability check, skill check, or saving throw to avoid the exhausted, fatigued, nauseated, paralyzed, or sickened conditions." summary="Meditation approach" uniqueness="useronce">
    <usesource source="pPF1e_Sph_Guile"/>
    <tag group="SoGSphere" tag="BodyControl" name="Body Control" abbrev="Body Control"/>
    <tag group="SoGTlClass" tag="InitTalent" name="Base Sphere Ability" abbrev="Base Sphere Ability"/>
    <tag group="SoGTalDesc" tag="Control"/>
    </thing>
  <thing id="sogTlBreathContr" name="Breath Control" compset="SoGTalent" description="You can hold your breath for an additional 1 minute per rank in the associated skill you possess while meditating. In addition, while meditating and holding your breath, you do not have to stop holding your breath to speak. Instead, you lose 1 minute of remaining breath per round that you speak.\n\nYou can endure a failed saving throw from any suffocation or inhaled effect or a failed Constitution check attempted to hold your breath. If you are still holding your breath when your meditation ends, you lose any remaining additional time added by the meditation but still have all of your normal amount of breath remaining." summary="You have enhanced control over your breathing." uniqueness="useronce">
    <usesource source="pPF1e_Sph_Guile"/>
    <tag group="SoGSphere" tag="BodyControl"/>
    <tag group="SoGTlClass" tag="Talent"/>
    <tag group="SoGTalDesc" tag="Utility"/>
    <tag group="Hide" tag="Activation"/>
    </thing>
  <thing id="sogDbPhysFocus" name="Physiological Focus" compset="SoGDrawbk" description="You use Heal instead of Escape Artist for the associated skill, and unlock skill leverage with Heal in addition to the usual skills." summary="You can use Heal as a master." panellink="tbSoGBodyControl" uniqueness="useronce">
    <usesource source="pPF1e_Sph_Guile"/>
    <tag group="SphOfGuil" tag="NoBnTalent"/>
    <tag group="SoGSphere" tag="BodyControl"/>
    <tag group="SoGTlClass" tag="AltStart"/>
    <tag group="SoGTlClass" tag="ReqRetrain"/>
    <tag group="Helper" tag="AlwaysAvl" name="AlwaysAvl" abbrev="AlwaysAvl"/>
    <eval phase="First" priority="1000"><![CDATA[~ This change is kept after a buy off.
      perform hero.findchild[SoGTalent,"SoGSphere.BodyControl & SoGTlClass.GainSphere"].setfocus
      doneif (state.isfocus = 0)

      ~ Delete the default
      perform focus.delete[SoGAssocSk.skEscape]

      perform focus.assign[SoGAssocSk.skHeal]]]>
      <after name="Assign initial Associated Skill"/>
      </eval>
    <eval phase="PostLevel" priority="2000" name="Change Skill Leverage"><![CDATA[~ This change is kept after a buy off.
      perform hero.findchild[SoGTalent,"SoGSphere.BodyControl & SoGTlClass.GainSphere"].setfocus
      doneif (state.isfocus = 0)

      ~ Delete the default
      perform focus.delete[SkLeverage.skEscape]

      perform focus.assign[SkLeverage.skHeal]]]>
      <after name="Assign initial Skill Leverage"/>
      </eval>
    </thing>
  <thing id="sogSpCommunicatio" name="Communication Sphere" compset="SoGSphere" uniqueness="unique">
    <usesource source="pPF1e_Sph_Guile"/>
    <tag group="SoGSphere" tag="Communication" name="Communication"/>
    </thing>
  <thing id="resSGSECommunicat" name="Bonus Communication Talents" compset="Resource" panellink="tbSoGCommunication">
    <fieldval field="resObject" value="Bonus Communication Talents"/>
    <usesource source="pPF1e_Sph_Guile"/>
    <tag group="SoGSphere" tag="Communication"/>
    <tag group="SoGBonTal" tag="Communication"/>
    <eval phase="Final">~ Add bonus talents
        field[resMax].value += hero.tagcount[SoGBonTal.Communication]</eval>
    <eval phase="Final" priority="999999999999" index="2"><![CDATA[
        ~ If we have any bonus talents, show the sphere tab
        if (field[resMax].value > 0) then
          perform pulltags[SoGBonTal.?,SoGSphTab]
          perform hero.pushtags[SoGSphTab.?]
        endif]]></eval>
    </thing>
  <thing id="sogTlHdCom" name="{align center}Communication" compset="SoGTalent" isshowonly="yes">
    <tag group="SoGSphere" tag="Communication"/>
    <tag group="SoGTlClass" tag="GainSphere"/>
    </thing>
  <thing id="sogTlSpCommunicat" name="Communication Sphere" compset="SoGTalent" description="Operatives of the Communication sphere are skilled at clear speech, clever wordplay, persuasive rhetoric, and translation across all sorts of differences. They can easily understand other creatures despite language barriers. Others listen to the operative and weigh their words seriously.\n\n{b}Associated Skill{/b}: Diplomacy or Linguistics. Choose one to be the associated skill when you gain the sphere.\n\nYou gain the following benefits when you gain the Communication sphere.\n\nYou gain 5 ranks in that skill, plus 5 ranks per additional talent spent in the Communication sphere (maximum ranks equal to your Hit Dice). If you already have ranks in the associated skill not from a skill sphere, you may immediately retrain them.\n\n{b}Skill Leverage{/b}: You unlock skill leverage with the Diplomacy and Linguistics skills.\n\n{b}Bonus Talent{/b}: You gain a bonus talent with the (rapport) tag, described below. It cannot be an exceptional talent. If you choose a [utility] talent as this bonus talent, you can take the base sphere as a [utility] talent.\n\nYou also gain the Build Rapport ability." summary="Gain access to the Communication Sphere." panellink="tbSoGCommunication" uniqueness="useronce">
    <comment>TODO When SoGFreeTal.descriptor is done, chanage to use.</comment>
    <fieldval field="usrCandid1" value="component.BaseSkill &amp; (thingid.skDiplo | thingid.skLinguist)"/>
    <usesource source="pPF1e_Sph_Guile"/>
    <tag group="SoGSphere" tag="Communication"/>
    <tag group="SkLeverage" tag="skDiplo"/>
    <tag group="SkLeverage" tag="skLinguist"/>
    <tag group="SoGTlClass" tag="GainSphere" name="Sphere access" abbrev="Sphere access"/>
    <tag group="SoGTlClass" tag="UtilStart"/>
    <tag group="ChooseSrc1" tag="Hero"/>
    <tag group="SoGFreeTal" tag="Rapport"/>
    <bootstrap thing="abSoGSkLeverage"></bootstrap>
    <bootstrap thing="sogSpCommunicatio"></bootstrap>
    <bootstrap thing="sogTlBetray">
      <containerreq phase="First" priority="500">!SoGBanTal.sogTlBetray</containerreq>
      </bootstrap>
    <bootstrap thing="sogTlBuildRapport">
      <containerreq phase="First" priority="500">!SoGBanTal.sogTlBuildRapport</containerreq>
      </bootstrap>
    <eval phase="First" priority="103" name="Assign initial Associated Skill"><![CDATA[~ Get out if disabled
     doneif (tagis[Helper.SpcDisable] <> 0)
     ~ or if no choice made.
     doneif (field[usrChosen1].ischosen = 0)

     perform assignstr["SoGAssocSk." & field[usrChosen1].chosen.idstring]]]></eval>
    </thing>
  <thing id="sogTlBuildRapport" name="Build Rapport" compset="SoGTalent" description="When you interact with a creature that is not hostile to you within 30 feet, you can choose to form a rapport with that creature as a standard action, or as a move action if you know one of the creature's motivations. You cannot form a rapport with a mindless creature. The rapport remains until 24 hours pass, you or the creature chooses to end the rapport as a swift action, or you form another rapport. You can form a rapport with multiple creatures at once if you know a motivation for each of them, up to a number of targets equal to your operative ability modifier.\n\nYou can always use gestures to communicate simple concepts to creatures you share a rapport with without using words just as easily as with words, regardless of whether you share a language. Communicating complex information this way requires a successful DC 25 Linguistics check; failing by 5 or more conveys inaccurate information rather than what the creature intended to share.\n\nEach creature that shares a rapport with you (including you) automatically succeeds at Bluff (or Linguistics) checks to send secret messages to each other, although they still attempt a skill check to determine if observers understand. They can use their Linguistics modifier in place of their Bluff modifier to pass the secret message at no penalty.\n\nYou can choose one or two (rapport) talents you have when you form a rapport and apply the effect to creatures sharing your rapport (including you). You can only choose two (rapport) talents to apply at once if one or both of them have the [utility] tag.\n\nIf you target a creature who already shares a rapport with someone else, you can join the existing rapport without counting against its maximum number of targets, and you can add one of your own (rapport) talents for all members to benefit from. You cannot add a talent the rapport already has. This replaces build rapport's usual effect.\n\n(Rapport) talents grant additional benefits to creatures you form a rapport with. You may only apply the effects of a single (rapport) talent when forming a rapport, or two talents if one of them has the [utility] tag. These talents provide a benefit to all creatures that share your rapport, which always includes you (unless noted otherwise)." uniqueness="useronce">
    <fieldval field="abText" value="targets"/>
    <usesource source="pPF1e_Sph_Guile"/>
    <tag group="SoGSphere" tag="Communication"/>
    <tag group="SoGTlClass" tag="InitTalent"/>
    <tag group="SoGTlClass" tag="Talent"/>
    <tag group="SoGAbV1OM" tag="Value"/>
    <tag group="LvNamePar" tag="AppText"/>
    <tag group="LvNamePar" tag="AppValue"/>
    </thing>
  <thing id="sogTlBetray" name="Betray" compset="SoGTalent" description="You can outwit allied NPCs, but only as part of taking a hostile action against them. If a creature believes you are an ally, you can outwit the creature by worsening their attitude (generally to hostile, though the GM might rule otherwise)." uniqueness="useronce">
    <usesource source="pPF1e_Sph_Guile"/>
    <tag group="SoGSphere" tag="Communication"/>
    <tag group="SoGTlClass" tag="InitTalent"/>
    <tag group="SoGTlClass" tag="Talent"/>
    </thing>
  <thing id="sogTlBolstRapport" name="Bolstering Rapport" compset="SoGTalent" description="Creatures that share your {i}rapport{/i} understand each other well enough to share their willpower. Whenever a creature sharing your {i}rapport{/i} (including you) attempts a Will saving throw, another creature sharing the {i}rapport{/i} may spend an immediate action to attempt a skill check with the associated skill against the DC of the saving throw; if successful, the saving throw is attempted with a +2 morale bonus. This can be used after the result of the roll to change the outcome, and both allies must be able to see or hear each other to give an encouraging word, meaningful glance, or other sign of support.\n\nSimilarly, a creature sharing your {i}rapport{/i} can spend an immediate action when an enemy attempts an Intimidate check against another creature sharing your {i}rapport{/i} with to grant a +4 morale bonus to the DC of the check.\n\nThese benefits increase by 1 for every 6 ranks you possess in the sphere’s associated skill." uniqueness="useronce">
    <fieldval field="abValue" value="2"/>
    <fieldval field="abValue2" value="4"/>
    <usesource source="pPF1e_Sph_Guile"/>
    <tag group="SoGSphere" tag="Communication"/>
    <tag group="SoGTlClass" tag="Talent"/>
    <tag group="SoGTalDesc" tag="Rapport"/>
    <tag group="SoGAbV1Sc" tag="1_6A"/>
    <tag group="SoGAbV2Sc" tag="1_6A"/>
    <tag group="LvNamePar" tag="AppText"/>
    <eval phase="Render" priority="400"><![CDATA[~ If we're disabled, do nothing
  doneif (tagis[Helper.SpcDisable] <> 0)

  field[abText].text = signed(field[abValue].value) & " vs Will, " & signed(field[abValue2].value) & " your Intim. DC"]]>
  <after name="Apply free ranks for associated skills SoG"/>
  <after name="Auto-increment abValue fields"/>
  <after name="Set Sphere Effective Level"/>
  </eval>
    </thing>
  <thing id="sogTlVeiledDialog" name="Veiled Dialogue" compset="SoGTalent" description="Any creature who shares your rapport can use your associated skill modifier to pass secret messages and takes no longer than speaking plainly to do so. In addition, all who share your rapport can communicate up to 25 words per round with just a look or a gesture, so that observers cannot tell they are communicating at all without succeeding at a Perception or Sense Motive check against DC 20 + your ranks in the sphere's associated skill. Among other things, this allows them to briefly discuss tactics during an encounter without alerting foes as long as they can see or touch each other." uniqueness="useronce">
    <usesource source="pPF1e_Sph_Guile"/>
    <tag group="SoGSphere" tag="Communication"/>
    <tag group="SoGTlClass" tag="Talent"/>
    <tag group="SoGTalDesc" tag="Rapport"/>
    <tag group="SoGTalDesc" tag="Utility"/>
    </thing>
  <thing id="sogTlInstLoophole" name="Instant Loophole" compset="SoGTalent" description="You can use the Linguistics skill to find a loophole (new skill use) in an effect targeting you or a creature that shares your rapport as an immediate action. If you successfully interrupt the effect beginning, you and everyone who can understand you can roll twice and use the higher result for their saving throw. (This counts as using find a loophole on that effect, so you cannot find a loophole in that effect again for 24 hours.)" uniqueness="useronce">
    <usesource source="pPF1e_Sph_Guile"/>
    <tag group="SoGSphere" tag="Communication"/>
    <tag group="SoGTlClass" tag="Talent"/>
    <tag group="SoGTalDesc" tag="Rapport"/>
    <bootstrap thing="stFindLoop"></bootstrap>
    </thing>
  <thing id="sogTlMentLoophole" name="Mental Loophole" compset="SoGTalent" description="You can use the Linguistics skill to find a loophole (new skill use) in any mind-affecting effect other than a curse. If the effect was language-dependent, the new save is attempted with a +4 insight bonus. You end the effect if the new saving throw succeeds. This is a harmless language-dependent, mind-affecting effect." uniqueness="useronce">
    <usesource source="pPF1e_Sph_Guile"/>
    <tag group="SoGSphere" tag="Communication"/>
    <tag group="SoGTlClass" tag="Talent"/>
    <bootstrap thing="stFindLoop"></bootstrap>
    </thing>
  <thing id="sogTlSkilledComm" name="Skilled Communicator" compset="SoGTalent" description="When you gain this talent, you gain Bluff, Diplomacy, or Linguistics as an additional associated skill for this sphere. You also unlock skill leverage with the skill if you have not already; if you have, you unlock skill leverage with another skill of your choice that you are trained in. (You cannot choose a skill already associated with the sphere.)\n\n{b}Note{/b}: A second chooser is presented to find a replacement skill to unlock Skill Leverage, if needed." summary="Gain Bluff, Diplomacy, or Linguistics as an additional associated skill." uniqueness="useronce">
    <fieldval field="usrCandid1" value="component.BaseSkill &amp; (Reference.skBluff | Reference.skDiplo | Reference.skLinguist)"/>
    <usesource source="pPF1e_Sph_Guile"/>
    <tag group="SoGSphere" tag="Communication"/>
    <tag group="SoGTlClass" tag="Talent"/>
    <tag group="SoGTalDesc" tag="Utility"/>
    <tag group="ChooseSrc1" tag="Hero"/>
    <tag group="Hide" tag="Activation"/>
    <eval phase="PostLevel" priority="103" name="Assign an additional Associated Skill"><![CDATA[      doneif (tagis[Helper.SpcDisable] <> 0)
      doneif (field[usrChosen1].ischosen = 0)

      perform hero.findchild[SoGTalent,"SoGSphere.Communication & SoGTlClass.GainSphere"].setfocus
      doneif (state.isfocus = 0)

      perform focus.assignstr["SoGAssocSk." & field[usrChosen1].chosen.idstring]]]></eval>
    <eval phase="PostLevel" priority="2000" name="Change Skill Leverage"><![CDATA[      doneif (tagis[Helper.SpcDisable] <> 0)
      doneif (field[usrChosen1].ischosen = 0)

      perform hero.findchild[SoGTalent,"SoGSphere.Communication & SoGTlClass.GainSphere"].setfocus
      doneif (state.isfocus = 0)

      ~ This is kind of tricky. This and the class ability Ready for Violence have
      ~ qualifiers to the general rule that duplicate Skill Leverage allows you to
      ~ pick new skills.

      ~ You also unlock skill leverage with the skill if you have not already;
      ~ If you have, you unlock skill leverage with another skill of your choice
      ~ that you are trained in.

      ~ Check if we do or do not have Skill Leverage.
      if (focus.tagcountstr["SkLeverage." & field[usrChosen1].chosen.idstring] = 0) then
           perform focus.assignstr["SkLeverage." & field[usrChosen1].chosen.idstring]
      else
           var ex as string
           ex &= replace(focus.tagids[SkLeverage.?,":"],"SkLeverage.","",0)
           ex = "!thingid." & replace(ex, ":", " & !thingid.", 0)
           field[usrCandid2].text = "component.BaseSkill & Helper.HasRanks & (" & ex & ")"
           perform assign[ChooseSrc2.Hero]

           doneif (field[usrChosen2].ischosen = 0)

           ~ The validation script will check if we have duplicates.
           perform focus.assignstr["SkLeverage." & field[usrChosen2].chosen.idstring]
      endif]]>
      <after name="Assign initial Skill Leverage"/>
      </eval>
    <evalrule phase="Final" priority="2147483647" message="You cannot choose a skill already associated with the sphere."><![CDATA[     ~ enforce the rule:
     ~ "You cannot choose a skill already associated with the sphere."
     ~ To do so, count the associated skills on the sphere, look for matches.
     foreach pick in hero from SoGTalent where "SoGSphere.Communication & SoGAssocSk.? & !" & tagids[thingid.?]
          if (eachpick.intersect[SoGAssocSk,SoGAssocSk] = 1) then
               @valid = 0
               done
          endif
     nexteach
     @valid = 1]]></evalrule>
    <evalrule phase="Final" priority="2147483647" index="2" message="You must choose a skill without Skill Leverage to make into Skill Leverage."><![CDATA[     ~ enforce the rule that the skill must not already be a sill with Skill Leverage and you must have ranks.

     ~ Valid if we don't have a second chooser.
     validif (tagis[ChooseSrc2.Hero] = 0)

     @valid = 0
     doneif (field[usrChosen2].ischosen = 0)

     perform hero.findchild[SoGTalent,"SoGSphere.Communication & SoGTlClass.GainSphere"].setfocus
     doneif (state.isfocus = 0)

     doneif (focus.tagcountstr["SkLeverage." & field[usrChosen2].chosen.idstring] > 1)
     @valid = 1]]></evalrule>
    </thing>
  <thing id="sogTlBeastWhisp" name="Beast Whisperer" compset="SoGTalent" description="You can communicate and understand simple concepts with any animal, magical beast, or vermin that lacks a language. Its comprehension is limited by its Intelligence, but even a mindless creature can understand simple directions to food or warnings about danger. You take a –4 penalty on skill checks that would otherwise be impossible to attempt with the creature. You can use the associated skill in place of Handle Animal to push an animal. In addition, you unlock skill leverage with Handle Animal." summary="Communicate with animals, magical beasts, and vermin." uniqueness="useronce">
    <usesource source="pPF1e_Sph_Guile"/>
    <tag group="SoGSphere" tag="Communication"/>
    <tag group="SoGTlClass" tag="Talent"/>
    <tag group="SoGTalDesc" tag="Utility"/>
    <tag group="Hide" tag="Activation"/>
    <eval phase="PostLevel" priority="1500" name="Assign initial Skill Leverage">perform hero.childfound[sogTlSpCommunicat].assign[SkLeverage.skHandleAn]</eval>
    <eval phase="Render" priority="500"><![CDATA[      doneif (tagis[Helper.FirstCopy] = 0)
      doneif (tagis[Helper.SpcDisable] <> 0)
      var b as number

      perform hero.findchild[SoGTalent,"SoGSphere.Communication & SoGTlClass.GainSphere"].setfocus
      doneif (state.isfocus = 0)

      var searchexpr as string
      searchexpr = replace(focus.tagids[SoGAssocSk.?, " | "],"SoGAssocSk","thingid",0)
      foreach pick in hero from BaseSkill where searchexpr
           b = maximum(eachpick.field[skTotal].value,b)
      nexteach

      ~ Best Associated Skill bonus skTotal - Handle Animal skTotal - 4
      b = b - hero.childfound[skHandleAn].field[skTotal].value - 4

      if (b > 0) then
           #situational[hero.child[skHandleAn],"+" & b & " to communicate or push animal, magical beast, or vermin", field[name].text]
      endif]]>
      <after name="Skill Final"/>
      </eval>
    </thing>
  <thing id="sogTlCombatCourte" name="Combat Courtesy" compset="SoGTalent" description="Whenever a creature who shares your {i}rapport{/i} rolls initiative, before enemies’ initiative is revealed, they can trade the results of their own die roll (not including modifiers) with another creature under your {i}rapport{/i} (if both creatures are willing). Additionally, if two creatures who share your {i}rapport{/i} are adjacent to one another, when one of them takes an action on the first round of combat, the other creature loses the flat-footed condition from having not acted.\n\n{b}Associated Feat{/b}: Trade Initiative." uniqueness="useronce">
    <usesource source="pPF1e_DRS_HarDis"/>
    <usesource source="pPF1e_Sph_Guile" parent="pPF1e_Sph" name="Spheres of Guile"/>
    <tag group="SoGSphere" tag="Communication" name="Communication" abbrev="Communication"/>
    <tag group="SoGTlClass" tag="Talent" name="Basic Talent" abbrev="Basic Talent"/>
    <tag group="SoGTalDesc" tag="Rapport" name="Communication (rapport)" abbrev="Communication (rapport)"/>
    <tag group="HasFeat" tag="fTradeInit"/>
    </thing>
  <thing id="sogTlBriefHelp" name="Brief Help" compset="SoGTalent" description="You can aid another as a move or swift action. At 5 ranks in this sphere’s associated skill, you can aid another as an immediate action. At 10 ranks in this sphere’s associated skill, you can aid another as a free action once per round; an aid another performed this way may benefit from (assist) talents.\n\n{b}Associated Feat{/b}: Swift Aid ({i}Advanced Player's Guide{/i})." uniqueness="useronce">
    <usesource source="pPF1e_DRS_HarDis"/>
    <usesource source="pPF1e_Sph_Guile" parent="pPF1e_Sph" name="Spheres of Guile"/>
    <tag group="SoGSphere" tag="Communication" name="Communication" abbrev="Communication"/>
    <tag group="SoGTlClass" tag="Talent" name="Basic Talent" abbrev="Basic Talent"/>
    <tag group="SoGTalDesc" tag="Assist"/>
    <tag group="SoGAbV1Sc" tag="1_5A"/>
    <tag group="LvNamePar" tag="AppText"/>
    <eval phase="Render" priority="400"><![CDATA[~ Do nothing if disabled.
  doneif (tagis[Helper.SpcDisable] <> 0)

  if (field[abValue].value >= 2) then
    field[abText].text = "free action"
  elseif (field[abValue].value = 1) then
    field[abText].text = "immediate"
  else
    field[abText].text = "move or swift"
  endif]]></eval>
    </thing>
  <thing id="sogTlClockworkCoo" name="Clockwork Coordination" compset="SoGTalent" description="You can coordinate a collaborative project as flawlessly as if the collaborators shared one mind. When a creature who shares your {i}rapport{/i} successfully aids another creature who shares your {i}rapport{/i} with a skill use, the recipient of the aid can forgo the bonus in order to complete the skill use faster. You cannot use Clockwork Coordination on a skill use that cannot benefit from aid another, and neither the aid another action nor the aided skill use can be combined with other actions (for example, Acrobatics is always combined with other move actions). If the skill use would normally take 2 rounds or longer, the recipient of the aid finishes in half the time. If the skill use would normally take 1 round or less, reduce the time it takes by one step along this list: 1 round, 1 full-round action, 1 standard action, 1 move action, 1 swift action, 1 immediate action (taken at the end of the turn the aid was received)." uniqueness="useronce">
    <fieldval field="abText" value="/day"/>
    <usesource source="pPF1e_DRS_HarDis"/>
    <usesource source="pPF1e_Sph_Guile"/>
    <tag group="SoGSphere" tag="Communication"/>
    <tag group="SoGTlClass" tag="Talent"/>
    <tag group="SoGTalDesc" tag="Assist"/>
    <tag group="SoGTalDesc" tag="Rapport"/>
    </thing>
  <thing id="sogTlRecallSuppor" name="Recall Support" compset="SoGTalent" description="Whenever you use the aid another action to benefit a creature’s ability check or skill check, you can delay its effects so that it can be drawn upon when the creature needs it most. For the next day, the aided creature can spend an immediate action to ponder your words, gaining the benefits of the delayed aid immediately. An individual creature can only benefit from a single delayed aid at one time.\n\nIf the creature shares your {i}rapport{/b}, the aided creature can instead ponder your words as a free action that is usable outside of their turn." uniqueness="useronce">
    <usesource source="pPF1e_DRS_HarDis"/>
    <usesource source="pPF1e_Sph_Guile"/>
    <tag group="SoGSphere" tag="Communication"/>
    <tag group="SoGTlClass" tag="Talent"/>
    <tag group="SoGTalDesc" tag="Assist"/>
    <tag group="SoGTalDesc" tag="Utility"/>
    </thing>
  <thing id="sogTlMediatorsMie" name="Mediator’s Mien" compset="SoGTalent" description="Adopting this approach is a swift action. Whenever a creature first becomes aware of you while you maintain the approach and would otherwise have a starting attitude of unfriendly or hostile toward you, you can attempt a Diplomacy check to improve their attitude without using an action. The improvement ends when you abandon this approach.\n\nEven if your allies take hostile actions, opponents who are not yet hostile to you do not become worse than unfriendly toward you as long as you do not take hostile actions yourself and do not take actions to help your allies fight more effectively (or you prevent them from noticing you took such an action)." uniqueness="useronce">
    <fieldval field="abText" value="/day"/>
    <usesource source="pPF1e_Sph_Guile"/>
    <tag group="SoGSphere" tag="Communication"/>
    <tag group="SoGTlClass" tag="Talent"/>
    <tag group="SoGTalDesc" tag="Approach"/>
    </thing>
  <thing id="sogTlHeartToHeart" name="Heart To Heart" compset="SoGTalent" description="You can bare your soul with a major motivation or comparable secret (Diplomacy option on page 43) to use build rapport as a move action. (This might be a goal you care deeply about, a vulnerability the target could exploit, or a desire the target could hold over you.) You can include one hostile creature in your {i}rapport{/i} as long as they didn’t know the revealed secret. If you reveal a motivation that closely aligns with the major motivations of any creature you invite to your {i}rapport{/i} this way, you learn that they do unless they succeed at a Bluff check opposed by your associated skill check. If you lie, the minimum Bluff penalty is –5 and the {i}rapport{/i} also ends if the lie comes to light.\n\nIf you share your {i}rapport{/i} with an unfriendly or hostile creature, they must succeed at a Will saving throw or become uncertain for 1 minute. They can only leave the {i}rapport{/i} by successfully ending the uncertain condition, which they can attempt a Will save to do as a move action once per turn. While you share your {i}rapport{/i} with an unfriendly or hostile creature, you and anyone who shares your {i}rapport{/i} can make requests of them that are not costly or risky as if they were indifferent.\n\nThis does not prevent them taking actions against you or your allies. The first time you successfully make a request of the target while the {i}rapport{/i} lasts, the creature accidentally or willingly shares a useful piece of information in addition to granting your request. The fact is chosen by the GM to be useful in influencing or harming the target; you can choose whether you prefer to influence or harm the target by the sort of things you talk about. A minor motivation or tactical vulnerability is a suitable piece of information.\n\nIn addition, you regain 1 use of skill leverage whenever you first invoke a creature’s goal or other motivation as part of a successful Diplomacy or Linguistics check or Communication talent, even in the middle of an encounter. The creature must pose a significant challenge to you (in combat or otherwise). You cannot regain skill leverage again this way until you regain it from another source." uniqueness="useronce">
    <usesource source="pPF1e_Sph_Guile"/>
    <tag group="SoGSphere" tag="Communication"/>
    <tag group="SoGTlClass" tag="Talent"/>
    <tag group="SoGTalDesc" tag="Utility"/>
    </thing>
  <thing id="sogTlWordmonger" name="Wordmonger" compset="SoGTalent" description="You can gather information in 1d4 x 10 minutes or as a plan. Revealing this plan is a swift action. When you reveal this plan, you attempt a Diplomacy check to gather information. You can take 10 on this check.\n\nIn addition, when you request someone give you information, you can spend 1 use of skill leverage to goad them into accidentally telling you more than they meant to. That might mean giving you a partial clue even while refusing or spilling a vital tactical detail when they meant to just give you a vague outline of the situation. You cannot coax extra information out of the same person this way again for 24 hours." uniqueness="useronce">
    <usesource source="pPF1e_Sph_Guile"/>
    <tag group="SoGSphere" tag="Communication"/>
    <tag group="SoGTlClass" tag="Talent"/>
    <tag group="SoGTalDesc" tag="Plan"/>
    <tag group="SoGTalDesc" tag="Utility"/>
    </thing>
  <thing id="sogTlDefensiveBlo" name="Defensive Blockade" compset="SoGTalent" description="Whenever you improve an ally’s AC using aid another, the bonus granted increases to +3. This increases by 1 per 10 ranks in the associated skill you possess.\n\nIf you improve an ally’s AC using aid another, the aided ally also gains one of the following benefits against that opponent for the aid another effect’s duration:\n\n    * The ally does not provoke attacks of opportunity from the opponent for standing up from prone, moving out of their threatened area, picking up an item, or drinking a potion.\n    * The ally is not considered flanked or flat-footed against the opponent.\n\n{b}Associated Feat{/b}: Got Your Back ({i}Melee Tactics Toolbox{/i})" uniqueness="useronce">
    <fieldval field="abText" value="ally’s AC"/>
    <fieldval field="abValue" value="3"/>
    <usesource source="pPF1e_DRS_HarDis"/>
    <usesource source="pPF1e_Sph_Guile" parent="pPF1e_Sph" name="Spheres of Guile"/>
    <tag group="SoGSphere" tag="Communication" name="Communication" abbrev="Communication"/>
    <tag group="SoGTlClass" tag="Talent" name="Basic Talent" abbrev="Basic Talent"/>
    <tag group="SoGTalDesc" tag="Assist"/>
    <tag group="SoGAbV1Sc" tag="1_0A"/>
    <tag group="LvNamePar" tag="AppText"/>
    <tag group="LvNamePar" tag="AppValue"/>
    <tag group="LvNamePar" tag="SignAppVal"/>
    <tag group="HasFeat" tag="fGotYourBk"/>
    </thing>
  <thing id="sogTlTacticalPrep" name="Tactical Preparation" compset="SoGTalent" description="When you move during your turn, you may use the aid another action at any point during your movement, spending actions to do so as normal.\n\nWhenever you use aid another to improve a creature’s attack roll, the aided creature also gains a circumstance bonus to the damage roll equal to half the granted aid another bonus (minimum 1).\n\nWhenever you use aid another to improve a creature’s AC but the applicable attack still deals damage to the creature, they reduce the damage dealt by an amount equal to half the aid another bonus–this reduction can only apply once per round.\n\nIf the aided creature shares your {i}rapport{/i}, this damage bonus/reduction increases by 2." uniqueness="useronce">
    <fieldval field="abText" value="ally’s AC"/>
    <usesource source="pPF1e_Sph_Guile" parent="pPF1e_Sph" name="Spheres of Guile"/>
    <tag group="SoGSphere" tag="Communication" name="Communication" abbrev="Communication"/>
    <tag group="SoGTlClass" tag="Talent" name="Basic Talent" abbrev="Basic Talent"/>
    <tag group="SoGTalDesc" tag="Assist"/>
    </thing>
  <thing id="sogTlFriendOfaFri" name="Friend of a Friend" compset="SoGTalent" description="Creatures that share your {i}rapport{/i} know just the right way to introduce each other. When a creature who shares your {i}rapport{/i} improves a creature’s attitude toward them, the new attitude towards them also applies to all creatures that share your {i}rapport{/i} (unless the target’s attitude would otherwise be better). If any creature that shares the {i}rapport{/i} takes an action that worsens someone’s attitude, they no longer benefit from this talent against the offended creature.\n\nIn addition, whenever one of you charms a creature or uses a language-dependent or mind-affecting ability that prevents a creature from attacking or targeting one of you, they can also extend that protection to all creatures that share your {i}rapport{/i} by spending a move action identifying those allies in a way the target can understand. If the effect can be ended by saving throws or hostile actions, breaking it for any character sharing the effect breaks it for all sharing characters." uniqueness="useronce">
    <fieldval field="abText" value="ally’s AC"/>
    <usesource source="pPF1e_Sph_Guile" parent="pPF1e_Sph" name="Spheres of Guile"/>
    <tag group="SoGSphere" tag="Communication" name="Communication" abbrev="Communication"/>
    <tag group="SoGTlClass" tag="Talent" name="Basic Talent" abbrev="Basic Talent"/>
    <tag group="SoGTalDesc" tag="Rapport"/>
    </thing>
  <thing id="sogDbAggressive" name="Aggressive" compset="SoGDrawbk" description="You use Intimidate for the associated skill. You cannot communicate simple concepts or complex information with creatures you share a rapport with. Instead, you can use Intimidate to demand cooperation from any creature who shares your rapport or whose motivation you know as a full-round action without taking a penalty." summary="You can use Intimidate to demand cooperation from any creature who shares your rapport." panellink="tbSoGCommunication" uniqueness="useronce">
    <usesource source="pPF1e_Sph_Guile"/>
    <tag group="SphOfGuil" tag="NoBnTalent"/>
    <tag group="SoGSphere" tag="Communication"/>
    <tag group="SoGTlClass" tag="AltStart"/>
    <tag group="SoGTlClass" tag="ReqRetrain"/>
    <tag group="Helper" tag="AlwaysAvl" name="AlwaysAvl" abbrev="AlwaysAvl"/>
    <eval phase="PostLevel" priority="1000"><![CDATA[      perform hero.findchild[SoGTalent,"SoGSphere.Communication & SoGTlClass.GainSphere"].setfocus
      doneif (state.isfocus = 0)
      doneif (focus.field[usrChosen1].ischosen = 0)

      ~ Delete the chosen
      perform focus.deletestr["SoGAssocSk." & focus.field[usrChosen1].chosen.idstring]

      ~ Remove the selection
      perform focus.delete[ChooseSrc1.?]
      focus.field[usrCandid1].text = ""

      perform focus.assign[SoGAssocSk.skIntim]]]>
      <after name="Assign initial Associated Skill"/>
      </eval>
    <eval phase="Render" priority="50000" index="2"><![CDATA[      doneif (tagis[SphOfGuil.DBBuyoff] = 1)
     perform hero.childfound[sogTlBuildRapport].setfocus
     if (state.isfocus = 1) then
          focus.field[CustDesc].text = replace(focus.field[CustDesc].text, "You can always use gestures to communicate simple concepts to creatures you share a rapport with without using words just as easily as with words, regardless of whether you share a language. Communicating complex information this way requires a successful DC 25 Linguistics check; failing by 5 or more conveys inaccurate information rather than what the creature intended to share.","{b}You cannot communicate simple concepts or complex information with creatures you share a rapport with.{/b} Instead, you can use Intimidate to demand cooperation from any creature who shares your rapport or whose motivation you know as a full-round action without taking a penalty.",1)
     endif]]></eval>
    </thing>
  <thing id="sogSpFaction" name="Faction Sphere" compset="SoGSphere" uniqueness="unique">
    <usesource source="pPF1e_Sph_Guile"/>
    <tag group="SoGSphere" tag="Faction" name="Faction"/>
    </thing>
  <thing id="resSGSEFaction" name="Bonus Faction Talents" compset="Resource" panellink="tbSoGFaction">
    <fieldval field="resObject" value="Bonus Faction Talents"/>
    <usesource source="pPF1e_Sph_Guile"/>
    <tag group="SoGSphere" tag="Faction"/>
    <tag group="SoGBonTal" tag="Faction"/>
    <eval phase="Final">~ Add bonus talents
        field[resMax].value += hero.tagcount[SoGBonTal.Faction]</eval>
    <eval phase="Final" priority="999999999999" index="2"><![CDATA[
        ~ If we have any bonus talents, show the sphere tab
        if (field[resMax].value > 0) then
          perform pulltags[SoGBonTal.?,SoGSphTab]
          perform hero.pushtags[SoGSphTab.?]
        endif]]></eval>
    </thing>
  <thing id="resSGPkFaction" name="Faction Packages" compset="Resource" panellink="tbSoGFaction">
    <fieldval field="resObject" value="Faction Packages"/>
    <usesource source="pPF1e_Sph_Guile"/>
    <tag group="SoGSphere" tag="Faction"/>
    <tag group="SoGPackage" tag="Faction"/>
    </thing>
  <thing id="sogTlHdFac" name="{align center}Faction" compset="SoGTalent" isshowonly="yes">
    <tag group="SoGSphere" tag="Faction"/>
    <tag group="SoGTlClass" tag="GainSphere"/>
    </thing>
  <thing id="sogTlSpFaction" name="Faction Sphere" compset="SoGTalent" description="Operatives of the Faction sphere are adept at running and leading organizations, whether ranking leaders who move retainers like pawns or trusted agents equipped appropriately for each job. They quickly and effectively allocate faction resources to accomplish their goals.\n\n{b}Associated Skill{/b}: Appraise, a Knowledge skill, or a Profession skill, determined by the package you choose below.\n\nYou gain 5 ranks in the chosen skill, plus 5 ranks per additional talent spent in the Faction sphere (maximum ranks equal to your Hit Dice). If you already have ranks in the associated skill not from a skill sphere, you may immediately retrain them.\n\n{b}Faction Affiliation{/b}: You are affiliated with an organization or group and possess some control over its assets, whether due to earned trust or high rank. Your faction might be a government agency, a guild, a political entity, or any other sizable organization. Your talents might represent figuring out a way for the faction to provide that service for the first time or earning the trust to be granted discretion over a service that already existed.\n\nOver the course of a campaign, you may leave, join, or found a faction (or multiple). You may use your sphere abilities with whatever faction or factions you are currently affiliated with, provided you meet the basic expectations of your rank in each one.\n\nYour faction usually offers other benefits beyond what you have Faction sphere talents for, but the faction rations those benefits in proportion to its resources, your service, and the needs of all members including you. Your game might track these further benefits using subsystems such as the fame and prestige rules in Pathfinder Roleplaying Game: Ultimate Campaign or the organizational influence rules in Pathfinder Roleplaying Game: Ultimate Intrigue.\n\n{b}Faction Type{/b}: Whatever your faction, it generally falls into one of the following categories. If a faction falls into multiple types, choose one to represent the elements of the faction that you have the most direct access to or work with your GM to mix and match elements to make a new faction type. The faction type determines what kind of resources it has available, although you can only requisition resources specifically granted by your Faction sphere package or talents.\n\n{indent 15}• {b}Arcane Faction{/b}: {b}Equipment{/b}: Spell foci, material components, texts, wizard spellbooks, alchemical tools or weapons; {b}Mundane Service{/b}: sage, arcane trainer; {b}Spellcasting Service{/b}: Sorcerer/wizard spell list (choose three schools of magic that are outside the faction’s focus of study; they aren’t generally available)\n\n• {b}Martial Faction{/b}: {b}Equipment{/b}: Weapons and armor, mounts, training texts, magus spellbooks (Pathfinder Roleplaying Game: Ultimate Magic), alchemical remedies or weapons, formula books; {b}Mundane Service{/b}: coach cab, combat trainer, messenger, ship’s passage; {b}Spellcasting Service{/b}: Adept, magus, or shaman spell list (Pathfinder Roleplaying Game: Advanced Class Guide)\n\n• {b}Religious Faction{/b}: {b}Equipment{/b}: Holy or unholy symbols, weapons and armor of traditional styles, texts and tools related to the faith and its attributes, the deity’s favored animal, alchemical remedies or weapons; {b}Mundane Service{/b}: sage, religious trainer, healing skills; {b}Spellcasting Service{/b}: Cleric spell list\n\n• {b}Skilled Faction{/b}: {b}Equipment{/b}: Tools used for the faction’s favored skills such as disguise kits for spies or artisan’s tools for a crafter’s guild, alchemist formula books (Pathfinder Roleplaying Game: Advanced Class Guide), anything manufactured by the guild, animals used by the guild, any alchemical item; {b}Mundane Service{/b}: artist, coach cab, entertainer, messenger, ship’s passage, skilled trainer, medical services; {b}Spellcasting Service{/b}: Bard spell list\n\n• {b}Wilderness Faction{/b}: {b}Equipment{/b}: Adventuring and travel gear, work animals, alchemical remedies and tools; {b}Mundane Service{/b}: animal trainer, coach cab, messenger, ship’s passage, wilderness trainer; {b}Spellcasting Service{/b}: Druid spell list" summary="Gain access to the Faction Sphere." panellink="tbSoGFaction" uniqueness="useronce">
    <fieldval field="usrCandid1" value="component.BaseSkill &amp; (thingid.skAppraise | Helper.SkCatArt | Helper.SkCatCraft | thingid.skHandleAn | thingid.skKnowEng | thingid.skKnowGeog | thingid.skKnowHist | thingid.skKnowNobl | thingid.skLinguist | Helper.SkCatLore | Helper.SkCatPerf | Helper.SkCatProf | thingid.skSleight)"/>
    <usesource source="pPF1e_Sph_Guile"/>
    <tag group="SoGSphere" tag="Faction"/>
    <tag group="SoGTlClass" tag="GainSphere"/>
    <tag group="SoGTlClass" tag="UtilStart"/>
    <tag group="ChooseSrc1" tag="Hero"/>
    <tag group="User" tag="NoAutoName"/>
    <bootstrap thing="sogSpFaction"></bootstrap>
    <bootstrap thing="sogTlRequisition">
      <containerreq phase="First" priority="500">!SoGBanTal.sogTlRequisition</containerreq>
      </bootstrap>
    <eval phase="PostLevel" priority="1500" name="Assign initial Skill Leverage"><![CDATA[~ Get out if disabled
     doneif (tagis[Helper.SpcDisable] <> 0)
     ~ or a duplicate.
     doneif (tagis[Helper.FirstCopy] = 0)
     ~ or if no choice made.
     doneif (field[usrChosen1].ischosen = 0)

     perform assignstr["SkLeverage." & field[usrChosen1].chosen.idstring]]]></eval>
    </thing>
  <thing id="sogTlRequisition" name="Requisition" compset="SoGTalent" description="By spending 1 hour finding and interacting with members of your faction, you can access your faction resources in any settlement where your faction has a presence. Factions active in rural areas might be accessible among certain people outside settlements (a ranger band or druid circle might be accessible at farmholds they protect or among allied fey).\n\nYou have the following options when you requisition in addition to any options granted by your package and talents. You can requisition multiple options at once, provided you pay any costs for everything you requisition.\n\n    * {b}Room and Board{/b}: Secure food and simple, shared lodging for yourself.\n    * {b}Favor{/b}: If your campaign uses organizational influence, you can spend 2 Faction sphere authorizations in place of 1 organization favor.\n    * {b}Prestige Award{/b}: If your campaign uses fame and prestige, you can reduce a prestige award’s Prestige Point cost as you purchase it by 1 PP per 2 Faction sphere authorizations you spend, to a minimum of 1 PP.\n\n{b}Resource Budgets{/b}: Many of the sphere’s benefits can have a value up to your resource budget (or some multiple thereof), representing the resources your faction has allocated for your routine use. The budget is determined by your ranks in your associated skill and whether the resource is temporary or permanent, as listed in the table below.\n\nA permanent resource is one that is not normally expended when used (such as armor or a staff), and must be returned or replaced before you can borrow another.\n\nA temporary resource is one that is normally expended (incrementally or completely) when successfully used (such as a wand or service). It need not be returned. Accumulating or selling temporary items without using them is considered embezzlement or otherwise significant misconduct by most organizations.\n\n{b}Skill Leverage{/b}: When you gain the Faction sphere, you unlock skill leverage with your package’s associated skill as well as a background skill relevant to your faction (the background skills are Appraise, Artistry, Craft, Handle Animal, Knowledge (engineering, geography, history, or nobility), Linguistics, Lore, Perform, Profession, or Sleight of Hand). You can change the choice of background skill whenever you gain a level or join a new faction.\n\n{b}Package{/b}: When you first take the Faction sphere, choose one of the following packages: (supply) or (retainer).\n\n{b}Specia{/b}l: Animal companions, cohorts, drake companions, eidolons, familiars, phantoms, retainers, and similarly subordinate creatures cannot gain this sphere or talents from this sphere.\n\n{b}The Faction Sphere and Wealth{/b}\n\nThe Faction sphere offers a way to effectively turn some non-monetary resources into resources you would normally pay gold for, most visibly with (supply) talents. However, player characters should not generally get permanent character wealth directly from their faction simply because they have the Faction sphere. Faction retainers are paid in funds directly from the faction’s coffers that player characters do not handle. Wealth generated by faction operations go back into the mechanical benefits they provide, into establishing the faction’s infrastructure, paying faction employees, and paying taxes or other costs of doing business.">
    <fieldval field="abText2" value="Authorizations"/>
    <tag group="SoGSphere" tag="Faction"/>
    <tag group="SoGTlClass" tag="InitTalent"/>
    <tag group="SoGTlClass" tag="Talent"/>
    <tag group="SoGAbV1Sc" tag="1_1A"/>
    <tag group="LvNameApp" tag="AppText2"/>
    <tag group="LvNameApp" tag="AppValue2"/>
    <tag group="LvNamePar" tag="AppText"/>
    <tag group="LvNamePar" tag="AppValue"/>
    <tag group="SbNamePar" tag="AppText"/>
    <tag group="SbNamePar" tag="AppValue"/>
    <tag group="AbilType" tag="Extra"/>
    <eval phase="PostAttr" priority="11000"><![CDATA[~ Get out if disabled
     doneif (tagis[Helper.SpcDisable] <> 0)
     ~ or a duplicate.
     doneif (tagis[Helper.FirstCopy] = 0)

     var g as number
     var t as number
     ~ Get the gold from the Associated Skill Ranks (abValue)
     if (field[abValue].value = 1) then
       g = 25
       t = 5
     elseif (field[abValue].value = 2) then
       g = 50
       t = 10
     elseif (field[abValue].value = 3) then
       g = 125
       t = 25
     elseif (field[abValue].value = 4) then
       g = 250
       t = 50
     elseif (field[abValue].value = 5) then
       g = 500
       t = 100
     elseif (field[abValue].value = 6) then
       g = 750
       t = 150
     elseif (field[abValue].value = 7) then
       g = 1250
       t = 250
     elseif (field[abValue].value = 8) then
       g = 1750
       t = 350
     elseif (field[abValue].value = 9) then
       g = 2500
       t = 500
     elseif (field[abValue].value = 10) then
       g = 3000
       t = 600
     elseif (field[abValue].value = 11) then
       g = 4000
       t = 750
     elseif (field[abValue].value = 12) then
       g = 5000
       t = 1000
     elseif (field[abValue].value = 13) then
       g = 6500
       t = 1250
     elseif (field[abValue].value = 14) then
       g = 9000
       t = 1750
     elseif (field[abValue].value = 15) then
       g = 12500
       t = 2500
     elseif (field[abValue].value = 16) then
       g = 17500
       t = 3500
     elseif (field[abValue].value = 17) then
       g = 20000
       t = 4000
     elseif (field[abValue].value = 18) then
       g = 25000
       t = 5500
     elseif (field[abValue].value = 19) then
       g = 35000
       t = 6500
     elseif (field[abValue].value = 20) then
       g = 45000
       t = 8500
     elseif (field[abValue].value > 20) then
       g = 0
       t = 0
     endif

     if (g <> 0) then
       field[abValue].value = g
       field[abText].text = "gp Temp " & t & " gp"
     else
       field[abValue].value = 0
       perform delete[LvNamePar.AppValue]
       perform delete[SbNamePar.AppValue]
       field[abText].text = "No Associated Skill"
     endif

     g = 2
     g += 2 * hero.tagcountstr[replace(tagids[SoGSphere.?],"SoGSphere","SoGHasTal",0)]
     field[abValue2].value = g]]>
     <after name="Calc skRanks"/>
     <after name="Auto-increment abValue fields"/>
     </eval>
    </thing>
  <thing id="sogTlRetainer" name="Retainer" compset="SoGTalent" description="You know how to manage people and spot talent.\n\n{b}Associated Skill{/b}: Knowledge (local) or one other Knowledge or Profession skill that could be used to recall knowledge about members of your faction (such as nobility for a cavalier order, religion for a temple, or arcana for a guild of mages).\n\n{b}Service Requisition Options{/b}: You can requisition the following:\n\n    * {b}Mundane Service (1 Authorization){/b}: You receive a single non-magical service, which is a temporary resource. The authorization spent cannot be regained while the service is still ongoing.\n    * {b}Retainer (1+ Authorizations){/b}: A retainer of a profession you choose assists you. Your variety of choices can be expanded by taking talents with the (retainer) tag. The authorization cost is determined by the retainer’s profession and role. You can only have one combatant retainer requisitioned at a time. You initially have access to the following retainer professions:\n\n{b}Role{/b}: A retainer's role indicates what they expect to do for you. Retainers generally require a successful Diplomacy check to persuade them to take on risky tasks that are not listed for their role. Dangerous or illegal work punishable by imprisonment has the +15 Diplomacy DC increase for the risk of punishment.\n\nYou cannot requisition a retainer to face likely death or commit a crime punishable by execution. A newly requisitioned retainer typically has a starting attitude of indifferent toward you, although the GM can decide otherwise when it makes sense.\n\nSome retainers require additional authorizations for more flexible roles; if you pay for a lesser role but still have authorizations remaining, you can pay the difference later by speaking to them as a free action to have them undertake a more expensive role.\n\nA role might be combatant or noncombatant; retainers of certain professions cost fewer authorizations for a noncombatant role than for a combatant role. A retainer in a noncombatant role avoids combat and flees if attacked, fighting only if escape is infeasible. These retainers may take actions that are not aggressive like feeding a potion to an unconscious ally, but never take offensive or conspicuous actions if they can help it. Retainers in a combatant role follow reasonable orders in combat without any action on your part. Any retainer who feels that your orders place them in unreasonable danger given their role will not follow.\n\n{b}Conditions and Death{/b}: If a non-combatant retainer suffers a harmful effect lasting 1 day or longer or is charged with a serious crime, your maximum number of authorizations is reduced by 1 until the effect is removed or you repay your faction an amount equal to half your temporary resource budget. You might also find future retainers unwilling to take on similar jobs until you gain a level. If any retainer dies, your maximum number of authorizations is reduced by 1 until they are revived or you pay an amount equal to triple your temporary resource budget.\n\n{b}Crafting{/b}: A retainer with an appropriate skill can craft non-magical items for you using the skills they have. They require you to pay them the normal market price for the item, one third to begin work and the rest upon completion.\n\n{b}Temporary Retainer Talents{/b}: If you gain a (retainer) talent temporarily, any part of the talent that requires a choice does not function. For example, many retainers are automatically trained in a few skills chosen when you permanently gain the talent; if you temporarily gain such a talent, you have no special influence over the skills of the retainer your faction finds for you.\n\n{b}Note{/b}: No current plans to have Retainer stats calculated similar to hirelings." summary="Gain the retainer package." uniqueness="useronce">
    <comment>See thing minHire, if extended to implement Retainers. I’d advise making a similar section (Retainers) on Faction tab to the Others tab for Hirelings.</comment>
    <fieldval field="usrCandid1" value="component.BaseSkill &amp; (thingid.skKnowLoc | thingid.skKnowArca |  thingid.skKnowNobl | thingid.skKnowArc | thingid.skKnowRel | thingid.skKnowArca | Helper.SkProf)"/>
    <usesource source="pPF1e_Sph_Guile" parent="pPF1e_Sph" name="Spheres of Guile"/>
    <tag group="SoGSphere" tag="Faction"/>
    <tag group="SoGTlClass" tag="Package" name="Package" abbrev="Package"/>
    <tag group="SoGTalDesc" tag="FacRetaine"/>
    <tag group="SoGIsPkg" tag="Retainer"/>
    <tag group="ChooseSrc1" tag="Hero"/>
    <tag group="Helper" tag="SpecUp" name="SpecUp" abbrev="SpecUp"/>
    <bootstrap thing="abSoGSkLeverage"></bootstrap>
    <eval phase="PostLevel" priority="1500" name="Assign initial Skill Leverage"><![CDATA[~ Get out if disabled
     doneif (tagis[Helper.SpcDisable] <> 0)
     ~ or a duplicate.
     doneif (tagis[Helper.FirstCopy] = 0)
     ~ or if no choice made.
     doneif (field[usrChosen1].ischosen = 0)

     perform hero.childfound[sogTlSpFaction].assignstr["SkLeverage." & field[usrChosen1].chosen.idstring]]]></eval>
    <eval phase="First" priority="103" name="Assign initial Associated Skill"><![CDATA[~ Get out if disabled
     doneif (tagis[Helper.SpcDisable] <> 0)
     ~ or if no choice made.
     doneif (field[usrChosen1].ischosen = 0)
     perform hero.childfound[sogTlSpFaction].assignstr["SoGAssocSk." & field[usrChosen1].chosen.idstring]]]></eval>
    </thing>
  <thing id="sogTlSupply" name="Supply" compset="SoGTalent" description="You are an expert in commerce or logistics.\n\n{b}Associated Skill{/b}: Appraise.\n\n{b}Item Requisition Options{/b}: You can requisition items. Your faction cannot find an item if it is not available in any settlement the faction has a presence in, so rare items likely are not available. You cannot requisition magical items at first, but your variety of item choices can be improved by talents with the (supply) tag. You initially have access to the following items for requisition:\n\n    * {b}Single Item (1+ Authorization){/b}: A single permanent or temporary piece of equipment worth up to the corresponding budget. By spending a second authorization on an item, you can double your budget for it.\n    * {b}Permanent Bundle (2 Authorizations){/b}: A bundle of related permanent equipment worth up to twice your permanent budget. The bundle can include ammunition, single-use light sources, and fuel together worth up to half your temporary resource budget as long as they are part of a kit or used with the permanent items.\n    * {b}Expendable Bundle (2 Authorizations){/b}: Three copies of the same temporary item each worth up to your budget (total value triple your budget), which must all be used or returned before requisitioning more.\n    * {b}Ammunition Bundle (1+ Authorization){/b}: A bundle of ammunition must all be of identical pieces of ammunition and their total price must be below your temporary resource budget if you spend 1 authorization. You can spend a second authorization to triple your budget." summary="Gain the supply package." uniqueness="useronce">
    <comment>TODO: add

[LotS addition]
The Faction sphere can grant access to spellcasting. In games using Spheres of Power, these services might be provided by spherecasters rather than traditional spellcasters. Typical spherecasting services available through the (supply) package to various kinds of factions are suggested below.

    Martial Factions: Two spheres from Enhancement, Life, and War
    Arcane Factions: Two spheres from Alteration, Creation, and Warp
    Religious Factions: Two spheres associated with the religion’s domains, if any. Otherwise, typically Divination, Life, and Light.
    Skilled Factions: Two spheres from Enhancement, Illusion, and Mind
    Wilderness Factions: Two spheres from Life, Nature, and Weather</comment>
    <fieldval field="usrCandid1" value="component.BaseSkill &amp; (thingid.skKnowLoc | thingid.skKnowArca |  thingid.skKnowNobl | thingid.skKnowArc | thingid.skKnowRel | thingid.skKnowArca | Helper.SkProf)"/>
    <usesource source="pPF1e_Sph_Guile" parent="pPF1e_Sph" name="Spheres of Guile"/>
    <tag group="SoGSphere" tag="Faction"/>
    <tag group="SoGTlClass" tag="Package" name="Package" abbrev="Package"/>
    <tag group="SoGTalDesc" tag="FacSupply"/>
    <tag group="SoGIsPkg" tag="Supply"/>
    <tag group="ChooseSrc1" tag="Hero"/>
    <tag group="Helper" tag="SpecUp" name="SpecUp" abbrev="SpecUp"/>
    <bootstrap thing="abSoGSkLeverage"></bootstrap>
    <eval phase="First" priority="103" name="Assign initial Associated Skill"><![CDATA[~ Get out if disabled
     doneif (tagis[Helper.SpcDisable] <> 0)
     ~ or if no choice made.
     doneif (field[usrChosen1].ischosen = 0)

     perform hero.childfound[sogTlSpFaction].assign[SoGAssocSk.skAppraise]]]></eval>
    <eval phase="PostLevel" priority="1500" name="Assign initial Skill Leverage"><![CDATA[~ Get out if disabled
     doneif (tagis[Helper.SpcDisable] <> 0)
     ~ or a duplicate.
     doneif (tagis[Helper.FirstCopy] = 0)
     ~ or if no choice made.
     doneif (field[usrChosen1].ischosen = 0)

     perform hero.childfound[sogTlSpFaction].assign[SkLeverage.skAppraise]]]></eval>
    </thing>
  <thing id="sogTlExtraFaction" name="Extra Faction Package" compset="SoGTalent" description="You gain the Faction sphere package you do not already have. When you requisition a retainer, you can have the faction equip your retainer in a manner equivalent to an NPC of their level by spending an additional 1 authorization when you request them (see NPCs in Pathfinder Roleplaying Game Core Rulebook or NPC stat blocks in the Pathfinder Roleplaying Game NPC Codex or Pathfinder Roleplaying Game: GameMastery Guide for examples). You also gain the new package’s skill as an additional associated skill for this sphere." uniqueness="useronce">
    <usesource source="pPF1e_Sph_Guile"/>
    <tag group="SoGSphere" tag="Faction"/>
    <tag group="SoGTlClass" tag="Talent"/>
    <eval phase="PostLevel" priority="30000">hero.childfound[resSGPkFaction].field[resMax].value += 1</eval>
    </thing>
  <thing id="sogTlLogisticGeni" name="Logistical Genius" compset="SoGTalent" description="You plan a single requisition. Revealing this plan is a full-round action, which can include spending any number of your available authorizations, moving up to your speed, opening something, or producing a carried item. You can only use this talent if you could requisition where you last prepared plans or you saved authorizations for this talent since you last requisitioned. You can only reveal a retainer if you are in a place you could requisition them or their role and abilities would allow them to travel from where you last prepared plans to where you reveal them.\n\n{b}Special:{/b} Masterminds gain a more potent version of this talent from their schemer class feature." uniqueness="useronce">
    <usesource source="pPF1e_Sph_Guile"/>
    <tag group="SoGSphere" tag="Faction"/>
    <tag group="SoGTlClass" tag="Talent"/>
    <tag group="SoGTalDesc" tag="Plan"/>
    </thing>
  <thing id="sogTlArmedRetaine" name="Armed Retainer" compset="SoGTalent" description="You can requisition a gamekeeper, a bouncer, an off-duty watch officer, or other hireling with weapon training as your retainer using the warden profession.\n\nWith GM permission, you can instead use the statistics (and for 2+ authorizations, the equipment) for an aristocrat or warrior with character level up to your retainer Hit Dice maximum.\n\nIf you have at least 4 ranks in the associated skill, fighter or ranger are also options using your usual Hit Dice maximum, and the maximum increases by 1 for aristocrats and warriors.\n\n{b}Warden{/b}\n\n{b}Role 1 Authorization{/b} Patrol somewhere not expecting trouble, discourage rowdy people in a public place, or find game (noncombatant with listed equipment), {b}2 Authorizations (requires (supply) package){/b} Defend a secure location, hunt specific game of a lower challenge rating (combatant with NPC equipment), {b}3 Authorizations (requires (supply) package){/b} Any other reasonably hazardous task (combatant with NPC equipment); Skills (2 primary, 3 secondary) Climb, Craft (traps), Handle Animal, Intimidate, Perception, Profession (hunter or trapper), Ride, Stealth, Survival, Swim; {b}Trade Tradition{/b} adroit granting two of Herbalism, Navigation, and Survivalism;\n\n{b}Ability Scores{/b} Str 11, Dex 15, Con 10, Int 9, Wis 12, Cha 8; {b}Hit Dice{/b} d10 (6 hp per level); {b}Base Attack Bonus{/b} good; {b}Saves{/b} Fort (good), Ref (poor), Will (poor); {b}Special{/b} The warden takes no penalty for dealing nonlethal damage with lethal weapons and can gain investigator or slayer talents (Pathfinder Roleplaying Game Advanced Class Guide) instead of feats. {b}Equipment{/b} a javelin, a spear, a net, a sling and 10 rocks, either leather or hide armor" uniqueness="useronce">
    <usesource source="pPF1e_Sph_Guile"/>
    <tag group="SoGSphere" tag="Faction"/>
    <tag group="SoGTlClass" tag="Talent"/>
    <tag group="SoGTalDesc" tag="FacRetaine"/>
    </thing>
  <thing id="sogTlDabblerRetai" name="Dabbler Retainer" compset="SoGTalent" description="You can choose a magical dabbler as your faction retainer. You can choose either for them to gain spell slots or magic talents. They gain spell slots as an adept (NPC class in the Pathfinder Roleplaying Game Core Rulebook) using their Hit Dice as their adept level. If you have the (supply) package, you can request a dabbler who can cast the same kind of spells that your spellcasting services provide instead of using the adept spell list (although they still use the adept’s spell slots). Alternatively, they gain two of the magic spheres that your faction offers as spellcasting services, have a caster level and spell pool each equal to half their Hit Dice, and gain one magic talent for every two Hit Dice they have. You can share magic talents in place of skill talents with the dabbler retainer.\n\nYou must provide any focus or material component for the dabbler’s spells costing more than 1 gp.\n\nYou can gain this talent a second time if you have at least 5 ranks in the associated skill. If you do, you can requisition a dabbler of greater magical achievement. If they use a spell list, they gain spell slots as a druid. If they use magic spheres, their caster level and number of magic talents each equals their Hit Dice. You must pay the extra authorization to equip them as an NPC of their level in order for them to expend more than half their spell slots of any given level or more than half their spell points.\n\n{b}Academician{/b}\n\n{b}Role{/b} 1 Authorization Provide advice on magical matters, identify magic items, cast spells (noncombatant)\n\n{b}Skills{/b} (2 primary, 2 secondary) Knowledge (arcana), Knowledge (planes), Knowledge (religion), Linguistics, Spellcraft; {b}Skill Spheres{/b} Spelhacking or Study;\n\n{b}Ability Scores{/b} Str 8, Dex 10, Con 10, Int 15, Wis 12, Cha 11; Hit Dice d6 (4 hp per level); {b}Base Attack Bonus{/b} poor; {b}Saves{/b} Fort (poor), Ref (poor), Will (good)\n\n{b}Magician{/b}\n\n{b}Role{/b} 1 Authorization Perform with magic, identify magic items, cast spells (noncombatant)\n\n{b}Skills{/b} (2 primary, 2 secondary) Bluff, Knowledge (arcana), Knowledge (planes), Perform, Spellcraft, Use Magic Device; {b}Skill Spheres{/b} Bluster, Performance, or Spellhacking;\n\n{b}Ability Scores{/b} Str 8, Dex 10, Con 10, Int 11, Wis 13, Cha 15; Hit Dice d6 (4 hp per level); {b}Base Attack Bonus{/b} poor; {b}Saves{/b} Fort (poor), Ref (poor), Will (good)\n\n{b}Priest{/b}\n\n{b}Role{/b} 1 Authorization Provide advice on religious matters, perform ceremonies, identify magic items, cast spells (noncombatant);\n\n{b}Skills{/b} (2 primary, 2 secondary) Heal, Knowledge (arcana), Knowledge (planes), Knowledge (religion), Sense Motive, Spellcraft; {b}Skill Spheres{/b} Communication or Herbalism;\n\n{b}Ability Scores{/b} Str 10, Dex 8, Con 10, Int 11, Wis 15, Cha 12; Hit Dice d6 (4 hp per level); {b}Base Attack Bonus{/b} poor; {b}Saves{/b} Fort (poor), Ref (poor), Will (good)\n\nEquipment Any focus or spell components pouch required by casting tradition worth no more than your temporary resource maximum">
    <fieldval field="tMaxTaken" value="2"/>
    <usesource source="pPF1e_Sph_Guile"/>
    <usesource source="pPF1e_Sph_LotSpheres"/>
    <tag group="SphOfGuil" tag="LnNoCount"/>
    <tag group="SoGSphere" tag="Faction"/>
    <tag group="SoGTlClass" tag="Talent"/>
    <tag group="SoGTalDesc" tag="FacRetaine"/>
    <tag group="LvNamePar" tag="AppText"/>
    <eval phase="PostAttr" priority="12000"><![CDATA[~ Get out if disabled
  doneif (tagis[Helper.SpcDisable] <> 0)
  ~ Or if only taken once.
  doneif (field[tTaken].value <= 1)
  ~ Or if less than 5 ranks.
  doneif (field[tAssocRanks].value < 5)
  ~ Or if not FirstCopy
  if (tagis[Helper.FirstCopy] = 0) then
    perform assign[Helper.SpecUp]
    done
  endif

  ~ We have 5++ ranks and are taken more than once.
  field[abValue].value = 1
  field[abText].text = "greater magic"]]></eval>
    <evalrule phase="Final" priority="2147483647" message="You must have 5 ranks in the Associated Skill to take twice." summary="You must have 5 ranks in the Associated Skill to take twice."><![CDATA[@valid = 0
  ~ Valid if disabled.
  validif (tagis[Helper.SpcDisable] <> 0)
  ~ Or a duplicate.
  validif (tagis[Helper.FirstCopy] = 0)
  ~ Or we have 5 ranks and taken twice.
  validif (field[abValue].value = 1)]]></evalrule>
    <exprreq message="5 ranks in the Associated Skill."><![CDATA[hero.childfound[sogTlSpFaction].field[tAssocRanks].value >= 5]]></exprreq>
    </thing>
  <thing id="sogTlRoguishRetai" name="Roguish Retainer" compset="SoGTalent" description="You can requisition a spy, diplomat, con artist, interrogator, scout, guild thief, private snoop, or other stealthy character as your retainer, using either the sneak or trickster profession. If the retainer steals anything, they keep it unless you purchase it from them for 90% its market price.\n\nYou can requisition the stolen item by spending authorizations (multiplying the appropriate budget by the number of authorizations you spend), but you must turn it over to the faction to regain the authorizations (or use it up, if a temporary item).\n\n{b}Sneak{/b}\n\n{b}Role 1 Authorization{/b} Survey places the public is welcome for security vulnerabilities, keep watch anywhere they can reliably hide, tail a person in a public place, create a diversion in a public place, commit petty crimes you will bail them out of, or undertake other reasonable inconveniences (noncombatant), {b}2 Authorizations{/b} Approach enemies to spy upon or sneak past them, travel, pick pockets in a lowrisk public place, commit substantial property crimes you will bail them out of, or creating a diversion in a private place (noncombatant);\n\n{b}Skills{/b} (4 primary, 4 secondary) Acrobatics, Bluff, Climb, Disable Device, Escape Artist, Perception, Sleight of Hand, Stealth;\n\n{b}Trade Tradition{/b} adroit Tracer;\n\n{b}Ability Scores{/b} Str 8, Dex 15, Con 10, Int 11, Wis 10, Cha 12; {b}Hit Dice{/b} d8 (5 hp per level); {b}Base Attack Bonus{/b} medium; {b}Saves{/b} Fort (poor), Ref (good), Will (poor); {b}Special{/b} The sneak can gain rogue talents instead of feats. {b}Equipment{/b} thieves’ tools\n\n{b}Trickster{/b}\n\n{b}Role 1 Authorization{/b} Survey places the public is welcome for security vulnerabilities, keep watch anywhere they can blend in, tail a person in a low-risk public place, create a diversion in a safe public place, commit petty crimes you’ll bail them out of, travel, or undertake other reasonable inconveniences (noncombatant), {b}2 Authorizations{/b} Approach enemies to spy upon or bluff past them, smuggle an item past a checkpoint, commit fraud you’ll bail them out of, or create a diversion in a private place they can blend in (noncombatant);\n\n{b}Skills{/b} (3 primary, 4 secondary) Bluff, Diplomacy, Disguise, Intimidate, Knowledge (local), Knowledge (nobility), Linguistics, Perception, Perform, Sense Motive, Sleight of Hand;\n\n{b}Trade Tradition{/b} adroit granting two of Bluster, Subterfuge, and Investigation;\n\n{b}Ability Scores{/b} Str 10, Dex 10, Con 8, Int 12, Wis 11, Cha 15; {b}Hit Dice{/b} d8 (4 hp per level); {b}Base Attack Bonus{/b} medium; {b}Saves{/b} Fort (poor), Ref (good), Will (poor); {b}Special{/b} The trickster can gain vigilante social talents (Pathfinder Roleplaying Game: Ultimate Intrigue) instead of shared utility talents, even social talents you do not possess. {b}Equipment{/b} disguise kit, cards or dice, entertainer’s outfit" uniqueness="useronce">
    <usesource source="pPF1e_Sph_Guile"/>
    <tag group="SoGSphere" tag="Faction"/>
    <tag group="SoGTlClass" tag="Talent"/>
    <tag group="SoGTalDesc" tag="FacRetaine"/>
    </thing>
  <thing id="sogTlTalentedReta" name="Talented Retainers" compset="SoGTalent" description="This talent cannot be gained temporarily. When you gain this talent, for each profession of retainer you have access to, you choose a talent of that profession’s skill sphere and add it to the talents the retainer has when you requisition them. If they have multiple spheres, you choose one of those spheres.\n\nYou cannot choose exceptional talents this way. No more than one of the talents you choose can belong to a sphere you do not have. When you gain access to a new retainer profession, you also choose a talent for it (subject to the same restrictions).\n\nYou can choose this talent multiple times. Each time you do, you can choose another talent for each profession you have access to (no more than one of which can belong to a sphere you do not have yourself).">
    <usesource source="pPF1e_Sph_Guile"/>
    <tag group="SphOfGuil" tag="LnNoCount"/>
    <tag group="SoGSphere" tag="Faction"/>
    <tag group="SoGTlClass" tag="Talent"/>
    <tag group="SoGTalDesc" tag="FacRetaine"/>
    <tag group="User" tag="NeedDomain"/>
    </thing>
  <thing id="sogTlFSpecialiLia" name="Specialist Liaison" compset="SoGTalent" description="For every noncombatant retainer profession you have, choose a new set of skills and skill talents for one. When you requisition from this profession, you choose which of your defined versions you get. If you gain another retainer profession, you can define another combination of skills and skill talents for it. You can take this talent multiple times, defining a new combination for each profession you have each time.">
    <usesource source="pPF1e_Sph_Guile"/>
    <tag group="SphOfGuil" tag="LnNoCount"/>
    <tag group="SoGSphere" tag="Faction"/>
    <tag group="SoGTlClass" tag="Talent"/>
    <tag group="SoGTalDesc" tag="FacRetaine"/>
    <tag group="SoGTalDesc" tag="Utility"/>
    <tag group="User" tag="NeedDomain"/>
    </thing>
  <thing id="sogTlFSpellcasHir" name="Spellcaster Hireling" compset="SoGTalent" description="By spending 1 authorization, you can requisition spellcasting services, which is a temporary resource that can include multiple castings of the same spell within a single day if your temporary resource budget is high enough. The faction can only guarantee a caster with a level no higher than your ranks in the associated skill – 2 (minimum 1st), but at the GM’s discretion a more powerful caster might be available. This service must be received where you requisitioned it; the spellcaster does not follow you. You can take this talent a second time. If you do, the maximum increases by 1.">
    <fieldval field="abText" value="caster level"/>
    <fieldval field="abValue" value="-2"/>
    <fieldval field="tMaxTaken" value="2"/>
    <usesource source="pPF1e_Sph_Guile"/>
    <tag group="SphOfGuil" tag="LnNoCount"/>
    <tag group="SoGSphere" tag="Faction"/>
    <tag group="SoGTlClass" tag="Talent"/>
    <tag group="SoGTalDesc" tag="FacRetaine"/>
    <tag group="SoGTalDesc" tag="Utility"/>
    <tag group="SoGAbV1Sc" tag="1_1A"/>
    <tag group="LvNamePar" tag="AppValue"/>
    <eval phase="PostAttr" priority="12000"><![CDATA[~ Get out if disabled
  doneif (tagis[Helper.SpcDisable] <> 0)
  ~ Or if only taken once.
  doneif (field[tTaken].value <= 1)
  ~ Or if not FirstCopy
  if (tagis[Helper.FirstCopy] = 0) then
    perform assign[Helper.SpecUp]
    perform delete[LvNamePar.?]
    done
  endif

  field[abValue].value += 1]]></eval>
    </thing>
  <thing id="sogTlDiverseFacti" name="Diverse Faction Magic" compset="SoGTalent" description="Choose either one additional spellcasting class list or two magic spheres. Add it to your resource magic options for spellcasting services and Faction talents. Whenever you requisition a new retainer with spellcasting, you can change your choices among the available spell lists, talents, and skills. You can take this talent multiple times, choosing a new spell list or two magic spheres each time.">
    <usesource source="pPF1e_Sph_Guile"/>
    <usesource source="pPF1e_Sph_LotSpheres"/>
    <tag group="SphOfGuil" tag="LnNoCount"/>
    <tag group="SoGSphere" tag="Faction"/>
    <tag group="SoGTlClass" tag="Talent"/>
    <tag group="SoGTalDesc" tag="FacSupply"/>
    <tag group="User" tag="NeedDomain"/>
    </thing>
  <thing id="sogTlPotionSupply" name="Potion Supply" compset="SoGTalent" description="Your item requisition can be for any alchemical remedy, elixir, potion, or similar single-use consumable item available in your faction’s area. The potions available match the spellcasting services for your faction type. The item’s caster level must be no higher than your associated skill ranks – 2.\n\nYou can take this talent a second time if you have at least 10 ranks in Appraise. If you do, you can spend 2 authorizations to requisition any single potion or elixir regardless of your faction’s spellcasting services worth up to your temporary resource budget. The caster level must be no higher than your ranks in Appraise if it suits your faction’s spellcasting services, or no higher than your ranks in Appraise – 2 otherwise.">
    <usesource source="pPF1e_Sph_Guile"/>
    <tag group="SphOfGuil" tag="LnNoCount"/>
    <tag group="SoGSphere" tag="Faction"/>
    <tag group="SoGTlClass" tag="Talent"/>
    <tag group="SoGTalDesc" tag="FacSupply"/>
    <tag group="User" tag="NeedDomain"/>
    <eval phase="PostAttr" priority="12000"><![CDATA[~ Get out if disabled
  doneif (tagis[Helper.SpcDisable] <> 0)
  ~ Or if only taken once.
  doneif (field[tTaken].value <= 1)
  ~ Or if less than 10 ranks.
  doneif (#skillranks[skAppraise] < 10)
  ~ Or if not FirstCopy
  if (tagis[Helper.FirstCopy] = 0) then
    perform assign[Helper.SpecUp]
    done
  endif

  ~ We have 10+ ranks and are taken more than once.
  field[abValue].value = 1]]></eval>
    <evalrule phase="Final" priority="2147483647" message="You must have 10 ranks in Appraise to take this a second time."><![CDATA[@valid = 0
  ~ Valid if disabled.
  validif (tagis[Helper.SpcDisable] <> 0)
  ~ Or a duplicate.
  validif (tagis[Helper.FirstCopy] = 0)
  ~ Or we have 10 ranks and taken twice.
  validif (field[abValue].value = 1)]]></evalrule>
    </thing>
  <thing id="sogTlWondrousItem" name="Wondrous Item Supply" compset="SoGTalent" description="Your item requisition can be for any wondrous item available in your faction’s area. If the item has a limited number of charges or uses that do not fully replenish daily, it comes with half its uses remaining (rounded down)." uniqueness="useronce">
    <usesource source="pPF1e_Sph_Guile"/>
    <tag group="SoGSphere" tag="Faction"/>
    <tag group="SoGTlClass" tag="Talent"/>
    <tag group="SoGTalDesc" tag="FacSupply"/>
    </thing>
  <thing id="sogTlScrollCache" name="Scroll Cache" compset="SoGTalent" description="You can requisition the following items. Scrolls you requisition can’t have multiple spells with different names on them.\n\n{indent 20}* {b}Single Scroll (2 authorizations):{/b} Any scroll available with your faction type’s spellcasting. The scroll’s caster level can be up to your associated skill ranks – 2 (minimum 1st). The scroll’s price can be up to twice your temporary resource budget.* {b}Scroll Bundle (2 authorizations):{/b} Three identical scrolls available with your faction type’s spellcasting with caster level up to your associated skill ranks – 5 (minimum 1st). The sum of their price must be within triple your temporary budget.{indent -20}You can take this talent a second time. If you do, you increase the maximum caster level for your faction’s scrolls by 1." uniqueness="useronce">
    <fieldval field="abValue" value="-2"/>
    <usesource source="pPF1e_Sph_Guile"/>
    <tag group="SphOfGuil" tag="LnNoCount"/>
    <tag group="SoGSphere" tag="Faction"/>
    <tag group="SoGTlClass" tag="Talent"/>
    <tag group="SoGTalDesc" tag="FacSupply"/>
    <tag group="SoGAbV1Sc" tag="1_1A"/>
    <eval phase="PostAttr" priority="12000"><![CDATA[~ Get out if disabled
  doneif (tagis[Helper.SpcDisable] <> 0)
  ~ Or if only taken once.
  doneif (field[tTaken].value <= 1)
  ~ Or if not FirstCopy
  if (tagis[Helper.FirstCopy] = 0) then
    perform assign[Helper.SpecUp]
    perform delete[LvNamePar.?]
    done
  endif

  field[abValue].value += 1]]></eval>
    </thing>
  <thing id="sogTlMagicalArmor" name="Magical Armory" compset="SoGTalent" description="Your item requisition can be for any magic weapon, armor, shield, or ammunition available in your faction’s area. If the item has a limited number of charges or uses that do not fully replenish daily, it comes with half its uses remaining (rounded down)." uniqueness="useronce">
    <usesource source="pPF1e_Sph_Guile"/>
    <tag group="SoGSphere" tag="Faction"/>
    <tag group="SoGTlClass" tag="Talent"/>
    <tag group="SoGTalDesc" tag="FacSupply"/>
    </thing>
  <thing id="sogTlWandSupply" name="Wand Supply" compset="SoGTalent" description="Your item requisition can be for any wand available in your faction’s area. The wands available match the spellcasting services for your faction type. The item’s caster level must be no higher than your associated skill ranks – 3. You can requisition a wand with 5 charges that counts as one-tenth the price or a wand with 10 charges that counts as one-fifth the price." uniqueness="useronce">
    <usesource source="pPF1e_Sph_Guile"/>
    <tag group="SoGSphere" tag="Faction"/>
    <tag group="SoGTlClass" tag="Talent"/>
    <tag group="SoGTalDesc" tag="FacSupply"/>
    </thing>
  <thing id="sogSpHerbalism" name="Herbalism Sphere" compset="SoGSphere" uniqueness="unique">
    <usesource source="pPF1e_Sph_Guile"/>
    <tag group="SoGSphere" tag="Herbalism" name="Herbalism"/>
    </thing>
  <thing id="resSGPkHerbalism" name="Herbalism Packages" compset="Resource" panellink="tbSoGHerbalism">
    <fieldval field="resObject" value="Herbalism Packages"/>
    <usesource source="pPF1e_Sph_Guile"/>
    <tag group="SoGSphere" tag="Herbalism"/>
    <tag group="SoGPackage" tag="Herbalism"/>
    </thing>
  <thing id="resSGSEHerbalism" name="Bonus Herbalism Talents" compset="Resource" panellink="tbSoGHerbalism">
    <fieldval field="resObject" value="Bonus Herbalism Talents"/>
    <usesource source="pPF1e_Sph_Guile"/>
    <tag group="SoGSphere" tag="Herbalism"/>
    <tag group="SoGBonTal" tag="Herbalism"/>
    <eval phase="Final">~ Add bonus talents
        field[resMax].value += hero.tagcount[SoGBonTal.Herbalism]</eval>
    <eval phase="Final" priority="999999999999" index="2"><![CDATA[
        ~ If we have any bonus talents, show the sphere tab
        if (field[resMax].value > 0) then
          perform pulltags[SoGBonTal.?,SoGSphTab]
          perform hero.pushtags[SoGSphTab.?]
        endif]]></eval>
    </thing>
  <thing id="sogTlHdHer" name="{align center}Herbalism" compset="SoGTalent" isshowonly="yes">
    <tag group="SoGSphere" tag="Herbalism"/>
    <tag group="SoGTlClass" tag="GainSphere"/>
    </thing>
  <thing id="sogTlSpHerbalism" name="Herbalism Sphere" compset="SoGTalent" description="Operatives of the Herbalism sphere are able to utilize their knowledge of herbal lore and remedies to bolster their allies, as well as restore them from many of the afflictions that befall adventurers in the field.\n\n{b}Associated Skill{/b}: Heal or Profession (herbalist) (depending on your chosen package).\n\nYou gain 5 ranks in your package's associated skills, plus 5 ranks per additional talent spent in the Herbalism sphere (maximum ranks equal to your Hit Dice). If you already have ranks in the associated skill you may immediately retrain them.\n\n{b}Skill Leverage{/b}: You unlock skill leverage with your chosen package’s associated skill and Knowledge (nature).\n\n{b}Package{/b}: When you gain the Herbalism sphere, choose one of the following packages: (herbal) or (remedy). You can take the Expanded Herbalist talent to gain an additional package." summary="Gain access to the Herbalism Sphere." panellink="tbSoGHerbalism" uniqueness="useronce">
    <usesource source="pPF1e_Sph_Guile"/>
    <tag group="SoGSphere" tag="Herbalism"/>
    <tag group="SkLeverage" tag="skKnowNat"/>
    <tag group="SoGTlClass" tag="GainSphere" name="Sphere access" abbrev="Sphere access"/>
    <tag group="Helper" tag="AlwaysAvl" name="AlwaysAvl" abbrev="AlwaysAvl"/>
    <tag group="Hide" tag="Activation"/>
    <bootstrap thing="abSoGSkLeverage"></bootstrap>
    <bootstrap thing="sogSpHerbalism"></bootstrap>
    </thing>
  <thing id="sogTlHerbalLore" name="Herbal Lore" compset="SoGTalent" description="Choose three of the following herb types. You learn the practical applications of these herbs, and where they can be found in the wild. Gathering a batch of herbs requires 1 hour, and may be done during the same period of time required to prepare spells or other daily abilities. You may gather an additional batch of herbs at any time by spending 1 hour gathering herbs. Herbs may be gathered anywhere that plants or fungi grow, including caves or densely packed cities but not a lifeless demiplane.\n\nA single batch of herbs contains a number of herbs equal to your ranks in the associated skill + your operative ability modifier, and contains any combination of herbs you can gather. A gathered herb loses its potency after 24 hours. You may only gather a number of batches per day equal to your operative ability modifier.\n\nUnless otherwise specified, consuming a herb is a standard action, and grants its benefits for a number of rounds equal to 1/2 your ranks in the associated skill + your operative ability modifier, or until the user benefits from the herb, whichever comes first, unless otherwise indicated.\n\n {b}Bitter Herbs{/b}: Known for their restorative properties, a bitter herb can be consumed to heal 1 point of ability damage after 10 minutes has elapsed.\n{indent 5}{b}Bland Herbs{/b}: Used to slow or hasten natural bodily processes, a bland herb can be consumed to reduce the next instance of weapon damage received by an amount equal to your operative ability modifier. Alternatively you may reduce the value of the next instance of bleed damage you would suffer by an equal amount.\n{b}Cool Herbs{/b}: Used to boost cognitive functions, a cool herb can be consumed to gain a +2 competence bonus to the next Intelligence-, Wisdom-, or Charisma-based ability check or skill check the user attempts within the herb’s duration.\n{b}Dry Herbs{/b}: Utilized to protect the body and mind, a dry herb can be consumed to allow the user to reroll one saving throw they attempt within a number of rounds equal to your operative modifier. The user decides whether to reroll the saving throw after the results are revealed and must take the second result even if it is worse.\n{b}Intense Herbs{/b}: Used to elicit a short-term benefit or one that alters the user’s energy, an intense herb can be consumed to gain a +5-foot alchemical bonus to all of the user’s speeds for the herb’s duration.\n{indent 5}{i}Special{/i}: If you possess the Double Dose talent, the numerical increase instead applies to the herb’s duration.\n{b}Sour Herbs{/b}: Used to rapidly ferment or sour a concoction to enhance its effects–although typically with unfortunate side effects–a sour herb can be consumed to gain a +2 competence bonus to saving throws against disease and poison effects. At any point during the herb’s duration, the user can spend a swift action to retch, making them sickened for 1 round and granting them a new saving throw against any poisons they are suffering from (a failed attempt does not further the poisons effects).\n{b}Spicy Herbs{/b}: Used to enhance and alter physical abilities, a spicy herb can be consumed to gain a +2 competence bonus to the next Strength-, Dexterity-, or Constitution-based ability check or skill check the user attempts within the herb’s duration.\n{b}Sweet Herbs{/b}: Known to encourage natural healing processes, a sweet herb can be consumed to gain fast healing 1 for the herb’s duration.\n{b}Tainted Herbs{/b}: Used to harm as opposed to heal, a tainted herb can be used as a contact or ingested poison that deals 1 Constitution damage (immediate onset, Fortitude negates). A tainted herb can be added to a concoction as a twist, making it tainted. A tainted concoction changes any bonuses that it grants to an equivalent penalty, as well as reversing any other effects of the concoction. Some twists may not be able to be cleanly ‘reversed’ (such as the Energizer bitter herb twist), and may be incompatible. In these instances, the twist instead increases the saving throw DC of the tainted concoction by 1. A tainted concoction is considered an injury or ingested poison (chosen upon creation) for abilities that rely on it, and when exposed to it, grants a Fortitude save to negate its effects." summary="Gather useful herbs from surroundings." uniqueness="useronce">
    <comment>abValue     =  # of herbs
abValue2   =   rounds
abValue3   =  # of types</comment>
    <fieldval field="abText" value="herbs"/>
    <fieldval field="abText2" value="rounds"/>
    <fieldval field="abText3" value="types"/>
    <fieldval field="abValue3" value="3"/>
    <usesource source="pPF1e_Sph_Guile"/>
    <tag group="SoGSphere" tag="Herbalism"/>
    <tag group="SoGTlClass" tag="InitTalent"/>
    <tag group="SoGTlClass" tag="Talent"/>
    <tag group="SoGAbV1OM" tag="Value"/>
    <tag group="SoGAbV1Sc" tag="1_1A"/>
    <tag group="SoGAbV2OM" tag="Value"/>
    <tag group="SoGAbV2Sc" tag="1_2A"/>
    <tag group="LvNamePar" tag="AppText"/>
    <tag group="abAction" tag="Standard"/>
    <eval phase="Render" priority="400"><![CDATA[~ If we're disabled, do nothing
  doneif (tagis[Helper.SpcDisable] <> 0)

  perform hero.childfound[sogTlLargeBatch].setfocus
  if (state.isfocus <> 0) then
    if (focus.tagis[Helper.SpcDisable] = 0) then

      ~ Add # per Large Batch
      field[abValue3].value += focus.countme * field[abValue3].value

      ~ Double herbs found with Large Batch
      field[abValue].value += field[tOM].value
    endif
  endif

  field[abText].text = field[abValue3].value & " types, " & field[abValue].value & " herbs, " & field[abValue2].value & " rounds"]]>
  <after name="Apply free ranks for associated skills SoG"/>
  <after name="Set Sphere Effective Level"/>
  <after name="Auto-increment abValue fields"/>
  </eval>
    </thing>
  <thing id="sogTlMedicalExp" name="Medical Expertise" compset="SoGTalent" description="When you treat deadly wounds on a creature, you only need 10 minutes to do so, can do so an additional time per day, and if you exceed the DC by 5 or more, you can add your operative modifier (minimum 1) instead of your Wisdom modifier to the amount healed. You can spend 1 use of skill leverage to ignore the daily limit on a creature when treating deadly wounds on them.\n\nFor every 5 ranks in this package’s associated skill you possess, you reduce the time taken to treat deadly wounds this way by 1 step (10 minutes > 1 minute > full-round > standard > move > swift); attempting to do so as a full-round action or shorter provokes attacks of opportunity." uniqueness="useronce">
    <usesource source="pPF1e_Sph_Guile"/>
    <tag group="SoGSphere" tag="Herbalism"/>
    <tag group="SoGTlClass" tag="InitTalent"/>
    <tag group="SoGTlClass" tag="Talent"/>
    </thing>
  <thing id="sogTlPhysicianE" name="Physician’s Efficacy" compset="SoGTalent" description="You can adopt this approach as a swift action. While adopting this approach, you gain a +2 insight bonus to Heal checks, +1 per 4 associated ranks. You can also treat deadly wounds as a full-round action (which provokes attacks of opportunity); or one step faster if you can already do so as a full-round action.\n\nYou can spend 1 use of skill leverage when adopting this approach to allow you to treat any roll of a 4 or lower on a Heal check as if you had rolled a 5 instead, as well as allowing you to add twice your operative modifier (minimum 1) instead of your Wisdom modifier if you exceed the DC to treat deadly wounds by 5 or more." uniqueness="useronce">
    <usesource source="pPF1e_Sph_Guile"/>
    <tag group="SoGSphere" tag="Herbalism"/>
    <tag group="SoGTlClass" tag="InitTalent"/>
    <tag group="SoGTlClass" tag="Talent"/>
    <tag group="SoGTalDesc" tag="Approach"/>
    </thing>
  <thing id="sogTlNaturalEye" name="Naturalist's Eye" compset="SoGTalent" description="You may adopt this approach as a swift action. While you maintain this approach, you gain a +2 insight bonus to this package’s associated skill checks, Knowledge (nature) and Survival checks, increasing by 1 per 4 ranks in the associated skill you possess. You can also identify a poison or potion as a swift or immediate action with a successful associated skill check against the save DC of the poison (if a poison) or 15 + the potion’s spell level (if a potion)–to identify a poison or potion, you must either be handling it or witness it affecting a creature within close range.\n\nAdditionally, you can use this package’s associated skill instead of any Dexterity-, Intelligence-, Wisdom-, or Charisma-based skill check made against a plant creature or any such check made in regards to plants. Whenever you attempt such a check, you can spend 1 use of skill leverage to treat the check as though you had rolled a 15 on the die–this is treated as if you had taken 10 on the check.\n\nFinally, you regain 1 skill leverage when you successfully identify a plant or plant type creature that you have never encountered before." uniqueness="useronce">
    <usesource source="pPF1e_Sph_Guile"/>
    <tag group="SoGSphere" tag="Herbalism"/>
    <tag group="SoGTlClass" tag="InitTalent"/>
    <tag group="SoGTlClass" tag="Talent"/>
    <tag group="SoGTalDesc" tag="Approach"/>
    </thing>
  <thing id="sogTlHerbHerbal" name="Herbal" compset="SoGTalent" description="{b}Associated Skill{/b}: Profession (herbalist).\n\nYou gain the herbal lore and naturalist’s eye abilities." summary="Gain herbal lore and naturalist's eye." uniqueness="useronce">
    <usesource source="pPF1e_Sph_Guile"/>
    <tag group="SoGSphere" tag="Herbalism"/>
    <tag group="SoGAssocSk" tag="skProfHerb"/>
    <tag group="SoGTlClass" tag="Package"/>
    <tag group="SoGTalDesc" tag="HerbHerbal"/>
    <tag group="SoGIsPkg" tag="Herbal"/>
    <tag group="Helper" tag="SpecUp"/>
    <bootstrap thing="sogTlHerbalLore">
      <containerreq phase="First" priority="500">!SoGBanTal.sogTlHerbalLore</containerreq>
      </bootstrap>
    <bootstrap thing="sogTlNaturalEye">
      <containerreq phase="First" priority="500">!SoGBanTal.sogTlNaturalEye</containerreq>
      </bootstrap>
    <eval phase="First" priority="103" name="Assign initial Associated Skill"><![CDATA[~ Get out if disabled
     doneif (tagis[Helper.SpcDisable] <> 0)

perform hero.childfound[sogTlSpHerbalism].assign[SoGAssocSk.skProfHerb]]]></eval>
    <eval phase="PostLevel" priority="1500" name="Assign initial Skill Leverage"><![CDATA[~ Get out if disabled
     doneif (tagis[Helper.SpcDisable] <> 0)
     ~ or a duplicate.
     doneif (tagis[Helper.FirstCopy] = 0)

     perform hero.childfound[sogTlSpHerbalism].assign[SkLeverage.skProfHerb]]]></eval>
    </thing>
  <thing id="sogTlHerbRemedy" name="Remedy" compset="SoGTalent" description="{b}Associated Skill{/b}: Heal.\n\nYou gain the medical expertise and physician’s efficacy abilities." summary="Gain medical expertise and physician’s efficacy." uniqueness="useronce">
    <usesource source="pPF1e_Sph_Guile"/>
    <tag group="SoGSphere" tag="Herbalism"/>
    <tag group="SoGAssocSk" tag="skHeal"/>
    <tag group="SoGTlClass" tag="Package"/>
    <tag group="SoGTalDesc" tag="HerbRemedy"/>
    <tag group="SoGIsPkg" tag="Remedy"/>
    <tag group="Helper" tag="SpecUp"/>
    <bootstrap thing="sogTlMedicalExp">
      <containerreq phase="First" priority="500">!SoGBanTal.sogTlMedicalExp</containerreq>
      </bootstrap>
    <bootstrap thing="sogTlPhysicianE">
      <containerreq phase="First" priority="500">!SoGBanTal.sogTlPhysicianE</containerreq>
      </bootstrap>
    <eval phase="First" priority="103" name="Assign initial Associated Skill"><![CDATA[~ Get out if disabled
     doneif (tagis[Helper.SpcDisable] <> 0)

     perform hero.childfound[sogTlSpHerbalism].assign[SoGAssocSk.skHeal]]]></eval>
    <eval phase="PostLevel" priority="1500" name="Assign initial Skill Leverage"><![CDATA[~ Get out if disabled
     doneif (tagis[Helper.SpcDisable] <> 0)
     ~ or a duplicate.
     doneif (tagis[Helper.FirstCopy] = 0)

     perform hero.childfound[sogTlSpHerbalism].assign[SkLeverage.skHeal]]]></eval>
    </thing>
  <thing id="sogTlDoubleDose" name="Double Dose" compset="SoGTalent" description="As a swift action you may combine two herbs into a “double-dose”. A double-dose may not be used to create concoctions. A double-dose provides the benefits of both herbs when consumed. If a double-dose is made with two of the same herb, any numerical effects of the herb are increased by 1 + 1 per 4 ranks in the associated skill." summary="You may combine two herbs into a “double-dose.”" uniqueness="useronce">
    <fieldval field="abValue" value="1"/>
    <usesource source="pPF1e_Sph_Guile"/>
    <tag group="SoGSphere" tag="Herbalism"/>
    <tag group="SoGTlClass" tag="Talent"/>
    <tag group="SoGAbV1Sc" tag="1_4A"/>
    <tag group="LvNamePar" tag="AppText"/>
    <tag group="LvNamePar" tag="AppValue"/>
    <tag group="LvNamePar" tag="SignAppVal"/>
    </thing>
  <thing id="sogTlLargeBatch" name="Large Batch" compset="SoGTalent" description="You may gather an additional 3 types of herbs. In addition, you double your operative ability modifier when determining how many herbs you gather in a batch." summary="Gather all six types and double OAM.\n\nYou can take this talent multiple times–each time you do so, choose an additional 3 types of herbs.">
    <usesource source="pPF1e_Sph_Guile"/>
    <tag group="SoGSphere" tag="Herbalism"/>
    <tag group="SoGTlClass" tag="Talent"/>
    </thing>
  <thing id="sogTlProactiveCar" name="Proactive Care" compset="SoGTalent" description="You improve the following Heal skill uses in the following ways on a successful check:\n\n    {b}First Aid{/b}: The creature reduces the next instance of bleed damage they suffer within the next hour by an amount equal to your operative modifier (minimum 1).\n    {b}Treat Deadly Wounds{/b}: Any excess healing healed through this skill use that exceeds their maximum hit point total is applied as temporary hit points which last for 1 hour–these temporary hit points cannot exceed 10 + your ranks in this package’s associated skill.\n    {b}Treat Disease or Poison{/b}: The patient gains a +2 competence bonus to saving throws against poisons and disease for 8 hours. You can use this skill use on a creature that is not suffering from a disease or poison to grant them this bonus, although it only applies to such affliction’s with a saving throw DC equal to or below your Heal check result.\n\nYou can also reveal the use of any of these Heal skill uses as a plan; doing so is an immediate action (although the benefits always take effect at the end of the current turn)." uniqueness="useronce">
    <usesource source="pPF1e_DRS_InvIng"/>
    <usesource source="pPF1e_Sph_Guile"/>
    <tag group="SoGSphere" tag="Herbalism"/>
    <tag group="SoGTlClass" tag="Talent"/>
    <tag group="SoGTalDesc" tag="HerbRemedy"/>
    <tag group="SoGTalDesc" tag="Plan"/>
    </thing>
  <thing id="sogDbHerbExpert" name="Herbology Expert" compset="SoGDrawbk" description="You lose the Naturalist's Eye approach. You gain the Double Dose talent." summary="Trade Naturalist's Eye for Double Dose." panellink="tbSoGHerbalism" uniqueness="useronce">
    <usesource source="pPF1e_Sph_Guile"/>
    <tag group="SphOfGuil" tag="NoBnTalent"/>
    <tag group="SoGSphere" tag="Herbalism"/>
    <tag group="Helper" tag="AlwaysAvl"/>
    <tag group="SoGBanTal" tag="sogTlNaturalEye"/>
    <bootstrap thing="sogTlDoubleDose">
      <autotag group="LvNamePar" tag="EncParenth"/>
      </bootstrap>
    </thing>
  <thing id="sogDbDisciplinedP" name="Disciplined Physician" compset="SoGDrawbk" description="{b}Prerequisites{/b}: Remedy package.\n\nYou lose the Physician’s Efficacy approach. You gain a (remedy) talent of your choice." summary="Trade Naturalist's Eye for Double Dose." panellink="tbSoGHerbalism" uniqueness="useronce">
    <usesource source="pPF1e_DRS_InvIng"/>
    <usesource source="pPF1e_Sph_Guile" parent="pPF1e_Sph" name="Spheres of Guile"/>
    <tag group="SoGSphere" tag="Herbalism" name="Herbalism" abbrev="Herbalism"/>
    <tag group="Helper" tag="AlwaysAvl" name="AlwaysAvl" abbrev="AlwaysAvl"/>
    <tag group="SoGBanTal" tag="sogTlPhysicianE"/>
    <tag group="SoGFreeTal" tag="HerbRemedy"/>
    <tag group="SoGReqPkg" tag="Remedy"/>
    </thing>
  <thing id="sogSpInfiltration" name="Infiltration Sphere" compset="SoGSphere" uniqueness="unique">
    <usesource source="pPF1e_Sph_Guile"/>
    <tag group="SoGSphere" tag="Infiltration" name="Infiltration"/>
    </thing>
  <thing id="resSGSEInfiltrati" name="Bonus Infiltration Talents" compset="Resource" panellink="tbSoGInfiltration">
    <fieldval field="resObject" value="Bonus Infiltration Talents"/>
    <usesource source="pPF1e_Sph_Guile"/>
    <tag group="SoGSphere" tag="Infiltration"/>
    <tag group="SoGBonTal" tag="Infiltration"/>
    <eval phase="Final">~ Add bonus talents
        field[resMax].value += hero.tagcount[SoGBonTal.Infiltration]</eval>
    <eval phase="Final" priority="999999999999" index="2"><![CDATA[
        ~ If we have any bonus talents, show the sphere tab
        if (field[resMax].value > 0) then
          perform pulltags[SoGBonTal.?,SoGSphTab]
          perform hero.pushtags[SoGSphTab.?]
        endif]]></eval>
    </thing>
  <thing id="sogTlHdInf" name="{align center}Infiltration" compset="SoGTalent" isshowonly="yes">
    <tag group="SoGSphere" tag="Infiltration"/>
    <tag group="SoGTlClass" tag="GainSphere"/>
    </thing>
  <thing id="sogTlSpInfiltrati" name="Infiltration Sphere" compset="SoGTalent" description="Operatives of the Infiltration sphere train to avoid scrutiny, move stealthily, and outsmart traps that stand in their way. They are silent and unobtrusive when they need to be, blending into shadows and moving where no eyes will see.\n\n{b}Associated Skill{/b}: Disable Device.\n\nYou gain the following benefits when you gain the Infiltration sphere.\n\nWhen you gain the Infiltration sphere, you gain 5 ranks in Disable Device, plus 5 ranks per additional talent spent in the Infiltration sphere (maximum ranks equal to your Hit Dice). If you already have ranks in Disable Device, you may immediately retrain them.\n\n{b}Skill Leverage{/b}: When you gain the Infiltration sphere, you unlock skill leverage with Disable Device and Stealth.\n\nYou also acquire the Fast Sabotage and Light Step abilities." summary="Gain access to the Infiltration Sphere" panellink="tbSoGInfiltration" uniqueness="useronce">
    <comment>TODO Need to add Startle talent.</comment>
    <usesource source="pPF1e_Sph_Guile"/>
    <tag group="SoGSphere" tag="Infiltration"/>
    <tag group="SoGAssocSk" tag="skDisable"/>
    <tag group="SkLeverage" tag="skDisable"/>
    <tag group="SkLeverage" tag="skStealth"/>
    <tag group="SoGTlClass" tag="GainSphere" name="Sphere access" abbrev="Sphere access"/>
    <tag group="Helper" tag="AlwaysAvl" name="AlwaysAvl" abbrev="AlwaysAvl"/>
    <bootstrap thing="sogSpInfiltration"></bootstrap>
    <bootstrap thing="sogTlFastSabotage">
      <containerreq phase="First" priority="500">!SoGBanTal.sogTlFastSabotage</containerreq>
      </bootstrap>
    <bootstrap thing="sogTlLightStep">
      <containerreq phase="First" priority="500">!SoGBanTal.sogTlLightStep</containerreq>
      </bootstrap>
    </thing>
  <thing id="sogTlFastSabotage" name="Fast Sabotage" compset="SoGTalent" description="You can attempt Disable Device on any item that would normally require up to 2d4 rounds in a single standard action (without a penalty for work ing quickly). You can perform disastrous sabotage (new skill use) in 1d4 rounds (without a penalty for working quickly). If the sabotage allows a saving throw, it is against your sphere DC if that is higher than the usual DC. If the sabotage allows a skill check, the DC is 15 + 150% your ranks in Disable Device + your operative ability modifier. Instead of a common Disable Device sabotage effect, you can apply the effect of a suitable (sabotage) talent to the device, but you cannot apply a talent faster by accepting a Disable Device penalty (as you can with disastrous sabotage).\n\nYou can apply the sabotage effect immediately or choose for it to take effect when triggered. Typical triggers are when it is used a certain number of times (for items like weapons) or after a certain total number of minutes of use (for items like tools or vehicles). You can also make the trigger contingent on specific, physically distinct modes of use. For example, you might make sabotage to armor trigger when the wearer attempts two skill checks to move or sabotage to a lock trigger upon becoming specifically locked or specifically unlocked. When sabotage is triggered by an action or the use of the item, it takes effect during the triggering use (which might penalize or waste that action). If a (sabotage) talent's effect goes unused for more than 1 day, it triggers.\n\nUntil it becomes relevant, the sabotage can generally only be noticed with an active Perception check opposed to your Disable Device result. (Sabotage that has not been triggered yet is never relevant.) Most sabotage that has not yet triggered can be removed without triggering it with a successful opposed Craft check using a suitable skill for the item or with an opposed Disable Device check at a -5 penalty. If a creature attempts to remove sabotage that has not triggered yet and fails by 5 or more, the sabotage triggers immediately.\n\nEach sabotage indicates how it can be ended; if it requires an opposed skill check to end, use either Disable Device at a penalty or Craft unless noted otherwise.\n\nThe standard action allowed by this ability is fast enough to sabotage an item held or carried by a creature with a successful dirty trick combat maneuver check (a new Disable Device skill use on page 44). Sabotaging an item a creature wears or carries is not a hostile action for magical effects like invisibility if you give the sabotage a trigger (rather than applying the effect immediately)." uniqueness="useronce">
    <usesource source="pPF1e_Sph_Guile"/>
    <tag group="SoGSphere" tag="Infiltration"/>
    <tag group="SoGTlClass" tag="InitTalent"/>
    <tag group="SoGTlClass" tag="Talent"/>
    </thing>
  <thing id="sogTlLightStep" name="Light Step" compset="SoGTalent" description="You adopt this approach as a swift action while you are using Stealth. You reduce by 5 the penalty to Stealth for moving up to your full speed, for skulking in the open (page 72), as part of creating a diversion to hide, or for relying on positional concealment (page 15). The penalty is reduced by the number of ranks in Stealth you possess instead if that is higher. You abandon the approach when you break Stealth." uniqueness="useronce">
    <usesource source="pPF1e_Sph_Guile"/>
    <tag group="SoGSphere" tag="Infiltration"/>
    <tag group="SoGTlClass" tag="InitTalent"/>
    <tag group="SoGTlClass" tag="Talent"/>
    </thing>
  <thing id="sogTlSkilledSneak" name="Skilled Sneak" compset="SoGTalent" description="You gain Stealth as an additional associated skill for this sphere (gaining ranks normally)." summary="Gain Stealth as an additional associated skill." uniqueness="useronce">
    <usesource source="pPF1e_Sph_Guile"/>
    <tag group="SoGSphere" tag="Infiltration"/>
    <tag group="SoGTlClass" tag="Talent"/>
    <tag group="SoGTalDesc" tag="Utility"/>
    <eval phase="First" priority="103">perform hero.childfound[sogTlSpInfiltrati].assign[SoGAssocSk.skStealth]</eval>
    </thing>
  <thing id="sogSpInvestigatio" name="Investigation Sphere" compset="SoGSphere" uniqueness="unique">
    <usesource source="pPF1e_Sph_Guile"/>
    <tag group="SoGSphere" tag="Investigation" name="Investigation"/>
    </thing>
  <thing id="resSGSEInvestigat" name="Bonus Investigation Talents" compset="Resource" panellink="tbSoGInvestigation">
    <fieldval field="resObject" value="Bonus Investigation Talents"/>
    <usesource source="pPF1e_Sph_Guile"/>
    <tag group="SoGSphere" tag="Investigation"/>
    <tag group="SoGBonTal" tag="Investigation"/>
    <eval phase="Final">~ Add bonus talents
        field[resMax].value += hero.tagcount[SoGBonTal.Investigation]</eval>
    <eval phase="Final" priority="999999999999" index="2"><![CDATA[
        ~ If we have any bonus talents, show the sphere tab
        if (field[resMax].value > 0) then
          perform pulltags[SoGBonTal.?,SoGSphTab]
          perform hero.pushtags[SoGSphTab.?]
        endif]]></eval>
    </thing>
  <thing id="sogTlHdInv" name="{align center}Investigation" compset="SoGTalent" isshowonly="yes">
    <tag group="SoGSphere" tag="Investigation"/>
    <tag group="SoGTlClass" tag="GainSphere"/>
    </thing>
  <thing id="sogTlSpInvestigat" name="Investigation Sphere" compset="SoGTalent" description="Operatives of the Investigation sphere are trained to pick up subtle and esoteric details about the world around them. They can glean information from the tiniest clues.\n\n{b}Associated Skill{/b}: Sense Motive.\n\nYou gain the following benefits when you gain the Investigation sphere:\n\nYou gain 5 ranks in Sense Motive, plus 5 ranks per additional talent spent in the Investigation sphere (maximum ranks equal to your Hit Dice). If you already have ranks in the associated skill not from a skill sphere, you may immediately retrain them. You do not gain excess ranks until you are a high enough level to put them in the associated skill; they cannot be spent on other skills. You do not gain or retrain ranks when you temporarily gain a talent.\n\n{b}Skill Leverage{/b}: You unlock skill leverage with the Perception and Sense Motive skills.\n\nYou also acquire the Analyze and Scrutinize abilities." summary="Gain access to the Investigation Sphere." panellink="tbSoGInvestigation" uniqueness="useronce">
    <usesource source="pPF1e_Sph_Guile"/>
    <tag group="SoGSphere" tag="Investigation"/>
    <tag group="SoGAssocSk" tag="skSenseMot"/>
    <tag group="SkLeverage" tag="skPercep"/>
    <tag group="SkLeverage" tag="skSenseMot"/>
    <tag group="SoGTlClass" tag="GainSphere" name="Sphere access" abbrev="Sphere access"/>
    <tag group="Helper" tag="AlwaysAvl" name="AlwaysAvl" abbrev="AlwaysAvl"/>
    <bootstrap thing="sogSpInvestigatio"></bootstrap>
    <bootstrap thing="sogTlAnalyze">
      <containerreq phase="First" priority="500">!SoGBanTal.sogTlAnalyze</containerreq>
      </bootstrap>
    <bootstrap thing="sogTlEducHunch">
      <containerreq phase="First" priority="500">!SoGBanTal.sogTlEducHunch</containerreq>
      </bootstrap>
    <bootstrap thing="sogTlRevealEvi">
      <containerreq phase="First" priority="500">!SoGBanTal.sogTlRevealEvi</containerreq>
      </bootstrap>
    <bootstrap thing="sogTlScrutinize">
      <containerreq phase="First" priority="500">!SoGBanTal.sogTlScrutinize</containerreq>
      </bootstrap>
    </thing>
  <thing id="sogTlAnalyze" name="Analyze" compset="SoGTalent" description="As a swift action, you can analyze a creature, object, or area that you can see within close range, choosing an (analyze) talent and attempting a skill check using any of the talent's analyze skills against a DC (or opposed check) as listed within the talent. If you succeed, you gain a simple analysis from the target, whereas if you fail, you gain a flawed analysis. A flawed analysis yields similar information to a simple analysis, but fundamentally flawed -- it might be inconsistent, mostly false with a hint of truth, or an exaggeration or understatement.\n\nYou can instead use analyze as a standard action to attempt to gain more information than a simple analysis. If you exceed the analyze DC by the listed amount, you can spend 1 use of skill leverage or outwit them as a cost to gain a detailed analysis instead of a simple analysis.\n\nOnce you attempt to use a specific (analyze) talent against a target or subject, you cannot do so again for 30 minutes. You cannot attempt to retry an analyze attempt against the same topic or detail (just like the Sense Motive skill). The GM may alter a talent's analyze skill or DC depending on the situation, such as a skill not being applicable or disadvantageous circumstances (such as distance or environment).\n\nYou gain the Educated Hunch (analyze) talent when you gain the Investigation sphere.\n\n{b}Special{/b}: If you have been blinded for long enough to overcome some of the condition's drawbacks, you also gain Auditory Analysis as a bonus talent." uniqueness="useronce">
    <usesource source="pPF1e_Sph_Guile"/>
    <tag group="SoGSphere" tag="Investigation"/>
    <tag group="SoGTlClass" tag="InitTalent"/>
    <tag group="SoGTlClass" tag="Talent"/>
    </thing>
  <thing id="sogTlScrutinize" name="Scrutinize" compset="SoGTalent" description="You may adopt this approach as a swift action, designating either a 10-foot square or a single creature or object that you can see to scrutinize. You gain a +2 insight bonus to Perception and Sense Motive checks attempted against the scrutinized target (or actions taken within the area), increasing by 1 per 5 ranks in the associated skill you possess.\n\nAdditionally, if you scrutinize a target for at least 3 consecutive rounds, you also treat any roll of a 4 or lower on such checks as if you had rolled a 5 instead.\n\nIf you can no longer see the designated target or area, you abandon the approach." uniqueness="useronce">
    <usesource source="pPF1e_Sph_Guile"/>
    <tag group="SoGSphere" tag="Investigation"/>
    <tag group="SoGTlClass" tag="InitTalent"/>
    <tag group="SoGTlClass" tag="Talent"/>
    <tag group="SoGTalDesc" tag="Approach"/>
    </thing>
  <thing id="sogTlEducHunch" name="Educated Hunch (analyze)" compset="SoGTalent" description="{b}Analyze Skills{/b}: Sense Motive;\n{b}Analyze DC{/b}: 20\n\nYou analyze a 30-foot cube area centered within range, gaining a vague feeling or impression from something within the area. You must dictate the subject of your analysis, but it can be a place, person, group, or situation. The GM is the final arbiter as to what is a suitable target.\n\n{b}Simple{/b}: You gain a hunch about your subject, learning whether something feels off or wrong about them, otherwise functioning as the get a hunch Sense Motive skill use. Generally, something `feeling off` could vary greatly, such as an individual being disguised or having bad intentions, an object of great power (regardless of its functions), or even a close friend who is nervous or keeping a recently told secret. You do not learn why the subject is suspicious--only whether it is or not.\n\n{b}Detailed (+5 DC){/b}: As a simple analysis, but you gain either a `good`, `bad`, `good and bad` or `neutral` impression. The definition of what is a `good` or `bad` impression should be left up to the GM, but should generally be associated with your own motivations and ideals. For example, a disguised guard and a disguised assassin using this talent on one another would both gain a `bad` impression." uniqueness="useronce">
    <usesource source="pPF1e_Sph_Guile"/>
    <tag group="SoGSphere" tag="Investigation"/>
    <tag group="SkillNeeded" tag="skSenseMot"/>
    <tag group="SoGTlClass" tag="InitTalent"/>
    <tag group="SoGTlClass" tag="Talent"/>
    <tag group="SoGTalDesc" tag="Analyze"/>
    </thing>
  <thing id="sogTlRevealEvi" name="Reveal Evidence" compset="SoGTalent" description="You can outwit an opponent by sharing evidence of one of their secrets. Suitable secrets include private motivations and anything they don’t want widely known. You must not have shared evidence of that secret with them before." uniqueness="useronce">
    <usesource source="pPF1e_Sph_Guile"/>
    <tag group="SoGSphere" tag="Investigation"/>
    <tag group="SoGTlClass" tag="InitTalent"/>
    <tag group="SoGTlClass" tag="Talent"/>
    </thing>
  <thing id="sogTlInferConnect" name="Infer Connection" compset="SoGTalent" description="Analyze Skills: Diplomacy or Sense Motive;\nAnalyze DC: 10 + the target's Diplomacy, Bluff, or Will save modifier (whichever is higher).\n\nYou analyze the target's attitude and association towards either a specific creature, a group of similar creatures, or an organization that they are interacting with, discerning their social standing within society." summary="You analyze the target's attitude and association towards either a specific creature, a group of similar creatures, or an organization that they are interacting with, discerning their social standing within society." uniqueness="useronce">
    <usesource source="pPF1e_Sph_Guile"/>
    <tag group="SoGSphere" tag="Investigation"/>
    <tag group="SkillNeeded" tag="skDiplo"/>
    <tag group="SkillNeeded" tag="skSenseMot"/>
    <tag group="SoGTlClass" tag="Talent"/>
    <tag group="SoGTalDesc" tag="Analyze"/>
    <tag group="SoGTalDesc" tag="Utility"/>
    </thing>
  <thing id="sogDbUnorthodoxMe" name="Unorthodox Methods" compset="SoGDrawbk" description="You do not commonly use deduction and awareness to discern information, opting for more specific approaches.\n\nWhen using your analyze ability, you cannot use Perception or Sense Motive as an analyze skill. If the talent does not have any alternative skills, you may not use the talent.\n\nYou gain an (analyze) talent that has an analyze skill other than Perception or Sense Motive. Choose one of those other analyze skills; that skill is your associated skill for the Investigation sphere." summary="You do not commonly use deduction and awareness to discern information, opting for more specific approaches." panellink="tbSoGInvestigation" uniqueness="useronce">
    <comment>TODO need to update to use SoGBonusTl tags instead of manually doing this.</comment>
    <fieldval field="usrCandid1" value="component.SoGTalent &amp; SoGSphere.Investigation &amp; SoGTalDesc.Analyze"/>
    <fieldval field="usrCandid2" value="component.BaseSkill"/>
    <usesource source="pPF1e_Sph_Guile"/>
    <tag group="SoGSphere" tag="Investigation"/>
    <tag group="SoGTlClass" tag="AltStart"/>
    <tag group="ChooseSrc1" tag="Hero"/>
    <tag group="Helper" tag="AlwaysAvl" name="AlwaysAvl" abbrev="AlwaysAvl"/>
    <tag group="Hide" tag="Activation"/>
    <tag group="User" tag="NoAutoName"/>
    <eval phase="First" name="Disable analyze talents invalid with Unorthodox Methods."><![CDATA[     ~ do nothing if disabled
     doneif (tagis[Helper.SpcDisable] <> 0)

~ TODO Is there a way to use a SoGTalDesc.Unorthodox tag to make this easier?

     var candid1 as string
     var candid2 as string
     foreach pick in hero from SoGTalent where "SoGSphere.Investigation & SoGTalDesc.Analyze & (SkillNeeded.skPercep | SkillNeeded.skSenseMot)"
          if ((eachpick.tagis[SkillNeeded.skPercep] + eachpick.tagis[SkillNeeded.skSenseMot]) > 0) then
               if (tagis[SphOfGuil.DBBuyoff] = 0) then
                    perform eachpick.delete[SkillNeeded.skPercep]
                    perform eachpick.delete[SkillNeeded.skSenseMot]
               endif
          endif
          if (eachpick.tagcount[SkillNeeded.?] = 0) then
               if (tagis[SphOfGuil.DBBuyoff] = 0) then
                    perform eachpick.assign[Helper.SpcDisable]
                    perform eachpick.assign[Hide.All]
                    perform eachpick.assign[Hide.Activation]
                    perform eachpick.assign[Hide.Tracker]
                    perform eachpick.delete[User.Activation]
                    perform eachpick.delete[User.Tracker]
               endif
          elseif (eachpick.tagis[Helper.SpcDisable] = 0) then
               if (tagis[SphOfGuil.DBBuyoff] = 0) then
                    eachpick.field[DescAppend].text &= "{br}You may not use Perception or Sense Motive with this talent."
               endif
               if (empty(candid1) = 0) then
                    candid1 &= "|"
               endif
               candid1 &= "thingid." & eachpick.idstring
               if (empty(candid2) = 0) then
                    candid2 &= "|"
               endif
               candid2 &= replace(eachpick.tagids[SkillNeeded.?,"|"],"SkillNeeded","Reference",0)
          endif
     nexteach

     if (empty(candid1) = 0) then
          field[usrCandid1].text = candid1
     endif
     if (empty(candid2) = 0) then
          field[usrCandid2].text = candid2
     endif]]></eval>
    <eval phase="PostLevel" priority="1000"><![CDATA[      perform hero.findchild[SoGTalent,"SoGSphere.Investigation & SoGTlClass.GainSphere"].setfocus

      doneif (state.isfocus = 0)
      doneif (field[usrChosen1].ischosen = 0)
      doneif (field[usrChosen2].ischosen = 0)

      ~ Delete the default
      doneif (focus.tagis[SoGAssocSk.skSenseMot] = 0)
      perform focus.delete[SoGAssocSk.skSenseMot]

      perform focus.assignstr["SoGAssocSk." & field[usrChosen2].chosen.idstring]]]>
      <before name="Set Sphere Effective Level"/>
      <before name="Apply free ranks for associated skills SoG"/>
      <after name="Assign initial Associated Skill"/>
      </eval>
    <evalrule phase="Final" priority="2147483647" message="You have invalid choices. "><![CDATA[     ~ You must add an (analyze) talent that has an analyze skill other than Perception or Sense Motive.

     ~ Ignore if disabled
     validif (tagis[Helper.SpcDisable] <> 0)

     @valid = 1
     if (field[usrChosen1].ischosen = 0) then
          @valid = 0
          @message &= "You must choose an (analyze) talent. "
     elseif (field[usrChosen2].ischosen = 0) then
          @valid = 0
          @message &= "You must choose a skill needed for the talent. "
     elseif (field[usrChosen1].chosen.tagids[SkillNeeded.?,"|"] = 0) then
          @valid = 0
          @message &= "The talent must need a skill other than Perception or Sense Motive. "
     elseif (field[usrChosen1].chosen.tagis[SoGTalDesc.Analyze] = 0) then
          @valid = 0
          @message &= "The talent must be an (analyze) talent. "
     endif

     perform field[usrChosen2].chosen.setfocus
     if (state.isfocus = 0) then
          @valid = 0
          @message &= "The skill must be one chosen on the hero. "
     endif
     perform field[usrChosen1].chosen.setfocus
     if (state.isfocus = 0) then
          @valid = 0
          @message &= "The talent must be one chosen on the hero. "
     else
          ~ Pull SkillNeeded from chosen to Unorthodox Methods
          perform focus.pulltags[SkillNeeded.?]
          ~ Switch to the skill
          perform field[usrChosen2].chosen.setfocus
     
          if (focus.intersect[Reference,SkillNeeded] = 0) then
               @valid = 0
               @message &= "The skill must be an option on the talent. "
          else
               ~ if found, mark as our selection and we're valid
               perform focus.assign[SoGTlClass.InitTalent]
               @valid = 1
               done
          endif
     endif]]></evalrule>
    </thing>
  <thing id="sogSpNavigation" name="Navigation Sphere" compset="SoGSphere" uniqueness="unique">
    <usesource source="pPF1e_Sph_Guile"/>
    <tag group="SoGSphere" tag="Navigation" name="Navigation"/>
    </thing>
  <thing id="resSGSENavigation" name="Bonus Navigation Talents" compset="Resource" panellink="tbSoGNavigation">
    <fieldval field="resObject" value="Bonus Navigation Talents"/>
    <usesource source="pPF1e_Sph_Guile"/>
    <tag group="SoGSphere" tag="Navigation"/>
    <tag group="SoGBonTal" tag="Navigation"/>
    <eval phase="Final">~ Add bonus talents
        field[resMax].value += hero.tagcount[SoGBonTal.Navigation]</eval>
    <eval phase="Final" priority="999999999999" index="2"><![CDATA[
        ~ If we have any bonus talents, show the sphere tab
        if (field[resMax].value > 0) then
          perform pulltags[SoGBonTal.?,SoGSphTab]
          perform hero.pushtags[SoGSphTab.?]
        endif]]></eval>
    </thing>
  <thing id="resSGPkNavigation" name="Navigation Packages" compset="Resource" panellink="tbSoGNavigation">
    <fieldval field="resObject" value="Navigation Packages"/>
    <usesource source="pPF1e_Sph_Guile"/>
    <tag group="SoGSphere" tag="Navigation"/>
    <tag group="SoGPackage" tag="Navigation"/>
    </thing>
  <thing id="sogTlHdNav" name="{align center}Navigation" compset="SoGTalent" isshowonly="yes">
    <tag group="SoGSphere" tag="Navigation"/>
    <tag group="SoGTlClass" tag="GainSphere"/>
    </thing>
  <thing id="sogTlSpNavigation" name="Navigation Sphere" compset="SoGTalent" description="Operatives of the Navigation sphere learn to survive and operate in a wide variety of environments, studying their surroundings in order to best navigate or control them. They are skilled pathfinders and transporters, capable of finding the best route to any location and the best method of getting there. On a grand scale, an adventurer skilled in navigation can traverse any territory with ease, while in the heat of the moment their abilities enable impressive tactical maneuvers. \n\n{b}Associated Skill{/b}: One skill of your choice from your chosen package below.\n\nYou gain the following benefits when you gain the Navigation sphere.\n\nYou gain 5 ranks in one of the package's associated skills, plus 5 ranks per additional talent spent in the Navigation sphere (maximum ranks equal to your Hit Dice). If you already have ranks in the associated skill you may immediately retrain them.\n\n{b}Skill Leverage{/b}:You unlock skill leverage with the associated skills of your package.\n\n{b}Package{/b}: When you gain the Navigation sphere, you gain one of the following packages with its included acclimation. You may take the Expanded Wayfarer talent to gain additional packages.\n\nYou also acquire the Acclimate and Pathing abilities." summary="Gain access to the Navigation Sphere." panellink="tbSoGNavigation" uniqueness="useronce">
    <usesource source="pPF1e_Sph_Guile"/>
    <tag group="SoGSphere" tag="Navigation"/>
    <tag group="SoGTlClass" tag="GainSphere"/>
    <tag group="SoGTlClass" tag="UtilStart"/>
    <bootstrap thing="sogSpNavigation"></bootstrap>
    <bootstrap thing="sogTlAcclimate">
      <containerreq phase="First" priority="500">!SoGBanTal.sogTlAcclimate</containerreq>
      </bootstrap>
    <bootstrap thing="sogTlClearShot">
      <containerreq phase="First" priority="500">!SoGBanTal.sogTlPathing</containerreq>
      </bootstrap>
    <bootstrap thing="sogTlPathing">
      <containerreq phase="First" priority="500">!SoGBanTal.sogTlPathing</containerreq>
      </bootstrap>
    </thing>
  <thing id="sogTlAcclimate" name="Acclimate" compset="SoGTalent" description="By spending 10 minutes, you acclimate yourself and a number of allies or vehicles up to your operative ability modifier (minimum 1). You grant the benefits of up to two acclimations you know to them. If you grant two acclimations to a target (or more, by using the Layered Acclimation talent), at least one of these acclimations must always be from a base package or a [utility] (acclimation) talent. You may apply different acclimations to different targets. The benefits of acclimation last for 24 hours or until you change them." uniqueness="useronce">
    <tag group="SoGSphere" tag="Navigation"/>
    <tag group="SoGTlClass" tag="InitTalent"/>
    <tag group="SoGTlClass" tag="Talent"/>
    <tag group="AbilType" tag="Extra"/>
    </thing>
  <thing id="sogTlPathing" name="Pathing" compset="SoGTalent" description="Operatives of the Navigation sphere are able to point out paths through their environment that allies can utilize. As a standard action, you may select a number of contiguous 5-foot squares within close range equal to your operative ability modifier + the number of ranks you possess in the associated skill, applying the effects of a (pathing) talent to the area. You must be able to see all squares in the area to target them with pathing. An area remains affected for 24 hours or until you use this ability again. This is an auditory effect on your allies. You gain the Clear Shot (pathing) talent when you gain this sphere." uniqueness="useronce">
    <tag group="SoGSphere" tag="Navigation"/>
    <tag group="SoGTlClass" tag="InitTalent"/>
    <tag group="SoGTlClass" tag="Talent"/>
    <tag group="AbilType" tag="Extra"/>
    </thing>
  <thing id="sogTlClearShot" name="Clear Shot" compset="SoGTalent" description="Allies ignore any soft cover, partial cover, or partial concealment provided by objects or effects that are inside the area of your pathing but do not target individual creatures. Allies treat standard cover from inside the area as partial cover. In addition, their total penalties on Perception checks for observing targets within the area of your pathing are reduced by 2, plus an additional 1 for every 5 ranks you have in one of your associated skills. If you have at least 10 ranks in an associated skill, allies also treat total concealment as partial concealment." uniqueness="useronce">
    <tag group="SoGSphere" tag="Navigation"/>
    <tag group="SoGTlClass" tag="InitTalent"/>
    <tag group="SoGTlClass" tag="Talent"/>
    <tag group="SoGTalDesc" tag="Pathing"/>
    <tag group="AbilType" tag="Extra"/>
    </thing>
  <thing id="sogTlWeatherproof" name="Weatherproofing" compset="SoGTalent" description="Acclimated targets may treat the severity of all weather effects as one step lower for all purposes for 24 hours. For every 7 ranks you possess in your associated skill, they reduce the severity of weather effects by an additional step." uniqueness="useronce">
    <tag group="SoGSphere" tag="Navigation"/>
    <tag group="SoGTlClass" tag="InitTalent"/>
    <tag group="SoGTlClass" tag="Talent"/>
    </thing>
  <thing id="sogTlAquaticAdapt" name="Aquatic Adaptation" compset="SoGTalent" description="Acclimated targets ignore any penalties to attack rolls from being underwater (including allowing them to use thrown weapons normally underwater), can hold their breath for 2 additional rounds before having to attempt Constitution checks to avoid drowning, and gains a +1 competence bonus to Swim checks. This bonus and the duration of which creatures can hold their breath increases by +1 and 1 round respectively for every 2 ranks you possess in this package's associated skill. If you have at least 5 ranks in this package's associated skill, acclimated creatures also deal full damage with all weapon attacks while underwater. Acclimated vehicles reduce the DC of any Profession (sailor) check attempted to perform actions on them by 1, plus 1 per 4 ranks in this package's associated skill." uniqueness="useronce">
    <comment>TODO: Compute 2nd values in abValue2</comment>
    <tag group="SoGSphere" tag="Navigation"/>
    <tag group="SoGTlClass" tag="InitTalent"/>
    <tag group="SoGTlClass" tag="Talent"/>
    <tag group="SoGAbV1Sc" tag="1_2A"/>
    </thing>
  <thing id="sogTlCrowdManeuve" name="Crowd Maneuvers" compset="SoGTalent" description="Acclimated targets may move at their normal speed through crowds and occupied squares and do not provoke attacks of opportunity for moving through crowds. Additionally, acclimated targets can share spaces with one another (to a maximum of 2 creatures per space) and can run and charge through each other’s spaces." uniqueness="useronce">
    <tag group="SoGSphere" tag="Navigation"/>
    <tag group="SoGTlClass" tag="InitTalent"/>
    <tag group="SoGTlClass" tag="Talent"/>
    </thing>
  <thing id="sogTlConditioning" name="Conditioning" compset="SoGTalent" description="Acclimated targets gain a +2 competence bonus on saving throws against environmental hazards and weather effects. This includes Fortitude saves to avoid fatigue and nonlethal damage from hot or cold environments. For every 8 ranks you have in this package’s associated skills, the bonus to saving throws increases by +1." uniqueness="useronce">
    <fieldval field="abValue" value="2"/>
    <tag group="SoGSphere" tag="Navigation"/>
    <tag group="SoGTlClass" tag="InitTalent"/>
    <tag group="SoGTlClass" tag="Talent"/>
    <tag group="SoGAbV1Sc" tag="1_8A"/>
    </thing>
  <thing id="sogTlAerial" name="Aerial" compset="SoGTalent" description="You gain the following acclimation:\n\n    {b}Weatherproofing{/b}: Acclimated targets may treat the severity of all weather effects as one step lower for all purposes for 24 hours. For every 7 ranks you possess in your associated skill, they reduce the severity of weather effects by an additional step.\n\n{b}Associated Skill{/b}: Fly or Profession (pilot)." summary="Gain the aerial package" uniqueness="useronce">
    <fieldval field="usrCandid1" value="component.BaseSkill &amp; (thingid.skFly | thingid.skProfRPilot)"/>
    <usesource source="pPF1e_Sph_Guile" parent="pPF1e_Sph" name="Spheres of Guile"/>
    <tag group="SoGSphere" tag="Navigation"/>
    <tag group="SoGTlClass" tag="Package" name="Package" abbrev="Package"/>
    <tag group="SoGTalDesc" tag="NavAerial"/>
    <tag group="SoGIsPkg" tag="Aerial"/>
    <tag group="ChooseSrc1" tag="Hero"/>
    <tag group="Helper" tag="SpecUp" name="SpecUp" abbrev="SpecUp"/>
    <bootstrap thing="abSoGSkLeverage"></bootstrap>
    <bootstrap thing="sogTlWeatherproof">
      <containerreq phase="First" priority="500">!SoGBanTal.sogTlAerial</containerreq>
      </bootstrap>
    <eval phase="First" priority="103" name="Assign initial Associated Skill"><![CDATA[~ Get out if disabled
     doneif (tagis[Helper.SpcDisable] <> 0)
     ~ or if no choice made.
     doneif (field[usrChosen1].ischosen = 0)

     perform hero.childfound[sogTlSpNavigation].assignstr["SoGAssocSk." & field[usrChosen1].chosen.idstring]]]></eval>
    <eval phase="PostLevel" priority="1500" name="Assign initial Skill Leverage"><![CDATA[~ Get out if disabled
     doneif (tagis[Helper.SpcDisable] <> 0)
     ~ or a duplicate.
     doneif (tagis[Helper.FirstCopy] = 0)
     ~ or if no choice made.
     doneif (field[usrChosen1].ischosen = 0)

     perform hero.childfound[sogTlSpNavigation].assignstr["SkLeverage." & field[usrChosen1].chosen.idstring]]]></eval>
    </thing>
  <thing id="sogTlNautical" name="Nautical" compset="SoGTalent" description="You gain the following acclimation:\n\n    {b}Aquatic Adaptation{/b}: Acclimated targets ignore any penalties to attack rolls from being underwater (including allowing them to use thrown weapons normally underwater), can hold their breath for 2 additional rounds before having to attempt Constitution checks to avoid drowning, and gains a +1 competence bonus to Swim checks. This bonus and the duration of which creatures can hold their breath increases by +1 and 1 round respectively for every 2 ranks you possess in this package's associated skill. If you have at least 5 ranks in this package's associated skill, acclimated creatures also deal full damage with all weapon attacks while underwater. Acclimated vehicles reduce the DC of any Profession (sailor) check attempted to perform actions on them by 1, plus 1 per 4 ranks in this package's associated skill.\n\n{b}Associated Skill{/b}: Profession (sailor) or Swim." summary="Gain the nautical package" uniqueness="useronce">
    <fieldval field="usrCandid1" value="component.BaseSkill &amp; (thingid.skSwim | thingid.skProfSail)"/>
    <usesource source="pPF1e_Sph_Guile" parent="pPF1e_Sph" name="Spheres of Guile"/>
    <tag group="SoGSphere" tag="Navigation"/>
    <tag group="SoGTlClass" tag="Package" name="Package" abbrev="Package"/>
    <tag group="SoGTalDesc" tag="NavNautica"/>
    <tag group="SoGIsPkg" tag="Nautical"/>
    <tag group="ChooseSrc1" tag="Hero"/>
    <tag group="Helper" tag="SpecUp" name="SpecUp" abbrev="SpecUp"/>
    <bootstrap thing="abSoGSkLeverage"></bootstrap>
    <bootstrap thing="sogTlAquaticAdapt">
      <containerreq phase="First" priority="500">!SoGBanTal.sogTlNautical</containerreq>
      </bootstrap>
    <eval phase="First" priority="103" name="Assign initial Associated Skill"><![CDATA[~ Get out if disabled
     doneif (tagis[Helper.SpcDisable] <> 0)
     ~ or if no choice made.
     doneif (field[usrChosen1].ischosen = 0)

     perform hero.childfound[sogTlSpNavigation].assignstr["SoGAssocSk." & field[usrChosen1].chosen.idstring]]]></eval>
    <eval phase="PostLevel" priority="1500" name="Assign initial Skill Leverage"><![CDATA[~ Get out if disabled
     doneif (tagis[Helper.SpcDisable] <> 0)
     ~ or a duplicate.
     doneif (tagis[Helper.FirstCopy] = 0)
     ~ or if no choice made.
     doneif (field[usrChosen1].ischosen = 0)

     perform hero.childfound[sogTlSpNavigation].assignstr["SkLeverage." & field[usrChosen1].chosen.idstring]]]></eval>
    </thing>
  <thing id="sogTlUrban" name="Urban" compset="SoGTalent" description="You gain the following acclimation:\n\n    {b}Crowd Maneuvers{/b}: Acclimated targets may move at their normal speed through crowds and occupied squares and do not provoke attacks of opportunity for moving through crowds. Additionally, acclimated targets can share spaces with one another (to a maximum of 2 creatures per space) and can run and charge through each other’s spaces.\n\n{b}Associated Skill{/b}: Acrobatics or Climb." summary="Gain the urban package" panellink="tbSoGNavigation" uniqueness="useronce">
    <fieldval field="usrCandid1" value="component.BaseSkill &amp; (thingid.skClimb | thingid.skAcrobat)"/>
    <usesource source="pPF1e_Sph_Guile" parent="pPF1e_Sph" name="Spheres of Guile"/>
    <tag group="SoGSphere" tag="Navigation"/>
    <tag group="SoGTlClass" tag="Package" name="Package" abbrev="Package"/>
    <tag group="SoGTalDesc" tag="NavUrban"/>
    <tag group="SoGIsPkg" tag="Urban"/>
    <tag group="ChooseSrc1" tag="Hero"/>
    <tag group="Helper" tag="SpecUp" name="SpecUp" abbrev="SpecUp"/>
    <bootstrap thing="abSoGSkLeverage"></bootstrap>
    <bootstrap thing="sogTlCrowdManeuve">
      <containerreq phase="First" priority="500">!SoGBanTal.sogTlUrban</containerreq>
      </bootstrap>
    <eval phase="First" priority="103" name="Assign initial Associated Skill"><![CDATA[~ Get out if disabled
     doneif (tagis[Helper.SpcDisable] <> 0)
     ~ or if no choice made.
     doneif (field[usrChosen1].ischosen = 0)

     perform hero.childfound[sogTlSpNavigation].assignstr["SoGAssocSk." & field[usrChosen1].chosen.idstring]]]></eval>
    <eval phase="PostLevel" priority="1500" name="Assign initial Skill Leverage"><![CDATA[~ Get out if disabled
     doneif (tagis[Helper.SpcDisable] <> 0)
     ~ or a duplicate.
     doneif (tagis[Helper.FirstCopy] = 0)
     ~ or if no choice made.
     doneif (field[usrChosen1].ischosen = 0)

     perform hero.childfound[sogTlSpNavigation].assignstr["SkLeverage." & field[usrChosen1].chosen.idstring]]]></eval>
    </thing>
  <thing id="sogTlWilderness" name="Wilderness" compset="SoGTalent" description="You gain the following acclimation:\n\n    {b}Conditioning{/b}: Acclimated targets gain a +2 competence bonus on saving throws against environmental hazards and weather effects. This includes Fortitude saves to avoid fatigue and nonlethal damage from hot or cold environments. For every 8 ranks you have in this package’s associated skills, the bonus to saving throws increases by +1.\n\n{b}Associated Skill{/b}: Climb, Profession (guide), Profession (driver), or Survival." summary="Gain the wilderness package" uniqueness="useronce">
    <fieldval field="usrCandid1" value="component.BaseSkill &amp; (thingid.skClimb | thingid.skSurvival | thingid.skProfDriv | thingid.skProfRGuide)"/>
    <usesource source="pPF1e_Sph_Guile" parent="pPF1e_Sph" name="Spheres of Guile"/>
    <tag group="SoGSphere" tag="Navigation"/>
    <tag group="SoGTlClass" tag="Package" name="Package" abbrev="Package"/>
    <tag group="SoGTalDesc" tag="NavWildern"/>
    <tag group="SoGIsPkg" tag="Wilderness"/>
    <tag group="ChooseSrc1" tag="Hero"/>
    <tag group="Helper" tag="SpecUp" name="SpecUp" abbrev="SpecUp"/>
    <bootstrap thing="abSoGSkLeverage"></bootstrap>
    <bootstrap thing="sogTlConditioning">
      <containerreq phase="First" priority="500">!SoGBanTal.sogTlWilderness</containerreq>
      </bootstrap>
    <eval phase="First" priority="103" name="Assign initial Associated Skill"><![CDATA[~ Get out if disabled
     doneif (tagis[Helper.SpcDisable] <> 0)
     ~ or if no choice made.
     doneif (field[usrChosen1].ischosen = 0)

     perform hero.childfound[sogTlSpNavigation].assignstr["SoGAssocSk." & field[usrChosen1].chosen.idstring]]]></eval>
    <eval phase="PostLevel" priority="1500" name="Assign initial Skill Leverage"><![CDATA[~ Get out if disabled
     doneif (tagis[Helper.SpcDisable] <> 0)
     ~ or a duplicate.
     doneif (tagis[Helper.FirstCopy] = 0)
     ~ or if no choice made.
     doneif (field[usrChosen1].ischosen = 0)

     perform hero.childfound[sogTlSpNavigation].assignstr["SkLeverage." & field[usrChosen1].chosen.idstring]]]></eval>
    </thing>
  <thing id="sogTlTerrainAdvan" name="Terrain Advantage" compset="SoGTalent" description="Allies within your {i}pathing{/i} increase any bonuses to AC or attack rolls from cover, higher ground or being prone by 2 and reduce penalties to AC or attack rolls from squeezing or being prone by 2." uniqueness="useronce">
    <usesource source="pPF1e_Sph_Guile"/>
    <tag group="SoGSphere" tag="Navigation"/>
    <tag group="SoGTlClass" tag="Talent"/>
    <tag group="SoGTalDesc" tag="Pathing"/>
    </thing>
  <thing id="sogTlMaritimeAccl" name="Maritime Acclimatization" compset="SoGTalent" description="You may select the following acclimation benefits:\n\n    * {b}Depth Stalker{/b}: Acclimated targets can see twice as far the normal distance underwater–if they have darkvision, its range is doubled when underwater. Also, acclimated targets gain a +2 competence bonus to saving throws against effects with the water descriptor, or exceptional or supernatural abilities of creatures with the aquatic or water subtype.\nIf you possess the (nautical) package, acclimated targets also gain tremorsense for up to 10 feet (except only allowing them to detect anything in contact with the same body of water as them). If the target possesses a similar form of tremorsense (such as the Adept Hunter Vocation talent, or the courser’s forage ability), the range increases by +10 feet.\n\n    * {b}Tide Strider{/b}: Acclimated targets that succeed at a Swim check can move their full speed as a full-round action, or half their speed as a move action. If they already possess a swim speed, it increases by 10 feet. Additionally, whenever they are moved by a current, they can increase or decrease the movement by 50%.\n    If you possess the (nautical) package, acclimated targets can also run, charge, and 5-foot step while swimming. Additionally, such targets can change their buoyancy between rising, neutral, or sinking as a free action once per round (instead of a move action), and they are not off-balanced while sinking or rising due to their buoyancy." uniqueness="useronce">
    <comment>TODO show increased range and speed?</comment>
    <usesource source="pPF1e_DRS_InvIng"/>
    <usesource source="pPF1e_Sph_Guile"/>
    <tag group="SoGSphere" tag="Navigation"/>
    <tag group="SoGTlClass" tag="Talent"/>
    <tag group="SoGTalDesc" tag="Acclimatio"/>
    </thing>
  <thing id="sogTlCommunityAwa" name="Community Awareness" compset="SoGTalent" description="You may select the following acclimation benefits:\n\n    * {b}Pocket Sense{/b}: Acclimated targets gain a +2 bonus on Perception checks made against Sleight of Hand checks, +1 per 5 associated ranks. Additionally, whenever such a creature has an object stolen from them, they become aware of the theft 3 rounds afterwards unless the creature exceeded the DC to steal the object by 5 or more.\n    If you possess the (urban) package, this changes to 1 round afterwards unless the creature exceeds the DC by 10.\n\n    * {b}Idiosyncratic Adaptation{/b}: Acclimated targets become aware of their own cultural and personal mannerisms and idiosyncrasies, and versed in the arts of others as well. Such creatures gain a +2 circumstance bonus to Knowledge (history), Knowledge (local), and Knowledge (nobility) checks, +1 per 5 associated ranks, and are considered trained in these skills.\n    If you possess the (urban) package, this bonus increases by 1. The circumstance bonus is doubled when attempting to recall information about any topics or actions that may particularly negatively or positively affect their standing with a specific creature or group (such as a cultural group or faction)." uniqueness="useronce">
    <fieldval field="abValue" value="2"/>
    <usesource source="pPF1e_DRS_InvIng"/>
    <usesource source="pPF1e_Sph_Guile"/>
    <tag group="SoGSphere" tag="Navigation"/>
    <tag group="SoGTlClass" tag="Talent"/>
    <tag group="SoGTalDesc" tag="Acclimatio"/>
    <tag group="SoGAbV1Sc" tag="1_5A"/>
    <tag group="LvNamePar" tag="AppText"/>
    <eval phase="Render" priority="400"><![CDATA[~ Get out if disabled
  doneif (tagis[Helper.SpcDisable] <> 0)

  var rounds as string
  var adapt as number

  ~ Do we have the Urban package?
  if (hero.tagis[HasAbility.sogTlUrban] <> 0) then
    rounds = "1 rnd, "
    adapt = field[abValue].value + 1
  else
    rounds = "3 rnds, "
    adapt = field[abValue].value
  endif

  field[abText].text = signed(field[abValue].value) & " Sense " & rounds & adapt & " Adapt"]]></eval>
    </thing>
  <thing id="sogTlBlazeAhead" name="Blaze Ahead" compset="SoGTalent" description="Allies within your {i}pathing{/i} reduce the DC of Climb, Fly, and Swim checks attempted to move through the area of your pathing and the DC of Acrobatics checks attempted to cross narrow or uneven surfaces in your {i}pathing{/i} by 5. If you have 10 or more ranks in one of your associated skills, this reduction increases to 10." uniqueness="useronce">
    <usesource source="pPF1e_Sph_Guile"/>
    <tag group="SoGSphere" tag="Navigation"/>
    <tag group="SoGTlClass" tag="Talent"/>
    <tag group="SoGTalDesc" tag="Pathing"/>
    <tag group="SoGTalDesc" tag="Utility"/>
    <tag group="SoGAbV1Sc" tag="1_1A"/>
    <tag group="LvNamePar" tag="AppValue"/>
    <eval phase="Render" priority="400">~ Get out if disabled
  doneif (tagis[Helper.SpcDisable] &lt;> 0)

  ~ by 5. If you have 10 or more ranks … increases to 10.
  if (field[abValue].value >= 10) then
    field[abValue].value = 10
  else
    field[abValue].value = 5
  endif</eval>
    </thing>
  <thing id="sogTlWildWit" name="Wild Wit" compset="SoGTalent" description="You may select the following acclimation benefits:\n\n    * {b}Natural Shroud{/b}: Acclimated targets can spend 1 minute to cover themselves in loose parts of the terrain surrounding them (such as branches, dirt, snow, etc) and take 20 on a Stealth check. This causes the creature to be prone and be considered to have concealment for Stealth checks until they move or stand up. The creature can burst from their hiding place when they (or their allies) start a surprise round, allowing them to stand up as a free action and take a full-round worth of actions during the surprise round, as well as granting them a +2 circumstance bonus to the subsequent initiative check (if any).\nIf you possess the (wilderness) package, the first successful attack made by each creature during this surprise round deals an additional amount of precision damage equal to your associated ranks.\n\n    * {b}Terrain Sense{/b}: Acclimated targets can see twice as far as normal in fog, mist, murky water, vegetation, and similar environmental-based obscurement, and creatures adjacent to them never gain concealment from such obscurements.\nIf you possess the (wilderness) package, such creatures also gain a +1 cover bonus to their AC whenever they are adjacent to a tree (including while climbing), or are treated as if they were standing in the same square as a tree if they are adjacent to two or more trees simultaneously (which grants partial cover). Lastly, when you are in a tree, you count as having a running start when you jump.\n\n{b}Associated Feat{/b}: Forester (Ultimate Wilderness), Forest Ambush (Heroes of the Wild)." uniqueness="useronce">
    <comment>wilderness) package = +ranks damage</comment>
    <usesource source="pPF1e_DRS_InvIng"/>
    <usesource source="pPF1e_Sph_Guile"/>
    <tag group="SoGSphere" tag="Navigation"/>
    <tag group="SoGTlClass" tag="Talent"/>
    <tag group="SoGTalDesc" tag="Acclimatio"/>
    <tag group="SoGAbV1Sc" tag="1_1A"/>
    <tag group="LvNamePar" tag="AppText"/>
    <tag group="HasFeat" tag="fForAmbush"/>
    <tag group="HasFeat" tag="fForester"/>
    <eval phase="Render" priority="400"><![CDATA[~ Get out if disabled
  doneif (tagis[Helper.SpcDisable] <> 0)

  var rounds as string
  var adapt as number

  ~ Do we have the Wilderness package?
  if (hero.tagis[HasAbility.sogTlWilderness] <> 0) then
    field[abText].text = signed(field[abValue].value) & " precision"
  endif]]></eval>
    </thing>
  <thing id="sogTlBlindspottin" name="Blindspotting" compset="SoGTalent" description="Allies within your {i}pathing{/i} are considered to have positional concealment for the purpose of attempting Stealth checks to hide so long as they are in the area of your {i}pathing{/i}." uniqueness="useronce">
    <usesource source="pPF1e_Sph_Guile"/>
    <tag group="SoGSphere" tag="Navigation"/>
    <tag group="SoGTlClass" tag="Talent"/>
    <tag group="SoGTalDesc" tag="Pathing"/>
    </thing>
  <thing id="sogDbFocusedWayfa" name="Focused Wayfaring" compset="SoGDrawbk" description="Choose either acclimate or pathing. You lose this ability and cannot take talents with that tag or that alter the chosen ability. You gain a single (acclimation) or (pathing) talent as a bonus talent." summary="Trade acclimate or pathing for a bonus talent in the ability you keep." panellink="tbSoGNavigation" uniqueness="useronce">
    <fieldval field="usrCandid1" value="component.SoGTalent &amp; (thingid.sogTlAcclimate | thingid.sogTlPathing)"/>
    <usesource source="pPF1e_Sph_Guile" parent="pPF1e_Sph" name="Spheres of Guile"/>
    <tag group="SoGSphere" tag="Navigation"/>
    <tag group="ChooseSrc1" tag="Thing"/>
    <eval phase="First"><![CDATA[~ Do nothing if disabled.
  doneif (tagis[Helper.SpcDisable] <> 0)
  ~ Or if nothing chosen.
  doneif (field[usrChosen1].ischosen = 0)

  ~ Assign SoGBanTal.? for the chosen.
  perform assignstr["SoGBanTal." & field[usrChosen1].chosen.idstring]

  ~ Ban the one chose, bonus the other.
  if (field[usrChosen1].chosen.tagis[SoGBanTal.sogTlPathing] <> 0) then
    perform assign[SoGBanDesc.Pathing]
    perform assign[SoGFreeTal.Acclimatio]
  else
    perform assign[SoGBanDesc.Acclimatio]
    perform assign[SoGFreeTal.Pathing]
  endif]]></eval>
    </thing>
  <thing id="sogSpPerformanc" name="Performance Sphere" compset="SoGSphere" uniqueness="unique">
    <usesource source="pPF1e_Sph_Guile"/>
    <tag group="SoGSphere" tag="Performance" name="Performance"/>
    </thing>
  <thing id="resSGPkPerformanc" name="Performance Packages" compset="Resource" panellink="tbSoGPerformanc">
    <fieldval field="resObject" value="Performance Packages"/>
    <usesource source="pPF1e_Sph_Guile"/>
    <tag group="SoGSphere" tag="Performance"/>
    <tag group="SoGPackage" tag="Performance"/>
    </thing>
  <thing id="resSGSEPerformanc" name="Bonus Performance Talents" compset="Resource" panellink="tbSoGPerformanc">
    <fieldval field="resObject" value="Bonus Performance Talents"/>
    <usesource source="pPF1e_Sph_Guile"/>
    <tag group="SoGSphere" tag="Performance"/>
    <tag group="SoGBonTal" tag="Performance"/>
    <eval phase="Final">~ Add bonus talents
        field[resMax].value += hero.tagcount[SoGBonTal.Performance]</eval>
    <eval phase="Final" priority="999999999999" index="2"><![CDATA[
        ~ If we have any bonus talents, show the sphere tab
        if (field[resMax].value > 0) then
          perform pulltags[SoGBonTal.?,SoGSphTab]
          perform hero.pushtags[SoGSphTab.?]
        endif]]></eval>
    </thing>
  <thing id="sogTlHdPer" name="{align center}Performance" compset="SoGTalent" isshowonly="yes">
    <tag group="SoGSphere" tag="Performance"/>
    <tag group="SoGTlClass" tag="GainSphere"/>
    </thing>
  <thing id="sogTlSpPerformanc" name="Performance Sphere" compset="SoGTalent" description="Operatives of the Performance sphere are creators of various creative endeavors, be it brilliant ballads, complex choreography, or musical melodies; a performer’s ability to draw the eye and instill hope and emotion into those around them is astounding.\n\n{b}Associated Skill{/b}: Perform (depending on your chosen package below).\n\nYou gain the following benefits when you gain the Performance sphere.\n\nWhen you gain a package, you choose one of the package’s associated skills to determine the effects of its talents, and you gain 5 ranks in the chosen associated skill, plus 5 ranks per additional talent spent in the Performance sphere (maximum ranks equal to your Hit Dice). If you already have ranks in the associated skill you may immediately retrain them.\n\n{b}Skill Leverage{/b}: You unlock skill leverage with the Perform skill chosen as your package’s associated skill, in addition to one Artistry or Perform skill of your choice.\n\n{b}Package{/b}: When you gain the Performance sphere, you gain one of the following packages with its included abilities. You choose one of the package’s associated skills to be the associated skill for that package and its effects. You may take the Expanded Repertoire talent to gain additional packages.\n\n{b}Bonus Talent{/b}: You gain a single (act), (dance), (instrumental), or (lyric) talent, depending on the package you chose. It cannot be an exceptional talent. If the bonus talent you choose is a [utility] talent, you can take the base sphere as a [utility] talent." summary="Gain access to the Performance Sphere." panellink="tbSoGPerformanc" uniqueness="useronce">
    <fieldval field="usrCandid1" value="component.BaseSkill &amp; Helper.SkCatPerf|Helper.SkCatArt"/>
    <fieldval field="usrCandid2" value="component.SoGTalent &amp; SoGTlClass.Package &amp; SoGSphere.Performance"/>
    <usesource source="pPF1e_Sph_Guile" parent="pPF1e_Sph" name="Spheres of Guile"/>
    <tag group="SoGSphere" tag="Performance" name="Performance" abbrev="Performance"/>
    <tag group="SoGTlClass" tag="GainSphere" name="Sphere Access" abbrev="Sphere Access"/>
    <tag group="SoGTlClass" tag="UtilStart" name="Utility Start" abbrev="Utility Start"/>
    <tag group="ChooseSrc1" tag="Hero" name="All Picks on Hero" abbrev="All Picks on Hero"/>
    <tag group="ChooseSrc2" tag="Hero"/>
    <tag group="User" tag="NoAutoName"/>
    <bootstrap thing="sogSpPerformanc"></bootstrap>
    <eval phase="PostLevel" priority="1500" name="Assign initial Skill Leverage"><![CDATA[~ Get out if disabled
     doneif (tagis[Helper.SpcDisable] <> 0)
     ~ or a duplicate.
     doneif (tagis[Helper.FirstCopy] = 0)
     ~ or if no choice made.
     doneif (field[usrChosen1].ischosen = 0)

     perform assignstr["SkLeverage." & field[usrChosen1].chosen.idstring]]]></eval>
    <eval phase="First" priority="450"><![CDATA[~ Do nothing if disabled.
  doneif (tagis[Helper.SpcDisable] <> 0)
  ~ Or if nothing chosen.
  doneif (field[usrChosen1].ischosen = 0)

  ~ Gain a(act), (dance), (instrumental), or (lyric) talent
  ~ from a package you have chosen.
  perform field[usrChosen1].chosen.setfocus
  if (focus.tagis[SoGTalDesc.PerfAct] <> 0) then
    perform assign[SoGFreeTal.PerfAct]
  elseif (focus.tagis[SoGTalDesc.PerfDance] <> 0) then
    perform assign[SoGFreeTal.PerfDance]
  elseif (focus.tagis[SoGTalDesc.PerfInstru] <> 0) then
    perform assign[SoGFreeTal.PerfInstru]
  elseif (focus.tagis[SoGTalDesc.PerfLyric] <> 0) then
    perform assign[SoGFreeTal.PerfLyric]
  endif]]></eval>
    </thing>
  <thing id="sogTlArt" name="Act" compset="SoGTalent" description="You can begin an act as a move action by adopting the approach associated with it. Starting an act provokes attacks of opportunity. An act grants its effects to all enemies or allies within a 20-foot radius + 5 feet per 5 ranks in this package’s associated Perform skill for as long as the act is active, up to a maximum of 1 minute.\n\nWhile an act is active, allies in the area that can perceive you may spend actions to contribute to the act’s scenes, completing them. Once a scene has been completed, it confers its effects to the act until it ends, and cannot be completed again (unless otherwise specified).\n\nAll acts have a finale, which requires all of the act’s scenes to be completed before you may use it. Once you activate an act’s finale, it ends the act and its associated benefits other than the finale’s effects at the end of your next turn.\n\n{b}Associated Skill{/b}: Perform (act or comedy)." summary="Gain the act package" uniqueness="useronce">
    <fieldval field="abText" value="ft"/>
    <fieldval field="abValue" value="20"/>
    <fieldval field="usrCandid1" value="component.BaseSkill &amp; Helper.SkCatPerf &amp; (thingid.skPerfAct | thingid.skPerfCom)"/>
    <usesource source="pPF1e_Sph_Guile" parent="pPF1e_Sph" name="Spheres of Guile"/>
    <tag group="SoGSphere" tag="Performance"/>
    <tag group="SoGTlClass" tag="Package" name="Package" abbrev="Package"/>
    <tag group="SoGTalDesc" tag="PerfAct"/>
    <tag group="SoGIsPkg" tag="Act"/>
    <tag group="SoGAbV1Sc" tag="5_5A"/>
    <tag group="LvNamePar" tag="AppText"/>
    <tag group="LvNamePar" tag="AppValue"/>
    <tag group="ChooseSrc1" tag="Hero"/>
    <tag group="Helper" tag="SpecUp" name="SpecUp" abbrev="SpecUp"/>
    <tag group="SoGFreeTal" tag="PerfAct"/>
    <tag group="User" tag="NoAutoName"/>
    <bootstrap thing="abSoGSkLeverage"></bootstrap>
    <eval phase="PostLevel" priority="1500" name="Assign initial Skill Leverage"><![CDATA[~ Get out if disabled
     doneif (tagis[Helper.SpcDisable] <> 0)
     ~ or a duplicate.
     doneif (tagis[Helper.FirstCopy] = 0)
     ~ or if no choice made.
     doneif (field[usrChosen1].ischosen = 0)

     perform hero.childfound[sogTlSpPerformanc].assignstr["SkLeverage." & field[usrChosen1].chosen.idstring]]]></eval>
    <eval phase="First" priority="103" name="Assign initial Associated Skill"><![CDATA[~ Get out if disabled
     doneif (tagis[Helper.SpcDisable] <> 0)
     ~ or if no choice made.
     doneif (field[usrChosen1].ischosen = 0)

     perform hero.childfound[sogTlSpPerformanc].assignstr["SoGAssocSk." & field[usrChosen1].chosen.idstring]]]></eval>
    </thing>
  <thing id="sogTlDance" name="Dance" compset="SoGTalent" description="As a move action, you can move up to half your speed to begin a dance, gaining the benefits of a single (dance) talent you possess. Allies within 10 feet + 5 feet per 5 ranks in this package’s associated Perform skill of you may either spend a move action and move up to half their speed, or take a 5-foot step, to gain the benefits of your dance until the start of their next turn. For every 10 minutes that a dance is maintained, you become fatigued; you cannot begin a dance while exhausted.\n\nCreatures benefiting from your dance (including yourself) are called dancers. You must maintain the dance each round by moving up to half your speed (minimum 10 feet), usually as part of any action spent to move, or it ends at the end of your turn. Movement made as part of a dance still provokes attacks of opportunity.\n\n{b}Associated Skill{/b}: Perform (dance)." summary="Gain the act package" uniqueness="useronce">
    <fieldval field="abText" value="ft"/>
    <fieldval field="abValue" value="10"/>
    <usesource source="pPF1e_Sph_Guile" parent="pPF1e_Sph" name="Spheres of Guile"/>
    <tag group="SoGSphere" tag="Performance"/>
    <tag group="SoGTlClass" tag="Package" name="Package" abbrev="Package"/>
    <tag group="SoGTalDesc" tag="PerfDance"/>
    <tag group="SoGIsPkg" tag="Dance"/>
    <tag group="SoGAbV1Sc" tag="5_5A"/>
    <tag group="LvNamePar" tag="AppText"/>
    <tag group="LvNamePar" tag="AppValue"/>
    <tag group="Helper" tag="SpecUp" name="SpecUp" abbrev="SpecUp"/>
    <tag group="SoGFreeTal" tag="PerfDance"/>
    <tag group="User" tag="NoAutoName"/>
    <bootstrap thing="abSoGSkLeverage"></bootstrap>
    <eval phase="PostLevel" priority="1500" name="Assign initial Skill Leverage"><![CDATA[~ Get out if disabled
     doneif (tagis[Helper.SpcDisable] <> 0)
     ~ or a duplicate.
     doneif (tagis[Helper.FirstCopy] = 0)
     ~ or if no choice made.
     doneif (field[usrChosen1].ischosen = 0)

     perform hero.childfound[sogTlSpPerformanc].assign[SoGAssocSk.skPerfDanc]]]></eval>
    <eval phase="First" priority="103" name="Assign initial Associated Skill"><![CDATA[~ Get out if disabled
     doneif (tagis[Helper.SpcDisable] <> 0)
     ~ or if no choice made.
     doneif (field[usrChosen1].ischosen = 0)

     perform hero.childfound[sogTlSpPerformanc].assign[SoGAssocSk.skPerfDanc]]]></eval>
    </thing>
  <thing id="sogTlInstrumental" name="Instrumental" compset="SoGTalent" description="As a standard action, you can play an instrument to create a 30-foot radius area centered on you that moves as you do, applying a single (instrumental) talent to the area. An instrumental must be maintained each turn as a move action, which does not provoke attacks of opportunity. For every 10 minutes that an instrumental is maintained, you become fatigued; you cannot begin an instrumental while exhausted.\n\nUnwilling creatures may attempt a Will saving throw (unless otherwise specified) at the start of each turn they remain within the area (or if they move within the area) to ignore the instrumental’s effects for 1 round; a creature can only attempt a saving throw in this way once per round. Instrumentals are mind-affecting, emotion, and auditory effects.\n\n{b}Associated Skill{/b}: Perform (keyboard, percussion, string, or wind)." summary="Gain the act package" uniqueness="useronce">
    <fieldval field="abText" value="ft"/>
    <fieldval field="abValue" value="30"/>
    <fieldval field="usrCandid1" value="component.BaseSkill &amp; Helper.SkCatPerf &amp; (thingid.skPerfKey | thingid.skPerfPerc | thingid.skPerfStr | thingid.skPerfWind)"/>
    <usesource source="pPF1e_Sph_Guile" parent="pPF1e_Sph" name="Spheres of Guile"/>
    <tag group="SoGSphere" tag="Performance"/>
    <tag group="SoGTlClass" tag="Package" name="Package" abbrev="Package"/>
    <tag group="SoGTalDesc" tag="PerfInstru"/>
    <tag group="SoGIsPkg" tag="Instrument"/>
    <tag group="LvNamePar" tag="AppText"/>
    <tag group="LvNamePar" tag="AppValue"/>
    <tag group="ChooseSrc1" tag="Hero"/>
    <tag group="Helper" tag="SpecUp" name="SpecUp" abbrev="SpecUp"/>
    <tag group="SoGFreeTal" tag="PerfInstru"/>
    <tag group="User" tag="NoAutoName"/>
    <bootstrap thing="abSoGSkLeverage"></bootstrap>
    <eval phase="First" priority="103" name="Assign initial Associated Skill"><![CDATA[~ Get out if disabled
     doneif (tagis[Helper.SpcDisable] <> 0)
     ~ or if no choice made.
     doneif (field[usrChosen1].ischosen = 0)

     perform hero.childfound[sogTlSpPerformanc].assignstr["SoGAssocSk." & field[usrChosen1].chosen.idstring]]]></eval>
    <eval phase="PostLevel" priority="1500" name="Assign initial Skill Leverage"><![CDATA[~ Get out if disabled
     doneif (tagis[Helper.SpcDisable] <> 0)
     ~ or a duplicate.
     doneif (tagis[Helper.FirstCopy] = 0)
     ~ or if no choice made.
     doneif (field[usrChosen1].ischosen = 0)

     perform hero.childfound[sogTlSpPerformanc].assignstr["SkLeverage." & field[usrChosen1].chosen.idstring]]]></eval>
    </thing>
  <thing id="sogTlLyric" name="Lyric" compset="SoGTalent" description="As a standard action, you may inspire or discourage a single creature within close range with a lyric that lasts for 1 minute (Will negates if unwilling). A lyric grants a constant effect, which can be expended as a swift action (unless otherwise stated) by the creature affected by the lyric, for a stronger short-term effect, after which the effect ends. When expended, the lyric’s initial effects persist until the end of the target’s turn (or action if used as an immediate action). A creature can only benefit from a single lyric at one time; if a creature uses a lyric on a creature currently under the effects of another lyric, the previous effect ends.\n\nAll lyrics are mind-affecting, emotion, language-dependent effects that rely on auditory components (unless using Perform (comedy), which can instead use visual components, chosen when using the lyric), and do not provoke attacks of opportunity.\n\n{b}Associated Skill{/b}: Perform (comedy, oratory, or sing)." summary="Gain the act package" uniqueness="useronce">
    <fieldval field="usrCandid1" value="component.BaseSkill &amp; Helper.SkCatPerf &amp; (thingid.skPerfCom | thingid.skPerfOrat | thingid.skPerfSing)"/>
    <usesource source="pPF1e_Sph_Guile" parent="pPF1e_Sph" name="Spheres of Guile"/>
    <tag group="SoGSphere" tag="Performance"/>
    <tag group="SoGTlClass" tag="Package" name="Package" abbrev="Package"/>
    <tag group="SoGTalDesc" tag="PerfLyric"/>
    <tag group="SoGIsPkg" tag="Lyric"/>
    <tag group="ChooseSrc1" tag="Hero"/>
    <tag group="Helper" tag="SpecUp" name="SpecUp" abbrev="SpecUp"/>
    <tag group="SoGFreeTal" tag="PerfLyric"/>
    <tag group="User" tag="NoAutoName"/>
    <bootstrap thing="abSoGSkLeverage"></bootstrap>
    <eval phase="First" priority="103" name="Assign initial Associated Skill"><![CDATA[~ Get out if disabled
     doneif (tagis[Helper.SpcDisable] <> 0)
     ~ or if no choice made.
     doneif (field[usrChosen1].ischosen = 0)

     perform hero.childfound[sogTlSpPerformanc].assignstr["SoGAssocSk." & field[usrChosen1].chosen.idstring]]]></eval>
    <eval phase="PostLevel" priority="1500" name="Assign initial Skill Leverage"><![CDATA[~ Get out if disabled
     doneif (tagis[Helper.SpcDisable] <> 0)
     ~ or a duplicate.
     doneif (tagis[Helper.FirstCopy] = 0)
     ~ or if no choice made.
     doneif (field[usrChosen1].ischosen = 0)

     perform hero.childfound[sogTlSpPerformanc].assignstr["SkLeverage." & field[usrChosen1].chosen.idstring]]]></eval>
    </thing>
  <thing id="sogTlAGildedTower" name="A Gilded Tower" compset="SoGTalent" description="You present an individual who always naturally attracts the spotlight, and quickly begins to love the position they are in… until people learn who they truly are.\n\n{b}Eye-Catching (approach){/b}: When you begin this act, choose a single ally in the area, becoming the focus of the act. If the chosen ally leaves the area, this act ceases to function until a new ally is chosen as a swift action.\n\nThe chosen creature can attempt to create a diversion as a move action, and they receive a +2 morale bonus to Bluff checks to lie, create a diversion or feign a condition, and to Perform checks, increasing by 1 per 5 ranks in this package’s associated skill you possess.\n\n{b}All Eyes on You (scene, standard action){/b}: Whenever the chosen creature creates a diversion and they are the chosen diversion, any affected observers become oblivious (instead of distracted). Additionally, the chosen creature can spend an immediate action whenever an action or noise would make an observer more alert to attempt another Bluff check opposed by the observer’s Sense Motive. On a successful Bluff check, the noise or action is simply interpreted to be part of the performance, and observers who fail remain oblivious.\n\n{b}Glimmer of Doubt (scene, move action){/b}: All creatures that are distracted (or oblivious) by the chosen creature become uncertain for the rest of the act’s duration.\n\n{b}Sudden Reveal (finale, immediate action){/b}: All creatures that are distracted (or oblivious) by the chosen creature become shocked for 1 round, and must succeed at a Will saving throw or become either enraged toward or frightened of the chosen creature (your choice when you perform the finale) for a number of rounds equal to your operative ability modifier (minimum 1). A frightened creature’s condition improves to shaken when they can no longer see the chosen creature. Creatures that are currently oblivious to all but the chosen creature suffer a -2 penalty to this saving throw." uniqueness="useronce">
    <usesource source="pPF1e_Sph_Guile"/>
    <tag group="SoGSphere" tag="Performance"/>
    <tag group="SoGTlClass" tag="Talent"/>
    <tag group="SoGTalDesc" tag="PerfAct"/>
    <tag group="SoGTalDesc" tag="Utility"/>
    <tag group="SoGAbV1Sc" tag="1_5A"/>
    <tag group="LvNamePar" tag="AppText"/>
    <tag group="LvNamePar" tag="AppValue"/>
    <tag group="LvNamePar" tag="SignAppVal"/>
    <tag group="SoGReqPkg" tag="Act"/>
    </thing>
  <thing id="sogTlAvertingSwit" name="Averting Switch" compset="SoGTalent" description="Whenever a dancer would be the target of an attack or included in an instantaneous area effect that allows a Reflex save, another willing dancer that can reach them can spend an immediate action to swap spaces or the attacked dancer can spend a swift or immediate action to swap places with a willing dancer. Either way, the other dancer becomes the new target of the attack (or saving throw) and gets a +2 dodge bonus to their AC or Reflex save against the attack or effect. The bonus increases by 1 for every 6 ranks in this package’s associated skill you possess. After the attack is resolved, those dancers may choose to swap places again without using another action (if both agree).\n\nIf you have at least 5 ranks in the associated skill, the attacked dancer can also use this ability on an unwilling creature within their natural reach as an immediate action. The dancer must succeed at a reposition combat maneuver (Pathfinder Roleplaying Game: Advanced Player’s Guide) against the creature to swap places, using your ranks in this package’s associated skill in place of their base attack bonus (if they wish). As long as the dancer exceeds the creature’s CMD by 5 or more, they can choose to swap places again after the attack is resolved." uniqueness="useronce">
    <usesource source="pPF1e_Sph_Guile"/>
    <tag group="SoGSphere" tag="Performance"/>
    <tag group="SoGTlClass" tag="Talent"/>
    <tag group="SoGTalDesc" tag="PerfDance"/>
    <tag group="SoGTalDesc" tag="Utility"/>
    <tag group="SoGAbV1Sc" tag="1_6A"/>
    <tag group="LvNamePar" tag="AppText"/>
    <tag group="LvNamePar" tag="AppValue"/>
    <tag group="LvNamePar" tag="SignAppVal"/>
    <tag group="SoGReqPkg" tag="Dance"/>
    </thing>
  <thing id="sogTlAssuringAnth" name="Assuring Anthem" compset="SoGTalent" description="Allies affected by this instrumental or lyric may reroll any ability check, saving throw, or skill check that results in a natural 1 or 2 and keep the new result, even if it is worse. An ability check or skill check can only be rerolled this way once per 10 minutes (although the ally may spend 1 use of skill leverage to ignore this restriction for a roll), whereas an attack roll or saving throw can only be rerolled once per round. This ability cannot benefit abilities or skill uses that take longer than the ability lasts.\n\nWhen used as an instrumental, if you maintain it on your next turn, all allies within the area may also reroll any attack rolls that result in a natural 1 or 2.\n\nWhen used as an inspiring lyric, the natural die result needed for a reroll increases by 1 for every 5 ranks in this package’s associated skill you possess.\n\nThe lyric can be expended as an immediate action before attempting an ability check, saving throw, or skill check to roll the attempt twice, taking the higher result." uniqueness="useronce">
    <usesource source="pPF1e_Sph_Guile"/>
    <tag group="SoGSphere" tag="Performance"/>
    <tag group="SoGTlClass" tag="Talent"/>
    <tag group="SoGTalDesc" tag="PerfInstru"/>
    <tag group="SoGTalDesc" tag="PerfLyric"/>
    <tag group="SoGTalDesc" tag="Utility"/>
    <tag group="SoGAbV1Sc" tag="1_5A"/>
    <tag group="LvNamePar" tag="AppText"/>
    <tag group="LvNamePar" tag="AppValue"/>
    <tag group="SoGReqPkg" tag="Instrument"/>
    <tag group="SoGReqPkg" tag="Lyric"/>
    </thing>
  <thing id="sogTlWellTimedDis" name="Well-Timed Distraction" compset="SoGTalent" description="As part of preparing this plan, you carefully plan a group of performers, loud noise, or another similar distraction to come at an important time. You can reveal this plan as an immediate action to cause a group of observers you are aware of to become distracted until the end of your next turn. You and any number of creatures within 30 feet of you also gain a +4 circumstance bonus to Sleight of Hand and Stealth checks made against the distracted creatures for as long as they remain distracted.\n\nThis plan can also be revealed when you or a creature (or multiple) you can see gains the results of a Sleight of Hand or Stealth check, allowing any number of creatures to reroll the check, potentially changing the result. If you do so, you forgo the granted circumstance bonus." uniqueness="useronce">
    <usesource source="pPF1e_Sph_Guile"/>
    <tag group="SoGSphere" tag="Performance"/>
    <tag group="SoGTlClass" tag="Talent"/>
    <tag group="SoGTalDesc" tag="Plan"/>
    <tag group="SoGTalDesc" tag="Utility"/>
    </thing>
  <thing id="sogTlTheBondsForg" name="The Bonds Forged In War" compset="SoGTalent" description="You speak of the bonds forged between a small group of soldiers; as the group slowly dwindles, their ferocity and determination grows.\n\n{b}Relentless (approach){/b}: Allies in the area can postpone the start of any unwanted emotion effects for 1 round, plus 1 round per 5 ranks in this package’s associated Perform skill you possess. After this period, the effect’s duration begins as normal.\n\n{b}Forged in Blood (scene, standard action){/b}: Whenever an enemy successfully damages an ally in the area, all other allies within the area gain a +1 morale bonus to attack and damage rolls against the attacker until the end of the attacker’s next turn; this bonus is cumulative to a maximum equal to your operative ability modifier (minimum 1).\n\n{b}Fight for Your Life (scene, move action){/b}: All allies in the area gain a number of temporary hit points equal to 2 + your operative ability modifier (minimum 1). These temporary hit points are replenished for an ally whenever they confirm a critical hit.\n\n{b}Stand Together (finale, standard action){/b}: For 1 minute, allies in the area gain damage reduction 1 that cannot be overcome and they do not immediately fall unconscious when they are reduced to 0 hit points or below, unless they choose to. Allies who benefit from this ability are still disabled, but do not suffer damage after taking a standard action. The value of the damage reduction increases by 1 for every 3 ranks you possess in the associated Perform skill." uniqueness="useronce">
    <fieldval field="abValue" value="1"/>
    <fieldval field="abValue3" value="1"/>
    <usesource source="pPF1e_Sph_Guile"/>
    <tag group="SoGSphere" tag="Performance"/>
    <tag group="SoGTlClass" tag="Talent"/>
    <tag group="SoGTalDesc" tag="PerfAct"/>
    <tag group="SoGTalDesc" tag="Utility"/>
    <tag group="SoGAbV1Sc" tag="1_5A"/>
    <tag group="SoGAbV2OM" tag="Value"/>
    <tag group="SoGAbV3Sc" tag="1_3A"/>
    <tag group="LvNamePar" tag="AppText"/>
    <tag group="SoGReqPkg" tag="Act"/>
    <eval phase="Render" priority="400">~ Get out if disabled
  doneif (tagis[Helper.SpcDisable] &lt;> 0)

  field[abText].text = field[abValue].value &amp; " rnds, "
  field[abText].text &amp;= "≤ " &amp; signed(field[abValue2].value) &amp; ", "

  ~ Add one, because we use the OM for both the ≤OM (Forged) and +2+OM (Fight)
  field[abValue2].value += 2
  field[abText].text &amp;= field[abValue2].value &amp; " tHP, "
  field[abText].text &amp;= " DR " &amp; field[abValue3].value &amp; "/-"</eval>
    </thing>
  <thing id="sogTlGuardedTwis" name="Guarded Twist" compset="SoGTalent" description="A creature can pick up an item from the ground, retrieve a stored item, sheathe a weapon, or stand up from prone as part of the movement required to join or maintain this dance. Dancers taking the actions listed above do not provoke an attack of opportunity (including when they initially take the action to become a dancer).\n\nAdditionally, whenever you begin or maintain a dance with this talent, roll a Perform (dance) check with a circumstance bonus equal to the number of dancers, which cannot exceed your operative ability modifier (minimum +1). All dancers may use your Perform (dance) check result in place of any Acrobatics check to avoid provoking an attack of opportunity for as long as they continue the dance.\n\nIf you have at least 6 ranks in the associated skill for this package, the dancers also get a +1 dodge bonus to AC for every 6 ranks you possess." uniqueness="useronce">
    <usesource source="pPF1e_Sph_Guile"/>
    <tag group="SoGSphere" tag="Performance"/>
    <tag group="SoGTlClass" tag="Talent"/>
    <tag group="SoGTalDesc" tag="PerfDance"/>
    <tag group="SoGTalDesc" tag="Utility"/>
    <tag group="SoGAbV1Sc" tag="1_6A"/>
    <tag group="LvNamePar" tag="AppText"/>
    <tag group="LvNamePar" tag="AppValue"/>
    <tag group="LvNamePar" tag="SignAppVal"/>
    <tag group="SoGReqPkg" tag="Dance"/>
    </thing>
  <thing id="sogTlDispiritingL" name="Dispiriting Lament" compset="SoGTalent" description="Enemies affected by this instrumental or lyric suffer a -2 penalty to ability checks and skill checks attempted using a single ability score of your choice (chosen when you use the ability), in addition to the DC to affect them with skills of the chosen ability score. This penalty increases by 1 per 4 ranks in this package’s associated skill you possess.\n\nWhen used as a discouraging lyric, the penalty instead applies to all ability checks and skill checks. The lyric can be expended as an immediate action before attempting an ability check or skill check to roll the attempt twice, taking the lowest result.\n\nUsing this talent is not a hostile action." uniqueness="useronce">
    <usesource source="pPF1e_Sph_Guile"/>
    <tag group="SoGSphere" tag="Performance"/>
    <tag group="SoGTlClass" tag="Talent"/>
    <tag group="SoGTalDesc" tag="PerfInstru"/>
    <tag group="SoGTalDesc" tag="PerfLyric"/>
    <tag group="SoGTalDesc" tag="Utility"/>
    <tag group="SoGAbV1Sc" tag="Neg1_4A"/>
    <tag group="LvNamePar" tag="AppText"/>
    <tag group="LvNamePar" tag="AppValue"/>
    <tag group="LvNamePar" tag="SignAppVal"/>
    <tag group="SoGReqPkg" tag="Act"/>
    </thing>
  <thing id="sogTlExpandedRepe" name="Expanded Repertoire" compset="SoGTalent" description="You gain one Performance sphere package which you do not already possess, including its associated skill. You unlock skill leverage with the package’s associated skill, in addition to gaining a bonus talent from that package as normal (which does not count toward your number of Performance talents for the number of ranks you get in your associated skills). This talent has the [utility] tag if the bonus talent you choose to gain with it has the [utility] tag. You may select this talent multiple times, each time selecting a different package." uniqueness="useronce">
    <usesource source="pPF1e_Sph_Guile" parent="pPF1e_Sph" name="Spheres of Guile"/>
    <tag group="SoGSphere" tag="Performance"/>
    <tag group="SoGTlClass" tag="Talent" name="Basic Talent" abbrev="Basic Talent"/>
    <eval phase="PostLevel" priority="30000">hero.childfound[resSGPkPerformanc].field[resMax].value += 1</eval>
    </thing>
  <thing id="sogTlFlowingTheat" name="Flowing Theatrics" compset="SoGTalent" description="If you possess the (act) package, whenever you would adopt the approach of an act, it does not count towards your normal limit to the amount of approaches you may adopt at one time (but you may not perform more than one act at a time). Additionally, you can adopt the approach associated with an act as a swift action instead of a move action.\n\nIf you possess the (dance) package, while you dance, each ally within the area can spend an immediate action to move 5 feet and join your dance. If the ally moves in response to an attack or an effect that allows a Reflex saving throw, it resolves before they leave their current space but the ally gets a +1 dodge bonus to AC against the attack or save. The movement provokes attacks of opportunity from anyone other than an attacker being avoided this way. For every 6 ranks you have in the (dance) package’s associated skill, the dodge bonus increases by 1.\n\nIf you possess the (lyric) package, your inspiring lyrics can be expended as a free action that can be taken even when it is not the target’s turn. Your discouraging lyrics must be expended using two swift actions or one standard action. (The lyric’s expended effect only activates after the second swift action is expended.) Additionally, you may use a lyric as a swift action. If you do so, the lyric only lasts until the end of your next turn; if it is an inspiring lyric, it cannot be expended.\n\nIf you possess the (instrumental) package, you may maintain an instrumental as a swift action instead of a move action." uniqueness="useronce">
    <comment>TODO no coding</comment>
    <usesource source="pPF1e_Sph_Guile" parent="pPF1e_Sph" name="Spheres of Guile"/>
    <tag group="SoGSphere" tag="Performance"/>
    <tag group="SoGTlClass" tag="Talent" name="Basic Talent" abbrev="Basic Talent"/>
    </thing>
  <thing id="sogTlPerformanceM" name="Performance Mastery" compset="SoGTalent" description="If you possess the (act) package, whenever you begin an act, you can choose a single scene from a different (act) talent you possess; your act has the chosen scene. You cannot choose a scene that requires a previous scene or the other act’s approach to function (such as the Pity the Weak scene from The Lowly Peasant talent). Additionally, you can choose a single scene or the finale from your act when you begin it (including one you added from this talent); the action cost to complete the scene is reduced by one step (full-round to standard, standard to move, move to swift, swift to free).\n\nIf you possess the (dance) package, whenever you maintain a dance, you may change the (dance) or (instrumental) talent used as part of the action used to maintain the performance. In addition, you can move up to your speed when beginning a dance; if you move at least half your speed when doing so, you can apply two (dance) talents to the dance instead of one.\n\nIf you possess the (instrumental) package, whenever you maintain an instrumental, you may change the (instrumental) talent used as part of the action to maintain it. Additionally, if you play and maintain an instrumental using two hands, you have two options to improve the effect: either you can apply two (instrumental) talents instead of one, or you can treat the effects of the instrumental as if you had 5 additional ranks in the associated skill.\n\nIf you possess the (lyric) package, whenever you would use a lyric, you may increase the required action to begin the lyric by one step (swift to move, move to standard, standard to full-round, and full-round to 1 round) to allow you to target one creature with an inspiring lyric and another creature with a discouraging lyric. Whenever either lyric would be expended, the other lyrics effects are removed (but do not gain the effects from expending the lyric); unless you outwit the target of the discouraging lyric as a cost when using the lyric, allowing both to be expended separately." uniqueness="useronce">
    <comment>TODO no coding</comment>
    <usesource source="pPF1e_Sph_Guile" parent="pPF1e_Sph" name="Spheres of Guile"/>
    <tag group="SoGSphere" tag="Performance"/>
    <tag group="SoGTlClass" tag="Talent" name="Basic Talent" abbrev="Basic Talent"/>
    </thing>
  <thing id="sogTlCaptivatingS" name="Captivating Spectacle" compset="SoGTalent" description="Whenever you use the entertain skill use, creatures that are successfully distracted by you must succeed at a Will saving throw or become fascinated with you for as long as they are distracted. Additionally, you can spend 1 use of skill leverage while entertaining to be able to distract creatures that have previously been distracted by the skill use within the same 24 hour period.\n\nFinally, you and other creatures can outwit a creature that is distracted by you or oblivious by improving the condition by one step, although when you do so, they cannot be outwitted by you using this talent for 24 hours." uniqueness="useronce">
    <comment>TODO no coding</comment>
    <usesource source="pPF1e_DRS_HarDis"/>
    <usesource source="pPF1e_Sph_Guile" parent="pPF1e_Sph" name="Spheres of Guile"/>
    <tag group="SoGSphere" tag="Performance"/>
    <tag group="SoGTlClass" tag="Talent" name="Basic Talent" abbrev="Basic Talent"/>
    </thing>
  <thing id="sogTlVentriloquis" name="Ventriloquism" compset="SoGTalent" description="You can make your voice (or any sound you can normally make vocally) seem to originate from anywhere within 10 feet plus 5 feet per 3 ranks in Perform (comedy, oratory, or sing) you possess.\n\nYou can choose to have your voice seem to emerge from another creature within range, allowing them to roll a Bluff, Diplomacy, Intimidate, or Perform check using your ranks in the skill instead of their own, as long as the check is vocal in nature. A creature can attempt a Perception or Sense Motive check opposed by your Perform (comedy, oratory, or sing) check to determine if you are the original source of the sound or not.\n\nAt 5 ranks in Perform (comedy, oratory, or sing), you can instead allow a creature to use your entire skill bonus instead of just your ranks whenever they attempt a Bluff, Diplomacy, Intimidate, or Perform check." uniqueness="useronce">
    <fieldval field="abText" value="feet"/>
    <fieldval field="abValue" value="1"/>
    <usesource source="pPF1e_Sph_Guile" parent="pPF1e_Sph" name="Spheres of Guile"/>
    <tag group="SoGSphere" tag="Performance"/>
    <tag group="SoGTlClass" tag="Talent" name="Basic Talent" abbrev="Basic Talent"/>
    <tag group="SoGTalDesc" tag="Utility"/>
    <tag group="SoGAbV1Sc" tag="5_3A"/>
    <tag group="LvNamePar" tag="AppText"/>
    <tag group="LvNamePar" tag="AppValue"/>
    </thing>
  <thing id="sogTlAPathPavedGr" name="A Path Paved in Grey" compset="SoGTalent" description="Consumed by inaction and lethargy after a tragic loss, an individual’s apathy and rage fuses into a twisted nihilism.\n\n{b}Jaded Psyche (approach){/b}: All allies within the act’s area can choose to gain a -2 penalty to saving throws against (and to the skill DC to affect them with) emotion effects, but halves the duration of such effects (minimum 1 round); if the effect inflicts the dumbfounded, enraged, frenzied, frightened, livid, panicked, or shocked condition, the severity of such a condition is reduced by one step. If an ally chooses not to suffer this penalty (or is immune to emotion effects), they are not affected by this act.\n\n{b}Desensitized Resolve (scene, 1 swift action){/b}: Whenever an affected ally within the area would gain the exhausted or fatigued condition, or gain a condition that would prevent the ally from taking an action (i.e. dazed, nauseated, paralyzed, staggered, stunned, etc.), they may delay the onset of that condition until the end of their next turn, its duration starting after this time. A single instance of a condition may only be ignored in this way once.\n\n{b}Breaking Point (scene, 1 swift action){/b}: Whenever an affected ally within the area would be unable to take a standard action (i.e. nauseated, stunned, etc, but not unconscious), they can choose to take the total defense action at the end of their turn (despite being unable to). Additionally, whenever an affected ally gains an anger condition, they treat all enemies as being the source of their anger.\n\n{b}Overwhelming Apathy (finale, 1 standard action){/b}: All enemies within the area of the act must succeed at a Will saving throw. On a failure, the creature may only take one action on its next turn (although they can still take free actions), meaning it may only take a single standard, move, or swift action. On a success, the creature is instead staggered until the end of its next turn. This is a mind-affecting emotion effect." uniqueness="useronce">
    <usesource source="pPF1e_DRS_HarDis"/>
    <usesource source="pPF1e_Sph_Guile"/>
    <tag group="SoGSphere" tag="Performance"/>
    <tag group="SoGTlClass" tag="Talent"/>
    <tag group="SoGTalDesc" tag="PerfAct"/>
    </thing>
  <thing id="sogTlAloneinaCrow" name="Alone in a Crowd" compset="SoGTalent" description="Usually depicted through the allegory of a wolf pack, you weave a story of the destructively thin line of self-sufficiency and hyper independence.\n\n{b}Lone Wolf (approach){/b}: All allies within the act’s area that have no ally within 10 feet of them (and are not receiving benefits from aid another) gain a +1 morale bonus to weapon attack and damage rolls against creatures that are not threatened by another ally, increasing by 1 for every 10 ranks in the associated skill you possess.\n\nAlternatively, at any point, an ally benefitting from this act’s approach can choose to make themselves the ‘lone wolf’ for the duration of this act, causing all other allies within the act’s area to only be able to benefit from this act’s approach, regardless of any other completed scenes.\n\n{b}Friendly Rivalry (scene, 1 standard action){/b}: As long as an ally is benefitting from this act’s approach, the associated morale bonus granted increases by 1 for as long as they perceive another ally and they are also benefiting from this act’s approach.\n\nIf there is a lone wolf within the act, the morale bonus granted increases by 1 for the lone wolf.\n\n{b}Learn From Their Mistakes (scene, 1 swift action){/b}: Whenever an ally within the act’s area fails a saving throw or attack roll by 5 or more, the next ally that attempts the same kind of roll within the next round can roll the attempt twice, taking the highest result. If the ally fails the attempt by 4 or less, the next ally instead gains a +2 morale bonus to the next roll they attempt within the next round.\n\nIf there is a lone wolf within the act, they treat any failed attack or saving throw attempted by an ally to have failed by 5 or more for determining their own benefits.\n\n{b}Culmination (finale, 1 immediate action){/b}: If the act has no lone wolf, all allies within the act’s area gain a +2 morale bonus to AC, as well as to all saving throws and attack and damage rolls for 3 rounds.\n\nIf the act has a lone wolf, they gain a +4 morale bonus to the above statistics for 3 rounds for as long as they are threatening an enemy and have no allies within 10 feet of them (and are not receiving any aid another benefits)." uniqueness="useronce">
    <comment>TODO No Coding</comment>
    <usesource source="pPF1e_DRS_HarDis"/>
    <usesource source="pPF1e_Sph_Guile"/>
    <tag group="SoGSphere" tag="Performance"/>
    <tag group="SoGTlClass" tag="Talent"/>
    <tag group="SoGTalDesc" tag="PerfAct"/>
    </thing>
  <thing id="sogTlLoveHateSpBe" name="Love, Hate, And The Space Between" compset="SoGTalent" description="The display shows the strength that friends can grant you in the face of adversity, and how to tear down the adversity that only seeks to hurt people.\n\n{b}Confidence in Numbers (approach){/b}: Whenever an enemy misses an attack roll against an ally and both creatures are in the area, any ally in the area can spend an immediate action to force the attacker to succeed at a Will saving throw or suffer a -2 penalty to their attack rolls for 1 minute, or until the attacker hits with an attack, whichever comes first. This penalty increases by 1 per 5 ranks in this package’s associated skill you possess.\n\n{b}Always Prepared (scene, swift action){/b}: Allies in the area increase the AC bonus granted by total defense, fighting defensively, and the attack bonus granted by flanking by 1. Additionally, affected allies may still make attacks of opportunity while taking the total defense action.\n\n{b}Diminish Bravado (scene, move action){/b}: Enemies in the area decrease the AC bonus granted by total defense, fighting defensively, and the attack bonus granted by flanking by 1.\n\nThis scene can be completed a second time (but need not be to activate the finale); if it is, the AC and attack bonus is decreased by 1 again. If this reduces the bonus due to flanking to 0, the creature gains no benefits due to flanking (such as sneak attack).\n\n{b}Tear Down the Ivory Tower (finale, standard action){/b}: Enemies in the area must succeed at a Will saving throw or become shocked for a number of rounds equal to your operative ability modifier (minimum 1); on a successful save, they are instead uncertain for the duration. A shocked creature can make a Will save to reduce the condition as a standard action.\n\nAdditionally, enemies who fail their saving throw against this finale have the benefits of any competence or morale bonuses that they are benefiting from suppressed for the duration of this finale, still counting towards the effect’s duration." uniqueness="useronce">
    <comment>TODO No Coding</comment>
    <usesource source="pPF1e_Sph_Guile"/>
    <tag group="SoGSphere" tag="Performance"/>
    <tag group="SoGTlClass" tag="Talent"/>
    <tag group="SoGTalDesc" tag="PerfAct"/>
    </thing>
  <thing id="sogTlTheFortunatB" name="The Fortunate Beggar" compset="SoGTalent" description="The display shows the strength that friends can grant you in the face of adversity, and how to tear down the adversity that only seeks to hurt people.\n\n{b}Confidence in Numbers (approach){/b}: Whenever an enemy misses an attack roll against an ally and both creatures are in the area, any ally in the area can spend an immediate action to force the attacker to succeed at a Will saving throw or suffer a -2 penalty to their attack rolls for 1 minute, or until the attacker hits with an attack, whichever comes first. This penalty increases by 1 per 5 ranks in this package’s associated skill you possess.\n\n{b}Always Prepared (scene, swift action){/b}: Allies in the area increase the AC bonus granted by total defense, fighting defensively, and the attack bonus granted by flanking by 1. Additionally, affected allies may still make attacks of opportunity while taking the total defense action.\n\n{b}Diminish Bravado (scene, move action){/b}: Enemies in the area decrease the AC bonus granted by total defense, fighting defensively, and the attack bonus granted by flanking by 1.\n\nThis scene can be completed a second time (but need not be to activate the finale); if it is, the AC and attack bonus is decreased by 1 again. If this reduces the bonus due to flanking to 0, the creature gains no benefits due to flanking (such as sneak attack).\n\n{b}Tear Down the Ivory Tower (finale, standard action){/b}: Enemies in the area must succeed at a Will saving throw or become shocked for a number of rounds equal to your operative ability modifier (minimum 1); on a successful save, they are instead uncertain for the duration. A shocked creature can make a Will save to reduce the condition as a standard action.\n\nAdditionally, enemies who fail their saving throw against this finale have the benefits of any competence or morale bonuses that they are benefiting from suppressed for the duration of this finale, still counting towards the effect’s duration." uniqueness="useronce">
    <comment>TODO No Coding</comment>
    <usesource source="pPF1e_Sph_Guile"/>
    <tag group="SoGSphere" tag="Performance"/>
    <tag group="SoGTlClass" tag="Talent"/>
    <tag group="SoGTalDesc" tag="PerfAct"/>
    </thing>
  <thing id="sogTlCoordinaThro" name="Coordinated Throw" compset="SoGTalent" description="As part of the action to join the dance or as a swift action, a dancer can move up to 10 feet and can launch off of an adjacent dancer. The stationary dancer throws the moving dancer to another square within 10 feet, plus 5 feet per 3 ranks in this package’s associated skill you possess.\n\nAlternatively, instead of launching the predetermined amount, the moving dancer can attempt an Acrobatics check as if they were jumping and had a running start. This movement does not provoke attacks of opportunity." uniqueness="useronce">
    <fieldval field="abText" value="feet"/>
    <fieldval field="abValue" value="10"/>
    <usesource source="pPF1e_Sph_Guile"/>
    <tag group="SoGSphere" tag="Performance"/>
    <tag group="SoGTlClass" tag="Talent"/>
    <tag group="SoGTalDesc" tag="PerfDance"/>
    <tag group="SoGAbV1Sc" tag="5_3A"/>
    <tag group="LvNamePar" tag="AppText"/>
    <tag group="LvNamePar" tag="AppValue"/>
    </thing>
  <thing id="sogTlEntwininPran" name="Entwining Prance" compset="SoGTalent" description="All dancers begin to weave closely around nearby opponents. Whenever an enemy enters the threatened area of a dancer, the dancer may spend an attack of opportunity to force the enemy to succeed at a Reflex save or become entangled until they leave all the dancers’ threatened areas (or until the dance ends)." uniqueness="useronce">
    <usesource source="pPF1e_Sph_Guile"/>
    <tag group="SoGSphere" tag="Performance"/>
    <tag group="SoGTlClass" tag="Talent"/>
    <tag group="SoGTalDesc" tag="PerfDance"/>
    </thing>
  <thing id="sogTlLiberatiShif" name="Liberating Shift" compset="SoGTalent" description="All dancers gain a +2 morale bonus to Escape Artist checks, combat maneuver checks made to escape a grapple, and to saving throws against mind-affecting effects, effects that would slow or restrict their actions, and effects that inflict the entangled, paralyzed, staggered, or stunned conditions. The dancers also get an equivalent dodge bonus to Combat Maneuver Defense. This bonus increases by 1 per 5 associated skill ranks you possess.\n\nIf a dancer is already grappled or suffering from such an effect, they may spend an immediate action to attempt to break free of a grapple, or attempt a new saving throw against a single applicable effect they are currently suffering from that normally grants a saving throw against the original DC, ending that effect on a success. This dance only allows each dancer to attempt one new saving throw or check against a specific effect or grapple." uniqueness="useronce">
    <usesource source="pPF1e_Sph_Guile"/>
    <tag group="SoGSphere" tag="Performance"/>
    <tag group="SoGTlClass" tag="Talent"/>
    <tag group="SoGTalDesc" tag="PerfDance"/>
    </thing>
  <thing id="sogTlTopplingDive" name="Toppling Dive" compset="SoGTalent" description="Whenever a dancer attempts a trip combat maneuver, the dancer may use your ranks in this package’s associated skill instead of their base attack bonus when calculating their CMB.\n\nAdditionally, whenever a creature lands prone in a square a dancer threatens, the dancer can spend an immediate action to either pick them up from prone (without provoking attacks of opportunity) or force the target to succeed at a Fortitude saving throw or suffer an amount of bludgeoning damage equal to your ranks in this package's associated Perform skill and become exhausted for 1 round; a successful save results in them being fatigued for 1 round instead." uniqueness="useronce">
    <usesource source="pPF1e_Sph_Guile"/>
    <tag group="SoGSphere" tag="Performance"/>
    <tag group="SoGTlClass" tag="Talent"/>
    <tag group="SoGTalDesc" tag="PerfDance"/>
    </thing>
  <thing id="sogTlDynamicPace" name="Dynamic Pace" compset="SoGTalent" description="Whenever a dancer moves by spending a move action (including starting, joining, or maintaining a dance), they can split their movement up throughout their turn, as long as the total distance they move does not exceed their speed.\n\n{b}Associated Feat:{/b} Spring Attack." uniqueness="useronce">
    <usesource source="pPF1e_Sph_Guile"/>
    <tag group="SoGSphere" tag="Performance"/>
    <tag group="SoGTlClass" tag="Talent"/>
    <tag group="SoGTalDesc" tag="PerfDance"/>
    <tag group="HasFeat" tag="fSpringAtt"/>
    </thing>
  <thing id="sogTlPleasantSere" name="Pleasant Serenade" compset="SoGTalent" description="Allies affected by this instrumental or lyric gain a +2 morale bonus to Charisma checks, in addition to one or more of Bluff, Diplomacy, Handle Animal, or Perform checks, determined by how you perform. The bonus increases by 1 per 4 ranks in this package’s associated skill you possess.\n\nWhen used as an instrumental, the bonus applies to one skill chosen when the performance is begun or maintained.\n\nWhen used as an inspiring lyric, the bonus applies to all listed skills. The lyric can be expended as part of attempting any of the listed Charisma checks to either allow them to roll the check twice, taking the highest result or use your associated Perform skill modifier instead of their own bonus when making the attempt." uniqueness="useronce">
    <fieldval field="abText" value="morale"/>
    <fieldval field="abValue" value="2"/>
    <usesource source="pPF1e_Sph_Guile"/>
    <tag group="SoGSphere" tag="Performance"/>
    <tag group="SoGTlClass" tag="Talent"/>
    <tag group="SoGTalDesc" tag="PerfInstru"/>
    <tag group="SoGTalDesc" tag="PerfLyric"/>
    <tag group="SoGTalDesc" tag="Utility"/>
    <tag group="SoGAbV1Sc" tag="1_4A"/>
    <tag group="LvNamePar" tag="AppText"/>
    <tag group="LvNamePar" tag="AppValue"/>
    </thing>
  <thing id="sogTlCourageoChor" name="Courageous Chorus" compset="SoGTalent" description="Allies affected by this instrumental or lyric gain a +3 morale bonus to saving throws against charm and fear effects, increasing by 1 for every 5 ranks in this package’s associated Perform skill you possess.\n\nWhen used as an instrumental, if you maintain it on your next turn, all allies within the area gain a +1 morale bonus to attack rolls, +1 per 10 ranks in this package's associated Perform skill you possess.\n\nWhen used as an inspiring lyric, the target gains a morale bonus to attack rolls equal to half the bonus granted by the lyric.\n\nThe lyric can be expended as an immediate action to attempt a new saving throw against a single charm or fear effect they are suffering from (as long as the effect allowed a save)." uniqueness="useronce">
    <fieldval field="abText" value="morale"/>
    <fieldval field="abValue" value="3"/>
    <usesource source="pPF1e_Sph_Guile"/>
    <tag group="SoGSphere" tag="Performance"/>
    <tag group="SoGTlClass" tag="Talent"/>
    <tag group="SoGTalDesc" tag="PerfInstru"/>
    <tag group="SoGTalDesc" tag="PerfLyric"/>
    <tag group="SoGAbV1Sc" tag="1_5A"/>
    <tag group="LvNamePar" tag="AppText"/>
    <tag group="LvNamePar" tag="AppValue"/>
    <tag group="LvNamePar" tag="SignAppVal"/>
    </thing>
  <thing id="sogDbEmotionalPer" name="Emotional Performance" compset="SoGDrawbk" description="Your performances require intense emotional displays to feel genuine to yourself and your audience. When subject to a non-harmless effect that evokes an emotion (such as fear effects, demoralization, or spells with the emotion descriptor), you are unable to use your Performance sphere abilities. You gain a free talent from a package from this drawback." summary="Non-harmless effects evoke emotions, gain a free talent." panellink="tbSoGSurvivalis" uniqueness="useronce">
    <fieldval field="usrCandid1" value="component.SoGTalent &amp; SoGTlClass.Package &amp; SoGSphere.Performance"/>
    <usesource source="pPF1e_Sph_Guile" parent="pPF1e_Sph" name="Spheres of Guile"/>
    <tag group="SoGSphere" tag="Performance" name="Performance" abbrev="Performance"/>
    <tag group="ChooseSrc1" tag="Hero"/>
    <tag group="SoGFreeTal" tag="Package" name="ReqPackage - editor only" abbrev="ReqPackage - editor only"/>
    <eval phase="First" priority="450"><![CDATA[~ Do nothing if disabled.
  doneif (tagis[Helper.SpcDisable] <> 0)
  ~ Or if nothing chosen.
  doneif (field[usrChosen1].ischosen = 0)

  ~ Convert SoGIsPkg.? to SoGReqPkg.?
  perform assignstr[replace(field[usrChosen1].chosen.tagids[SoGIsPkg.?],"SoGReqPkg.","",0)]]]></eval>
    </thing>
  <thing id="sogDbInstrumentAc" name="Instrumental Acoustics" compset="SoGDrawbk" description="Without your own melodies as a base, you find it difficult to sing with proper tempo and rhythm. In order to begin or maintain an act, dance, or lyric, you must play an instrument with at least 1 hand (or at least enough hands to play the instrument). You gain an (act), (dance), or (lyric) talent." summary="Play instruments to gain a free talent." panellink="tbSoGSurvivalis" uniqueness="useronce">
    <fieldval field="usrCandid1" value="component.SoGTalent &amp; SoGTlClass.Package &amp; SoGSphere.Performance &amp; (SoGIsPkg.Act | SoGIsPkg.Dance | SoGIsPkg.Lyric)"/>
    <usesource source="pPF1e_Sph_Guile" parent="pPF1e_Sph" name="Spheres of Guile"/>
    <tag group="SoGSphere" tag="Performance" name="Performance" abbrev="Performance"/>
    <tag group="ChooseSrc1" tag="Hero"/>
    <eval phase="First" priority="450"><![CDATA[~ Do nothing if disabled.
  doneif (tagis[Helper.SpcDisable] <> 0)
  ~ Or if nothing chosen.
  doneif (field[usrChosen1].ischosen = 0)

  ~ Gain a(act), (dance), or (lyric) talent
  ~ from a package you have chosen.
  perform field[usrChosen1].chosen.setfocus
  if (focus.tagis[SoGTalDesc.PerfAct] <> 0) then
    perform assign[SoGFreeTal.PerfAct]
  elseif (focus.tagis[SoGTalDesc.PerfDance] <> 0) then
    perform assign[SoGFreeTal.PerfDance]
  elseif (focus.tagis[SoGTalDesc.PerfLyric] <> 0) then
    perform assign[SoGFreeTal.PerfLyric]
  endif]]></eval>
    </thing>
  <thing id="sogSpSpellhack" name="Spellhacking Sphere" compset="SoGSphere" uniqueness="unique">
    <usesource source="pPF1e_Sph_Guile"/>
    <tag group="SoGSphere" tag="Spellhacking" name="Spellhacking"/>
    </thing>
  <thing id="resSGSESpellhack" name="Bonus Spellhacking Talents" compset="Resource" panellink="tbSoGSpellhack">
    <fieldval field="resObject" value="Bonus Spellhacking Talents"/>
    <usesource source="pPF1e_Sph_Guile"/>
    <tag group="SoGSphere" tag="Spellhacking"/>
    <tag group="SoGBonTal" tag="Spellhacking"/>
    <eval phase="Final">~ Add bonus talents
        field[resMax].value += hero.tagcount[SoGBonTal.Spellhacking]</eval>
    <eval phase="Final" priority="999999999999" index="2"><![CDATA[
        ~ If we have any bonus talents, show the sphere tab
        if (field[resMax].value > 0) then
          perform pulltags[SoGBonTal.?,SoGSphTab]
          perform hero.pushtags[SoGSphTab.?]
        endif]]></eval>
    </thing>
  <thing id="sogTlHdSpe" name="{align center}Spellhacking" compset="SoGTalent" isshowonly="yes">
    <tag group="SoGSphere" tag="Spellhacking"/>
    <tag group="SoGTlClass" tag="GainSphere"/>
    </thing>
  <thing id="sogTlSpSpellHack" name="Spellhacking Sphere" compset="SoGTalent" description="Operatives of the Spellhacking sphere are skilled at getting spells and magic items to do what they want, even far beyond their normal limits.\n\n{b}Associated Skill{/b}: Use Magic Device.\n\n{b}Rule Note: Dispel Checks{/b}\n\nSome Spellhacking effects require you to succeed at a dispel check. A dispel check for the Spellhacking sphere is d20 + your ranks in the associated skill + any modifiers that specifically alter dispel checks. (It is not a skill check. Do not add your caster level.) You automatically fail this dispel check when you roll a 1 on the die.\n\n{b}Rule Note: Your Hacking Instrument{/b}\n\nUsing your hack magic ability requires repurposing a magic item, a spell focus, or similar tool. You must either hold the item in hand or wear it properly. Common choices for low-level operatives are dull gray ioun stones (which count as worn for the purpose of talents while orbiting), holy symbols, and spell component pouches. As with the Use Magic Device skill, your hacking methods can vary significantly depending on what magical effect you are hacking. You might need to experiment with magic words, cross magical runes, or handle an item in a bizarre manner.\n\n⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯⎯\n\nYou gain the following benefits when you gain the Spellhacking sphere.\n\nWhen you gain the Spellhacking sphere, you gain 5 ranks in Use Magic Device, plus 5 ranks per additional talent spent in the Spellhacking sphere (maximum ranks equal to your Hit Dice). If you already have ranks in Use Magic Device, you may immediately retrain them.\n\n{b}Skill Leverage{/b}: When you gain the Spellhacking sphere, you unlock skill leverage with the Spellcraft and Use Magic Device skills.\n\n{b}Bonus Talent{/b}: You gain one ordinary (hack) talent of your choice when you gain the Spellhacking sphere. It cannot be an exceptional talent.\n\nYou also acquire the Control Mishap and Hack Magic abilities." summary="Gain access to the Spellhacking Sphere." panellink="tbSoGSpellhack" uniqueness="useronce">
    <comment>TODO When SoGFreeTal.descriptor is done, chanage to use.</comment>
    <usesource source="pPF1e_Sph_Guile"/>
    <tag group="SoGSphere" tag="Spellhacking"/>
    <tag group="SoGAssocSk" tag="skUseMagic"/>
    <tag group="SkLeverage" tag="skSpellcr"/>
    <tag group="SkLeverage" tag="skUseMagic"/>
    <tag group="SoGTlClass" tag="GainSphere"/>
    <tag group="ChooseSrc1" tag="Hero"/>
    <tag group="Hide" tag="Activation"/>
    <tag group="SoGFreeTal" tag="Hack"/>
    <bootstrap thing="abSoGSkLeverage"></bootstrap>
    <bootstrap thing="sogSpSpellhack"></bootstrap>
    <bootstrap thing="sogTlControlMisha">
      <containerreq phase="First" priority="500">!SoGBanTal.sogTlControlMisha</containerreq>
      </bootstrap>
    <bootstrap thing="sogTlHackMagic">
      <containerreq phase="First" priority="500">!SoGBanTal.sogTlHackMagic</containerreq>
      </bootstrap>
    <bootstrap thing="sogTlMagicalReson">
      <containerreq phase="First" priority="500">!SoGBanTal.sogTlControlMisha</containerreq>
      </bootstrap>
    </thing>
  <thing id="sogTlControlMisha" name="Control Mishap" compset="SoGTalent" description="When you fail to activate a magic item or lose a spell by failing a concentration check, you can opt to control the unleashed magic as a swift or immediate action. You must attempt an associated skill check against DC 15 + effect’s caster level. A successful check produces the effect of a (mishap) talent you have, which replaces any other mishap that would happen (if any); a failed check changes nothing.\n\nIf a (hack) talent is also a (mishap), applying it as a mishap does not require hacking magic and it does not count against the limit of (hack) talents that can be applied to the effect.\n\nYou can also intentionally coax a (mishap) talent’s effect out of any magic item as a standard action with a successful associated skill check against DC 15 + item’s caster level. If you fail this check by 5 or more, you produce an uncontrolled mishap (GM’s choice, usually 2d6 bludgeoning damage to you or changing the target). Coaxing a mishap intentionally does not expend charges or uses from an item.\n\nWhen you gain the Spellhacking sphere, you gain the Magical Resonance mishap." uniqueness="useronce">
    <tag group="SoGSphere" tag="Spellhacking"/>
    <tag group="SoGTlClass" tag="InitTalent"/>
    <tag group="SoGTlClass" tag="Talent"/>
    <tag group="AbilType" tag="Super"/>
    </thing>
  <thing id="sogTlMagicalReson" name="Magical Resonance" compset="SoGTalent" description="The mishap causes magical vibrations to feedback between the source and the magic auras of all creatures, objects, and magical effects within 15 feet. The mishap sheds dim light in its area. You and any creature who spends a move action to study the area by sight are automatically aware of the presence or absence of magic in objects and creatures within the area and the strength of the strongest aura. The area moves with the source of the mishap and lasts for 1 minute per rank in the associated skill you possess. All but the simplest magic traps do not react to this effect.\n\nAs a standard action, you can touch or visually study an item, place, or creature to learn whether it is magical and the strength of its magic aura (if any). Once you know an aura’s strength, you can spend a standard action concentrating on that aura to attempt a Spellcraft check to identify its school of magic. Knowing an aura’s school allows a Knowledge check to identify a spell or special magical effect (a free action). If you are already aware of its aura, you can attempt to identify the properties of a magic item you can examine using Spellcraft as a standard action. Magical areas, multiple types of magic, or strong local magical emanations may distort or conceal weaker auras. If you possess at least 5 ranks in the associated skill, you can learn a target’s aura strength as a move action. With at least 10 ranks, you can identify an aura’s school of magic as a free action. With at least 15 ranks, you can identify a magic item’s properties as a move action.\n\n{b}Aura Strength{/b]: An aura’s power depends on a spell’s functioning spell level or an item’s caster level; If an aura falls into multiple categories, the mishap indicates the strongest one.\n\n{b}Lingering Aura{/b}: A magical aura lingers after a spell ends or a magic item is destroyed. If you examine such a location, you sense an aura strength of dim (even weaker than a faint aura). How long the dim aura lingers depends on its original power:" uniqueness="useronce">
    <tag group="SoGSphere" tag="Spellhacking"/>
    <tag group="SoGTlClass" tag="InitTalent"/>
    <tag group="SoGTlClass" tag="Talent"/>
    <tag group="SoGTalDesc" tag="Mishap"/>
    </thing>
  <thing id="sogTlHackMagic" name="Hack Magic" compset="SoGTalent" description="As a standard action, you modify a magic item or ongoing magical effect by either applying a single (hack) talent to it or removing one from it. You must touch a hacking instrument (described above) as part of hacking magic. You can always hack an effect or item within your natural reach; in addition, you can hack an effect if you are within its range (so you could hack a medium-range spell cast at 9th level while you are within 190 feet of the effect) as long as you can sense its source, target, area, or effect. When calculating range to an area effect, use its point of origin (not its edge).\n\nYou must succeed at a dispel check to hack magic unless the effect was produced by a creature willing for you to alter it or an item held by a willing creature. The DC is 11 + caster level and automatically fails if you roll a 1 on the die. You automatically fail to hack a curse or cursed item if the curse’s DC is greater than 11 + the number ranks in the associated skill you possess. Once you attempt to hack an effect (successfully or not), you automatically fail further attempts to either add or remove that talent (whichever you already attempted to do) on that effect for 24 hours. You produce a mishap if your dispel check automatically fails or fails by 10 or more; the targeted effect remains unaltered. The mishap deals 2d6 bludgeoning damage to you (unless you successfully use control mishap).\n\nIf you readied an action to hack an effect from a specific source, you can alter that effect as it begins. The caster (if any) is aware of the effects of the (hack) talent, and may choose the spell’s effects (but not stop casting it) with this in mind. You learn what the caster chose and apply the (hack talent) a split second before the magic takes effect.\n\nThe magic begins with the changes already in place. For example, if you apply the Reposition Magic talent to an area effect, the caster chooses where to place the area knowing that you can move it, then you choose a distance and direction to move the area (it takes effect at the destination you chose).\n\nA (hack) talent that does not produce an obvious change can only be noticed with a successful Spellcraft check against DC 11 + your associated skill modifier. Creatures get to roll this check to notice the hack whenever they spend at least a move action examining the item or effect and the first time they attempt to command or activate the effect after you hack it.\n\nThe alteration from hack magic ends after 1 hour per rank in the associated skill you possess. To remove your (hack) talent by hacking magic, an opponent must succeed at a dispel check against DC 11 + your associated skill ranks; if they possess the (hack) talent they want to remove, it is automatically removed and they may add a (hack) talent to the effect as part of the same action. The caster of a magical effect can undo your alteration as a standard action if they are within the effect’s range and succeed at a caster level check against the same DC.\n\nYou can always outwit any creature who has an item or effect on them that you hacked if you remove your hack as the cost to outwit them. You must be within hack magic range." uniqueness="useronce">
    <tag group="SoGSphere" tag="Spellhacking"/>
    <tag group="SoGTlClass" tag="InitTalent"/>
    <tag group="SoGTlClass" tag="Talent"/>
    <tag group="AbilType" tag="Super"/>
    </thing>
  <thing id="sogTlBlastTuning" name="Blast Tuning" compset="SoGTalent" description="{b}Target{/b}: A magical area effect in a line, cone, burst, or emanation\n\nYou can convert a burst, emanation, or line into a cone; or convert a cone into a line or burst. The resulting dimensions depend on the original dimensions. A line becomes a cone with length one-third the length of the line. A burst or emanation becomes a cone with length equal to twice the burst’s radius; if the new cone emanates from a creature, the creature can choose a new direction for the cone as a free action once per turn. A cone becomes either a line with triple the cone’s length or a burst centered on the caster with a radius equal to half the cone’s length. (You must first use the Prepared Hacking feat in order to alter an effect as you cast it.)" uniqueness="useronce">
    <tag group="SoGSphere" tag="Spellhacking"/>
    <tag group="SoGTlClass" tag="Talent"/>
    <tag group="SoGTalDesc" tag="Hack"/>
    </thing>
  <thing id="sogTlSteadyHacker" name="Steady Hacker" compset="SoGTalent" description="Adopting this approach is a swift action. Until you adopt another approach, you roll 2d10 instead of a d20 for Knowledge (arcana), Spellcraft, and Use Magic Device checks. You do not count as rolling a 1 on the die unless both d10s roll a 1. You can also spend 1 use of skill leverage to take 10 on a Knowledge (arcana) or Spellcraft check, even in combat or when otherwise distracted.">
    <tag group="SoGSphere" tag="Spellhacking"/>
    <tag group="SoGTlClass" tag="Talent"/>
    <tag group="SoGTalDesc" tag="Approach"/>
    </thing>
  <thing id="sogTlObscuringMis" name="Obscuring Mishap" compset="SoGTalent" description="The mishap takes the form of a 20-foot radius burst related to the item’s nature that you can center on a point within close range (25 feet + 5 feet per 2 ranks in the associated skill you possess). An item that normally deals damage, alters the area, or conjures anything instead conjures a blast of harmless gasses, swarms, or clouds (such as steam, ash, smoke, butterflies, ink, or leaves). Other items create a visual illusion related to their usual effect (such as a rain of sparkling copper from a wand of daylight). Regardless of its nature, the cloud provides concealment within 5 feet and total concealment beyond 5 feet. The mishap lasts for 1 minute per rank in the associated skill you possess. A cloud (but not an illusion) is dispersed by a moderate wind (11+ mph) in 4 rounds, or by a strong wind (21+ mph) in 1 round. An illusion can be disbelieved with a Will saving throw (making it transparent to the disbeliever).\n\nIf you have at least 5 ranks in the associated skill and the source has a caster level of at least 5th, you can choose for the cloud to either extend another 5 feet per 5 ranks you possess, or cast bright light within its area and raise the level of illumination 20 feet beyond by one step." uniqueness="useronce">
    <comment>TODO Add minutes and 5+ ranks</comment>
    <fieldval field="abText" value="feet"/>
    <fieldval field="abValue" value="25"/>
    <usesource source="pPF1e_Sph_Guile"/>
    <tag group="SoGSphere" tag="Spellhacking"/>
    <tag group="SoGTlClass" tag="Talent"/>
    <tag group="SoGTalDesc" tag="Mishap"/>
    <tag group="SoGAbV1Sc" tag="5_2A"/>
    <tag group="LvNamePar" tag="AppText"/>
    <tag group="LvNamePar" tag="AppValue"/>
    </thing>
  <thing id="sogTlFalseActivat" name="False Activation" compset="SoGTalent" description="The mishap takes the form of an illusion of the item’s usual non-illusory effect (a figment for an area, object, or creature, or a glamer for a targeted effect). Observers who interact with the illusion can disbelieve it with a successful Will saving throw (making it transparent to them). The illusion lasts as long as the effect normally would, up to a maximum of 1 hour per rank you possess in the associated skill. The illusion is always visual, and you can add one other sense of your choice from auditory, olfactory, or temperature if you possess at least 5 associated skill ranks and the source has a caster level of at least 5th. You cannot apply this mishap to an item or failed spell without a perceptible effect or with a purely illusory perceptible effect." uniqueness="useronce">
    <comment>TODO 5+ ranks upgrade</comment>
    <fieldval field="abText" value="hours"/>
    <usesource source="pPF1e_Sph_Guile"/>
    <tag group="SoGSphere" tag="Spellhacking"/>
    <tag group="SoGTlClass" tag="Talent"/>
    <tag group="SoGTalDesc" tag="Mishap"/>
    <tag group="SoGTalDesc" tag="Utility"/>
    <tag group="SoGAbV1Sc" tag="1_1A"/>
    <tag group="LvNamePar" tag="AppText"/>
    <tag group="LvNamePar" tag="AppValue"/>
    </thing>
  <thing id="sogTlWatchfulMish" name="Watchful Mishap" compset="SoGTalent" description="The mishap produces a scrying sensor on the intended target or in the intended area. If the sensor would appear beyond medium range, instead it appears at a random location of the GM’s choice within 15 feet of you. If the source does not normally have a target or area, the sensor watches the magic item. You can view the sensor’s vision instead of your own by concentrating as a standard action. The sensor’s range of vision is limited to within 15 feet of itself. If the sensor is on a creature or object, it moves with them at a speed of up to 120 feet per round. The sensor remains active for 1 hour per rank you possess in the associated skill.\n\nIf you have at least 5 ranks in the associated skill and the source has a caster level of at least 5th, the sensor can see invisible things. With 10 ranks and caster level 10th, the sensor can produce the effects of detect thoughts using your sphere DC as part of your action to concentrate on the sensor.\n\nWith 15 ranks and caster level 15th, you can send and receive telepathic messages through the sensor to any creature it can see that knows a language." uniqueness="useronce">
    <comment>TODO 5+ and 15+ ranks upgrade</comment>
    <fieldval field="abText" value="hours"/>
    <usesource source="pPF1e_Sph_Guile"/>
    <tag group="SoGSphere" tag="Spellhacking"/>
    <tag group="SoGTlClass" tag="Talent"/>
    <tag group="SoGTalDesc" tag="Mishap"/>
    <tag group="SoGTalDesc" tag="Utility"/>
    <tag group="SoGAbV1Sc" tag="1_1A"/>
    <tag group="LvNamePar" tag="AppText"/>
    <tag group="LvNamePar" tag="AppValue"/>
    </thing>
  <thing id="sogTlRepurposeAct" name="Repurpose Activated Item" compset="SoGTalent" description="{b}Target{/b}: A magic item\n\nWhen you apply this hack, you coax a basic magical effect from a magic item by exploiting its underlying principles. When you apply this talent you choose either one school of magic or one magic sphere the item has in its aura or among effects it produces.\n\nThe item gains one new function according to the school or sphere chosen; this function requires a command word you speak as you apply the hack and also requires wearing or wielding it as normal. If a school, you choose a level 0 spell of that school. If a magic sphere, you choose one of the sphere’s base powers. The item can be activated to cast the chosen spell or base power at will. If the power has any costs, the user or the item must pay the cost. Activating the item in this altered manner takes the usual action for the spell you produce. You can activate the item as part of applying this talent (if you wear or wield it properly). Use your Spellhacking sphere DC if a save is allowed. The effect is still produced by the item, but the caster level is the lower of the item’s caster level or your number of ranks in your Spellhacking associated skill." uniqueness="useronce">
    <usesource source="pPF1e_Sph_Guile"/>
    <usesource source="pPF1e_Sph_LotSpheres"/>
    <tag group="SoGSphere" tag="Spellhacking" name="Spellhacking" abbrev="Spellhacking"/>
    <tag group="SoGTlClass" tag="Talent" name="Basic Talent" abbrev="Basic Talent"/>
    <tag group="SoGTalDesc" tag="Hack" name="Hack" abbrev="Hack"/>
    </thing>
  <thing id="sogTlSubvertInfor" name="Subvert Information" compset="SoGTalent" description="{b}Target{/b}: A magic item or magical effect that stores information (such as a trigger or bypass condition) or that passes information to its caster or another creature\n\nYou tap into the information stored or transmitted by the target, learning and potentially altering it. When the target transmits information, such as the results of a divination effect or the mental alarm from an alarm spell, you learn all that information as long as this (hack) talent remains applied to the effect. When you hack magic or as a standard action while the effect is in hack magic range, you can choose one of the following ways to tamper with the magical effect.\n\n    * Alter or replace the next piece of information the item or effect sends or receives. (Changes also alter the copy you receive.) If the information is sent continuously or covers more than 1 minute of information, as in the case of a prolonged telepathic message, scrying, or prying eyes, you alter up to 1 minute of information per associated skill rank. Altering text requires a Linguistics check as if making a forgery. Altering a creature’s or object’s appearance requires a Disguise check opposed by Perception. Altering spoken or signed words requires a Bluff check opposed by Sense Motive. Altering other information (such as the nature of an aura) gives the caster a Spellcraft check to notice your tampering (as described in hack magic) if they otherwise would not get one.\n    * Attempt to learn information stored in the magical effect or item. You must attempt a check using the associated skill against DC 15 + 150% caster level. If you succeed, you learn one piece of stored information, such as one way an alarm can be bypassed, the way a contingency is triggered, the message stored in a magic mouth, a command word for a magic item, or the alignment a forbiddance is keyed to. If you fail, you cannot attempt this skill check against that magical effect again for 24 hours." uniqueness="useronce">
    <comment>TODO No calculations done</comment>
    <usesource source="pPF1e_Sph_Guile"/>
    <tag group="SoGSphere" tag="Spellhacking" name="Spellhacking" abbrev="Spellhacking"/>
    <tag group="SoGTlClass" tag="Talent" name="Basic Talent" abbrev="Basic Talent"/>
    <tag group="SoGTalDesc" tag="Hack" name="Hack" abbrev="Hack"/>
    <tag group="SoGTalDesc" tag="Utility"/>
    </thing>
  <thing id="sogTlDazzlingMish" name="Dazzling Mishap" compset="SoGTalent" description="The mishap takes the form of a 30-foot emanation of light from yourself or the item. The exception is items or effects that must target or produce undead, use negative energy, have the shadow descriptor, or produce cold or darkness; they emit darkness instead. The emanation raises (or lowers) the light level by one step and suppresses magical darkness (or light, whatever is opposite) with a lower caster level than the item’s. When light appears, creatures in the area (including you) must succeed at a Fortitude saving throw or be dazzled for 1 round (darkness does not have this effect). The illumination change moves with the source of the mishap and lasts for 1 minute per rank in the associated skill you possess.\n\nIf you have at least 5 associated skill ranks and the source has a caster level of at least 5th, you can choose for the item to change the light level by two steps in the 30-foot emanation and one step for 30 feet beyond; the light also suppresses magical concealment and invisibility on creatures in the area with caster level less than the item’s.\n\nWith 10 associated skill ranks and caster level 10th, either creatures in an area made bright by the spell are blinded instead of dazzled on a failed save or the darkness can be supernaturally dark, blocking darkvision.\n\nWith 15 associated skill ranks and caster level 15th, you can choose for the mishap to deal damage when it begins. Light deals 1d6 points of damage (1d10 against undead, fungi, and oozes) per 2 ranks you possess; darkness deals 1d6 points of cold damage per 2 ranks you possess. A successful save reduces the damage by half." uniqueness="useronce">
    <fieldval field="abText" value="minutes"/>
    <usesource source="pPF1e_Sph_Guile" parent="pPF1e_Sph" name="Spheres of Guile"/>
    <tag group="SoGSphere" tag="Spellhacking" name="Spellhacking" abbrev="Spellhacking"/>
    <tag group="SoGTlClass" tag="Talent" name="Basic Talent" abbrev="Basic Talent"/>
    <tag group="SoGTalDesc" tag="Mishap" name="Spellhacking (mishap)" abbrev="Spellhacking (mishap)"/>
    <tag group="SoGAbV1Sc" tag="1_1A"/>
    <tag group="LvNamePar" tag="AppText" name="Append &quot;field[abText].text&quot;" abbrev="Append &quot;field[abText].text&quot;"/>
    <tag group="LvNamePar" tag="AppValue" name="Append &quot;field[abValue].value&quot;" abbrev="Append &quot;field[abValue].value&quot;"/>
    </thing>
  <thing id="sogTlTerrainMisha" name="Terrain Mishap" compset="SoGTalent" description="The mishap conjures random objects into a 10-foot radius circle that you can center on a point within close range (25 feet + 5 feet per 2 ranks in the associated skill you possess). The objects form either a layer of slippery liquid or cluttering obstacles thematically related to the intended effect (such as rocks for something that toughens skin, pitch for a fireball, or crystals for a divination). The surfaces in the area become difficult terrain. Creatures in the area must succeed at a Reflex saving throw with an effect determined by the source of the mishap. A source that would deal damage, alter the area, or conjure anything makes creatures entangled until they leave the area; other effects make creatures fall prone. The mishap lasts for 1 minute per associated skill rank you possess.\n\nIf you have at least 5 ranks in the associated skill and the source has a caster level of at least 5th, you can choose one of the following options:\n\n    * The area extends another 5 feet per 5 ranks you possess.\n    * The area traps creatures that fail their Reflex save until they spend a standard action and succeed at either an Escape Artist check against your sphere DC or a DC 15 Strength check.\n    * The edges of the area provide cover that is 2 feet high (partial for Medium creatures or standard cover for Small creatures) either against creatures outside the area or above the area." uniqueness="useronce">
    <fieldval field="abText" value="feet"/>
    <fieldval field="abValue" value="25"/>
    <usesource source="pPF1e_Sph_Guile" parent="pPF1e_Sph" name="Spheres of Guile"/>
    <tag group="SoGSphere" tag="Spellhacking" name="Spellhacking" abbrev="Spellhacking"/>
    <tag group="SoGTlClass" tag="Talent" name="Basic Talent" abbrev="Basic Talent"/>
    <tag group="SoGTalDesc" tag="Mishap" name="Spellhacking (mishap)" abbrev="Spellhacking (mishap)"/>
    <tag group="SoGAbV1Sc" tag="5_2A"/>
    <tag group="LvNamePar" tag="AppText" name="Append &quot;field[abText].text&quot;" abbrev="Append &quot;field[abText].text&quot;"/>
    <tag group="LvNamePar" tag="AppValue" name="Append &quot;field[abValue].value&quot;" abbrev="Append &quot;field[abValue].value&quot;"/>
    </thing>
  <thing id="sogTlFlexibleItem" name="Flexible Item Repurposing" compset="SoGTalent" description="{b}Prerequisites:{/b} Spellhacking sphere (Repurpose Activated Item).\n\nYou can coax more unusual magic effects from activated items. When you gain this talent, you choose either one school of magic or one magic sphere, plus another different school or sphere for every 5 ranks in the associated skill you possess.\n\nIf you choose spheres, for each sphere you choose a non-advanced talent from that sphere. If you choose schools, you choose a spell for each school; one must be 1st level and each subsequently chosen spell can be up to one spell level higher.\n\nWhen you apply Repurpose Activated Item to an item which has a chosen sphere or school, you can select the spell of that school or the talent from that sphere as the repurposed function. If the item has limited uses or charges, producing this altered effect consumes one of those uses or charges. If the item has spell points, you can spend those spell points for this effect.\n\nYou can change your choice of spells or talents whenever you gain a level. You can choose this talent multiple times. Each time you do, you choose new schools of magic or new spheres." uniqueness="useronce">
    <fieldval field="abText" value="choices"/>
    <fieldval field="abValue" value="1"/>
    <usesource source="pPF1e_Sph_Guile"/>
    <usesource source="pPF1e_Sph_LotSpheres"/>
    <tag group="SoGSphere" tag="Spellhacking"/>
    <tag group="SoGTlClass" tag="Talent"/>
    <tag group="SoGAbV1Sc" tag="1_5A"/>
    <tag group="LvNamePar" tag="AppText"/>
    <tag group="LvNamePar" tag="AppValue"/>
    <exprreq message="Repurpose Activated Item required."><![CDATA[#hasability[sogTlRepurposeAct] <> 0]]></exprreq>
    </thing>
  <thing id="sogTlGlitchedHack" name="Glitched Hack" compset="SoGTalent" description="Whenever you attempt to hack magic a target that you have already attempted to target within the last 24 hours, you can either spend 1 use of skill leverage or suffer 2 points of ability burn to your operative ability modifier to ignore the 24 hour limit for the next time they hack the effect or item.\n\n{b}Note - Ability Burn:{/b} Ability burn is a penalty which functions similarly to ability score damage, but cannot be removed by any means other than 8 hours of resting, removing all ability burn. Ability burn is otherwise not ability score damage; immunity and effects that ignore or reduce ability score damage do not apply to ability burn." uniqueness="useronce">
    <usesource source="pPF1e_DRS_ThaPot"/>
    <usesource source="pPF1e_Sph_Guile"/>
    <tag group="SoGSphere" tag="Spellhacking"/>
    <tag group="SoGTlClass" tag="Talent"/>
    </thing>
  <thing id="sogTlHideManifest" name="Hide Manifestation" compset="SoGTalent" description="When you successfully cast a spell defensively or activate a magic item, you can attempt to hide perceptible signs that a spell is originating from you. (As clarified in Pathfinder Roleplaying Game: Ultimate Intrigue most spells and spell-like abilities produce an obvious flash, sound, or other manifestation that magic has been used.)\n\nThis is not possible with a touch spell, ray, fireball, or any other spell where an intrinsic part of the spell’s effect obviously comes from you. This talent does not hide somatic or verbal components (although you can still do so by other means such as the new Spellcraft skill use to whisper verbal components on page 71). You must attempt a check with the associated skill to determine how hard it is for observers to notice the manifestation.\n\nCreatures can notice your magic’s manifestation with an opposed Perception or Spellcraft check with a bonus equal to the spell’s level (using whichever modifier is higher). If you provided no noticed components, observers who fail to notice the manifestation cannot tell you performed magic.\n\n{b}Associated Feat:{/b} Conceal Spell (Pathfinder Roleplaying Game: Ultimate Intrigue)." uniqueness="useronce">
    <usesource source="pPF1e_Sph_Guile"/>
    <tag group="SoGSphere" tag="Spellhacking"/>
    <tag group="SoGTlClass" tag="Talent"/>
    <tag group="HasFeat" tag="fConcealSp"/>
    </thing>
  <thing id="sogTlMalfunctDweo" name="Malfunction Dweomer" compset="SoGTalent" description="{b}Target:{/b} A magic item, or an ongoing magical effect.\n\nYou cause the magic within the target to grow unstable, gaining a 20% instability chance, which increases by 10% for every 4 ranks in the associated skill you possess. This instability persists for 1 minute, after which it deactivates (although the hack persists). You can spend a standard action while the effect is within your hack magic range to reactivate this instability for 1 minute.\n\nIf the item has a passive or constant effect or is an ongoing magical effect (such as a +1 longsword, ring of protection +1, or an Protection sphere aegis), the user rolls a d100 at the start of their turn for as long as the target is affected; if the item needs to be activated to be used (such as a wand, scroll, potion, or a cape of the mountebank), the user rolls a d100 whenever the item is used.\n\nIf the result of the roll is equal to or below its instability chance, it becomes suppressed (as the Counterspell feat) until the beginning of the user’s next turn; otherwise it functions as normal for that round.\n\nYou can outwit the user as an immediate action (as long as they are within hack magic range) to force them to immediately roll their instability chance for the hacked item." uniqueness="useronce">
    <usesource source="pPF1e_DRS_ThaPot"/>
    <usesource source="pPF1e_Sph_Guile"/>
    <tag group="SoGSphere" tag="Spellhacking"/>
    <tag group="SoGTlClass" tag="Talent"/>
    <tag group="SoGTalDesc" tag="Hack"/>
    </thing>
  <thing id="sogTlRepositiArea" name="Reposition Area" compset="SoGTalent" description="{b}Target:{/b} A magical area effect centered on a point in space (not a targeted spell nor a conjured effect, nor any area centered on or emanating from a creature or object)\n\nYou move a magical area 5 feet in any direction. For every 5 ranks in the associated skill that you possess, the distance you can move the effect increases by 5 feet. If the effect is normally mobile (such as a flaming sphere), you get a +4 circumstance bonus on any dispel check that might be required to hack magic, you are not restricted from hacking the effect again, and the new location does not count as a hack (it cannot be removed, although the effect can be moved normally from its new location). When this hack is removed, the effect returns to its prior position.\n\nIf you change an instantaneous area’s location (perhaps by using a readied action to hack magic) and it requires a saving throw, creatures excluded by this hack’s alteration must still attempt a saving throw but get a +4 bonus on the saving throw. Creatures included only because of this hack also get this bonus on their saving throw.\n\nIf you possess at least 10 ranks in the associated skill, this talent gains the (mishap) tag. When you Reposition Area as a mishap, the new location is chosen randomly by the GM within this talent’s parameters." uniqueness="useronce">
    <fieldval field="abText" value="feet"/>
    <fieldval field="abValue" value="5"/>
    <usesource source="pPF1e_Sph_Guile"/>
    <tag group="SoGSphere" tag="Spellhacking"/>
    <tag group="SoGTlClass" tag="Talent"/>
    <tag group="SoGTalDesc" tag="Hack"/>
    <tag group="SoGAbV1Sc" tag="5_5A"/>
    <tag group="LvNamePar" tag="AppText"/>
    <tag group="LvNamePar" tag="AppValue"/>
    <eval phase="PostAttr" priority="12000"><![CDATA[~ Get out if disabled
  doneif (tagis[Helper.SpcDisable] <> 0)
  ~ Or if less than 10 ranks.
  doneif (field[tAssocRanks].value < 10)
  ~ Or if not FirstCopy
  doneif (tagis[Helper.FirstCopy] = 0)

  ~ We have 10+ ranks
  perform assign[SoGTalDesc.Mishap]]]></eval>
    </thing>
  <thing id="sogTlSabotageItem" name="Sabotage Item" compset="SoGTalent" description="{b}Target:{/b} A magic item\n\nYou alter the properties of a magic item. When you place the sabotage, you can choose for it to have a mishap the next time it is activated or when it is activated in a clear, observable circumstance you define. Instead of the intended effect, the item produces the effect of one of your (mishap) talents. This hack then ends.\n\nYou cannot use this talent to sabotage more items at once than your operative ability modifier; sabotaging another ends another sabotage of yours chosen at random.\n\n{b}Associated Feat:{/b} Sabotage Magic Item (Pathfinder Roleplaying Game: Ultimate Intrigue)." uniqueness="useronce">
    <usesource source="pPF1e_Sph_Guile"/>
    <tag group="SoGSphere" tag="Spellhacking"/>
    <tag group="SoGTlClass" tag="Talent"/>
    <tag group="SoGTalDesc" tag="Hack"/>
    <tag group="HasFeat" tag="fSaboMagIt"/>
    </thing>
  <thing id="sogTlShiftEnchant" name="Shift Enchantment" compset="SoGTalent" description="{b}Target:{/b} A magic set of armor, implement, shield, or weapon.\n\nYou alter the way that the item’s enhancement bonuses are invested, choosing one of the following benefits to grant to the object.\n\n{b}Reconstitute Enchantment:{/b} You change a +1 enhancement bonus (or a +1 special quality) to a special quality from the following list:\n\n{indent 20}\n* {i}Armor:{/i} balanced, light fortification, stanching, shadow.\n* {i}Weapon:{/i} corrosive, distance, flaming, frost, ghost touch, keen, merciful, shock\n* {i}Shield:{/i} bashing, blinding, clangorous, intercepting, mirrored, ramming.\n* {i}Implement:{/i} aiming, aggressive, equitable.\n{indent -20}\nThe target must still retain a +1 enhancement bonus for special qualities to be applied or altered this way.\n\nAt 5 ranks in the associated skill, you can change an additional +1 enhancement bonus (or +1 special quality) this way, either to another special quality above, or you can change a +2 enhancement bonus (or +2 special quality) to a special quality from the following list:\n\n{indent 20}\n* {i}Armor or shield:{/i} arrow deflection, spell dodging, spell resistance (13).\n* {i}Weapon:{/i} corrosive burst, defiant, flaming burst, icy burst, shocking burst, negating.\n* {i}Implement:{/i} capacitance, girding\n{indent -20}\n{b}Breakdown Enchantment:{/b} You choose a special quality that the item possesses, replacing it with an enhancement bonus equal to the cost of the special quality, as long as the item’s enhancement bonus does not exceed +5 (for example, with a +2 flaming keen longsword, you could remove flaming to instead make it a +3 keen longsword). Any unspent enhancement bonuses are wasted.\n\nAt 5 ranks in the associated skill, you can replace a second special quality this way." uniqueness="useronce">
    <usesource source="pPF1e_DRS_ThaPot"/>
    <usesource source="pPF1e_Sph_Guile"/>
    <tag group="SoGSphere" tag="Spellhacking"/>
    <tag group="SoGTlClass" tag="Talent"/>
    <tag group="SoGTalDesc" tag="Hack"/>
    </thing>
  <thing id="sogTlSHSplinterMa" name="Splinter Magic" compset="SoGTalent" description="{b}Target:{/b} A magical effect with at least one target, a duration of at least 5 rounds, and a range greater than personal\n\nYou fracture a targeted magical effect, splitting it to include an additional valid target for the effect. The new target must be within the effect’s range from you and the effect or both must be within your reach. You can ignore the effect’s own limits on distance between multiple targets (such as mass charm person). The target gets any saving throw allowed, negating the effect on a success. You make any attack roll required. If the effect allows spell resistance, you make the check, using the number of ranks in the associated skill you possess in place of your caster level. If the effect has a concentration duration, you must concentrate to maintain the splinter. You cannot use Splinter Magic on the splinter effect produced by this talent.\n\nIf the effect normally allows only 1 target, the splinter magic is less effective due to how its magic must be split to affect the new target. This has the following effects: new target gets a +2 bonus on its saving throw and to its spell resistance against the splinter effect, and the duration of the splinter effect on the new target (if not instantaneous, concentration, or permanent) is one-fifth the remaining duration on the target you are copying it from (at minimum lasting until the end of your next turn). You cannot splinter a single-target effect that is permanent except with the Retarget Magic exceptional talent." uniqueness="useronce">
    <usesource source="pPF1e_Sph_Guile"/>
    <tag group="SoGSphere" tag="Spellhacking"/>
    <tag group="SoGTlClass" tag="Talent"/>
    <tag group="SoGTalDesc" tag="Hack"/>
    </thing>
  <thing id="sogTlPrescienHack" name="Prescient Hack" compset="SoGTalent" description="You can delay the application of your hack magic ability until you are ready to exploit it. You can reveal a plan to be a use of hack magic to alter a magic item or effect you could access when you last prepared plans. Revealing this plan is a full-round action, which can include drawing and activating the item you reveal to be hacked if the activation is normally a standard action or less, or else concentrating on or otherwise directing a magic effect you reveal to be hacked." uniqueness="useronce">
    <usesource source="pPF1e_Sph_Guile"/>
    <tag group="SoGSphere" tag="Spellhacking"/>
    <tag group="SoGTlClass" tag="Talent"/>
    <tag group="SoGTalDesc" tag="Plan"/>
    </thing>
  <thing id="sogDbTruenamer" name="Truenamer" compset="SoGDrawbk" description="You use Linguistics instead of Use Magic Device as the associated skill." summary="You can use Sleight of Hand adeptly." panellink="tbSoGSpellhack" uniqueness="useronce">
    <usesource source="pPF1e_Sph_Guile" parent="pPF1e_Sph" name="Spheres of Guile"/>
    <tag group="SphOfGuil" tag="NoBnTalent" name="No Bonus Talent from this Drawback" abbrev="No Bonus Talent from this Drawback"/>
    <tag group="SoGSphere" tag="Spellhacking"/>
    <tag group="SoGTlClass" tag="AltStart" name="Alternate Start" abbrev="Alternate Start"/>
    <eval phase="First" priority="1000"><![CDATA[~ Get out if disabled
     doneif (tagis[Helper.SpcDisable] <> 0)

      ~ This change is kept after a buy off.
      perform hero.findchild[SoGTalent,"SoGSphere.Spellhacking & SoGTlClass.GainSphere"].setfocus
      doneif (state.isfocus = 0)

      ~ Delete the default
      perform focus.delete[SoGAssocSk.skUseMagic]

      perform focus.assign[SoGAssocSk.skLinguist]]]>
      <after name="Assign initial Associated Skill"/>
      </eval>
    </thing>
  <thing id="sogDbPersonalHack" name="Personal Hacking" compset="SoGDrawbk" description="You may only use hack magic on effects that you cast, and cannot use hack magic on effects cast by a creature in range, even if they are willing. You gain a (hack) talent." summary="You may only hack your spells, but have more hacks." panellink="tbSoGSpellhack" uniqueness="useronce">
    <usesource source="pPF1e_Sph_Guile" parent="pPF1e_Sph" name="Spheres of Guile"/>
    <tag group="SphOfGuil" tag="NoBnTalent" name="No Bonus Talent from this Drawback" abbrev="No Bonus Talent from this Drawback"/>
    <tag group="SoGSphere" tag="Spellhacking" name="Spellhacking" abbrev="Spellhacking"/>
    <tag group="SoGFreeTal" tag="Hack"/>
    <eval phase="First" priority="1000" index="2"><![CDATA[~ Get out if disabled
     doneif (tagis[Helper.SpcDisable] <> 0)

     ~ grant a bonus (hack) talent

     ~ Find a sphere-specific (hack).
     perform hero.findchild[SoGTalent,"SoGSphere.Spellhacking & SoGTalDesc.Hack & !SoGTlClass.SoGBonusTl & !SoGTlClass.ExcepTalent & !SoGTlClass.InitTalent"].setfocus
     doneif (state.isfocus = 0)

     perform focus.assign[SoGTlClass.InitTalent]
     field[abValue].value = 1]]></eval>
    <eval phase="PostAttr" priority="10000"><![CDATA[~ Get out if disabled
  doneif (tagis[Helper.SpcDisable] <> 0)

  #appenddesc[sogTlHackMagic,"{b}" & field[thingname].text & ":{/b} You may only use hack magic on effects that you cast, and cannot use hack magic on effects cast by a creature in range, even if they are willing."]]]></eval>
    </thing>
  <thing id="sogDbStableInstru" name="Stable Instrument" compset="SoGDrawbk" description="You do not gain the control mishap ability, and gain the Steady Hacker talent instead. If you choose a [utility] talent as your free (hack) talent, the base sphere gains the [utility] tag." summary="You can use Sleight of Hand adeptly." panellink="tbSoGSpellhack" uniqueness="useronce">
    <comment>TODO add Steady Hacker, utility start</comment>
    <usesource source="pPF1e_Sph_Guile" parent="pPF1e_Sph" name="Spheres of Guile"/>
    <tag group="SphOfGuil" tag="NoBnTalent"/>
    <tag group="SoGSphere" tag="Spellhacking"/>
    <tag group="SoGTlClass" tag="UtilStart"/>
    <tag group="SoGBanTal" tag="sogTlControlMisha"/>
    <bootstrap thing="sogTlSteadyHacker"></bootstrap>
    </thing>
  <thing id="sogDbDestabilizFo" name="Destabilized Focus" compset="SoGDrawbk" description="Through a damaged implement, unstable source of magic, or some other source of instability, you have adapted to using these mishaps to your advantage. You do not gain the hack magic ability (or a (hack) talent of your choice), and gain a (mishap) talent of your choice instead. If you choose a [utility] (mishap) talent, the base sphere gains the [utility] tag." summary="You can use Sleight of Hand adeptly." panellink="tbSoGSpellhack" uniqueness="useronce">
    <comment>TODO utility start, turn off bonus (hack) talent of base.

TODO When SoGFreeTal.descriptor is done, chanage to use.</comment>
    <usesource source="pPF1e_Sph_Guile" parent="pPF1e_Sph" name="Spheres of Guile"/>
    <tag group="SphOfGuil" tag="NoBnTalent"/>
    <tag group="SoGSphere" tag="Spellhacking"/>
    <tag group="SoGBanTal" tag="sogTlHackMagic"/>
    </thing>
  <thing id="sogSpStudy" name="Study Sphere" compset="SoGSphere" uniqueness="unique">
    <usesource source="pPF1e_Sph_Guile"/>
    <tag group="SoGSphere" tag="Study" name="Study"/>
    </thing>
  <thing id="resSGSEStudy" name="Bonus Study Talents" compset="Resource" panellink="tbSoGStudy">
    <fieldval field="resObject" value="Bonus Study Talents"/>
    <usesource source="pPF1e_Sph_Guile"/>
    <tag group="SoGSphere" tag="Study"/>
    <tag group="SoGBonTal" tag="Study"/>
    <eval phase="Final">~ Add bonus talents
        field[resMax].value += hero.tagcount[SoGBonTal.Study]</eval>
    <eval phase="Final" priority="999999999999" index="2"><![CDATA[
        ~ If we have any bonus talents, show the sphere tab
        if (field[resMax].value > 0) then
          perform pulltags[SoGBonTal.?,SoGSphTab]
          perform hero.pushtags[SoGSphTab.?]
        endif]]></eval>
    </thing>
  <thing id="sogTlHdStu" name="{align center}Study" compset="SoGTalent" isshowonly="yes">
    <tag group="SoGSphere" tag="Study"/>
    <tag group="SoGTlClass" tag="GainSphere"/>
    </thing>
  <thing id="sogTlSpStudy" name="Study Sphere" compset="SoGTalent" description="Operatives of the Study sphere are able to use their vast knowledge to their advantage, whether this be in a library or the heat of combat. These operatives hold information in high regard, and use it to great effect.\n\n{b}Associated Skill{/b}: A single Knowledge or Lore skill of your choice.\n\nYou gain the following benefits when you gain the Study sphere.\n\nWhen you gain the Study sphere, you gain 5 ranks in the associated skill, plus 5 ranks per additional talent spent in the Study sphere (maximum ranks equal to your Hit Dice). If you already have ranks in the chosen Knowledge or Lore skill you may immediately retrain them.\n\n{b}Skill Leverage{/b}: You unlock skill leverage with the associated skill, plus one Knowledge or Lore skill of your choice.\n\n{b}Bonus Talent{/b}: When you first gain the Study sphere, you gain one (theory) talent of your choice. It cannot be an exceptional talent. If you choose one with the [utility] tag, you can take the Study base sphere as a [utility] talent.\n\nYou also acquire the Knowledgeable, Prescient Study, and Theorize abilities.\n\nTODO: Bonus Talent, Knowledgeable, Prescient Study, and Theorize are not implemented." summary="Gain access to the Study Sphere." panellink="tbSoGStudy" uniqueness="useronce">
    <fieldval field="usrCandid1" value="component.BaseSkill &amp; (Helper.SkCatKnow | Helper.SkCatLore)"/>
    <fieldval field="usrCandid2" value="component.BaseSkill &amp; (Helper.SkCatKnow | Helper.SkCatLore)"/>
    <usesource source="pPF1e_Sph_Guile"/>
    <tag group="SoGSphere" tag="Study"/>
    <tag group="SoGTlClass" tag="GainSphere" name="Sphere access" abbrev="Sphere access"/>
    <tag group="ChooseSrc1" tag="Hero"/>
    <tag group="ChooseSrc2" tag="Hero"/>
    <tag group="Helper" tag="AlwaysAvl" name="AlwaysAvl" abbrev="AlwaysAvl"/>
    <tag group="Hide" tag="Activation"/>
    <tag group="SoGFreeTal" tag="Theory"/>
    <tag group="User" tag="NoAutoName"/>
    <bootstrap thing="sogSpStudy"></bootstrap>
    <bootstrap thing="sogTlKnowledgea">
      <containerreq phase="First" priority="500">!SoGBanTal.sogTlKnowledgea</containerreq>
      </bootstrap>
    <bootstrap thing="sogTlPresStudy">
      <containerreq phase="First" priority="500">!SoGBanTal.sogTlPresStudy</containerreq>
      </bootstrap>
    <bootstrap thing="sogTlTheorize">
      <containerreq phase="First" priority="500">!SoGBanTal.sogTlTheorize</containerreq>
      </bootstrap>
    <eval phase="First" priority="103" name="Assign initial Associated Skill"><![CDATA[      doneif (tagis[Helper.SpcDisable] <> 0)
      doneif (field[usrChosen1].ischosen = 0)

      perform assignstr["SoGAssocSk." & field[usrChosen1].chosen.idstring]]]></eval>
    <eval phase="PostLevel" priority="1500" name="Assign initial Skill Leverage"><![CDATA[     doneif (tagis[Helper.SpcDisable] <> 0)
     doneif (field[usrChosen1].ischosen + field[usrChosen2].ischosen = 0)

     if (field[usrChosen1].ischosen <> 0) then
       perform assignstr["SkLeverage." & field[usrChosen1].chosen.idstring]
     endif

     if (field[usrChosen2].ischosen <> 0) then
       perform assignstr["SkLeverage." & field[usrChosen2].chosen.idstring]
     endif]]></eval>
    </thing>
  <thing id="sogTlKnowledgea" name="Knowledgeable" compset="SoGTalent" description="You can attempt untrained Knowledge skill checks as if you were trained." uniqueness="useronce">
    <usesource source="pPF1e_Sph_Guile"/>
    <tag group="SoGSphere" tag="Study"/>
    <tag group="SoGTlClass" tag="InitTalent"/>
    <tag group="SoGTlClass" tag="Talent"/>
    <tag group="Helper" tag="ShowStatbl" name="ShowStatbl" abbrev="ShowStatbl"/>
    <tag group="Helper" tag="SpecUp" name="SpecUp" abbrev="SpecUp"/>
    <tag group="abAction" tag="None" name="No action" abbrev="None"/>
    <tag group="abRange" tag="Personal" name="Personal" abbrev="pers"/>
    <eval phase="PreAttr" priority="10000"><![CDATA[
      ~ If we're not shown, just get out now
      doneif (tagis[Helper.ShowSpec] = 0)

      ~ If we're disabled, do nothing
      doneif (tagis[Helper.SpcDisable] <> 0)

      var searchexpr as string
      if (hero.tagis[source.PUConsSkil] = 0) then
        searchexpr = "Helper.SkCatKnow"
      else
        searchexpr = "thingid.cskNature | thingid.cskReligio | thingid.cskSociety | thingid.cskSpellcr"
        endif

      foreach pick in hero from BaseSkill where searchexpr
        perform eachpick.delete[Helper.TrainOnly]
        nexteach]]></eval>
    </thing>
  <thing id="sogTlPresStudy" name="Prescient Study" compset="SoGTalent" description="You are able to predict what research might be useful to you. This typically involves refreshing your memory at a library rather than actually performing research; this research is assumed to have been done at some point in the past or during a sleepless night during downtime. When you reveal this plan (by, for example, consulting a cryptic note) as a full-round action, you may take 10 on a Knowledge or Lore check even in combat or while distracted.\n\nIf you have at least 5 ranks in the associated skill and spend 1 use of skill leverage, you may treat the result as if you had rolled 20 on the die.\n\nIf your campaign uses research rules (see Chapter 3 of Pathfinder Roleplaying Game: Ultimate Intrigue), instead choose a library you have been to and make a research check as if you had spent 8 hours researching there. You gain any information this research would reveal to you. Once you reveal a research check as a plan, you cannot reveal it again until you spend at least 8 hours with unrestricted access to a suitable library." uniqueness="useronce">
    <usesource source="pPF1e_Sph_Guile"/>
    <tag group="SoGSphere" tag="Study"/>
    <tag group="SoGTlClass" tag="InitTalent"/>
    <tag group="SoGTlClass" tag="Talent"/>
    <tag group="SoGTalDesc" tag="Plan"/>
    <tag group="Helper" tag="SpecUp" name="SpecUp" abbrev="SpecUp"/>
    <tag group="abAction" tag="FullRound"/>
    </thing>
  <thing id="sogTlTheorize" name="Theorize" compset="SoGTalent" description="As an immediate action, you can begin a theory on a creature, object, or area that you have successfully recalled information about, choosing a single (theory) talent to apply to the subject of your theory. A theory applies to all instances of the subject; if you begin a theory on a dire wolf, it applies to all dire wolves, but not other wolf-like animals. Creatures that vary exclusively by size (such as an earth elemental) or subtype (such as an orc and human bandit that share the same number of Hit Dice) are treated as the same `instance’ of a subject.\n\nWhile you have an active theory, you can expand it by gaining notions. Each theory can gain notions in unique ways, with a specific action granting one notion to the theory when it is observed. A specific action can only grant one notion once per round (unless specified otherwise). A theory can have a maximum number of notions equal to twice your operative ability modifier (minimum 1), with any notions beyond this maximum being wasted.\n\nYou can use these notions on any breakthrough listed within the theory; usually improving the base ability granted by the theory or granting you new actions to use.\n\nYou can only have one theory active at one time; if you attempt to theorize a second time while you have an active theory, you must choose which theory to maintain. A theory lasts until you change to a different subject, and remains indefinitely (so long as your memories remain intact). When a theory ends, it loses all notions.\n\nYou can always outwit the subject of your theory by spending 3 notions, generally by divulging something you have theorized about them." uniqueness="useronce">
    <usesource source="pPF1e_Sph_Guile"/>
    <tag group="SoGSphere" tag="Study"/>
    <tag group="SoGTlClass" tag="InitTalent"/>
    <tag group="SoGTlClass" tag="Talent"/>
    <tag group="Helper" tag="SpecUp" name="SpecUp" abbrev="SpecUp"/>
    <tag group="abAction" tag="Immediate"/>
    </thing>
  <thing id="sogTlFocusedStudy" name="Focused Study" compset="SoGTalent" description="You gain a Knowledge or Lore skill of your choice as an additional associated skill for this sphere, and you unlock skill leverage with that skill. You can choose this talent multiple times; each time choosing a new skill." summary="Gain an additional associated skill and leverage." uniqueness="useronce">
    <fieldval field="usrCandid1" value="component.BaseSkill &amp; (Helper.SkCatKnow | Helper.SkCatLore)"/>
    <usesource source="pPF1e_Sph_Guile"/>
    <tag group="SoGSphere" tag="Study"/>
    <tag group="SoGTlClass" tag="Talent"/>
    <tag group="SoGTalDesc" tag="Utility"/>
    <tag group="ChooseSrc1" tag="Hero"/>
    <tag group="Hide" tag="Activation"/>
    <eval phase="PostLevel" priority="103" name="Assign an additional Associated Skill"><![CDATA[     doneif (tagis[Helper.SpcDisable] <> 0)
     doneif (field[usrChosen1].ischosen = 0)

     perform hero.findchild[SoGTalent,"SoGSphere.Study & SoGTlClass.GainSphere"].setfocus
     doneif (state.isfocus = 0)

     ~ Assign to me, so I can use to validate.
     perform assignstr["SoGAssocSk." & field[usrChosen1].chosen.idstring]

     ~ Assign to the GainSphere talent.
     perform focus.assignstr["SoGAssocSk." & field[usrChosen1].chosen.idstring]]]></eval>
    <eval phase="PostLevel" priority="2000" name="Change Skill Leverage"><![CDATA[     doneif (tagis[Helper.SpcDisable] <> 0)
     doneif (field[usrChosen1].ischosen = 0)

     perform hero.findchild[SoGTalent,"SoGSphere.Study & SoGTlClass.GainSphere"].setfocus
     doneif (state.isfocus = 0)

     perform focus.assignstr["SkLeverage." & field[usrChosen1].chosen.idstring]]]>
     <after name="Assign initial Skill Leverage"/>
     </eval>
    <evalrule phase="Final" priority="2147483647" message="You cannot choose a skill already associated with the sphere."><![CDATA[     ~ Look for a skill already associated.
     doneif (field[usrChosen1].ischosen = 0)

     perform hero.findchild[SoGTalent,"SoGSphere.Study & SoGTlClass.GainSphere"].setfocus
     doneif (state.isfocus = 0)

     if (focus.tagcountstr["SoGAssocSk." & field[usrChosen1].chosen.idstring] > 1) then
               @valid = 0
               done
     endif
     @valid = 1]]></evalrule>
    </thing>
  <thing id="sogTlAnticipateHo" name="Anticipate Hostility" compset="SoGTalent" description="As long as the subject of your theory is a creature, you can establish its methods of attack. You gain an insight bonus to your AC against attacks originating from the subject of your theory equal to 2 + 1 per 10 ranks in the associated skill you possess.\n\nThis theory can gain notions in the following ways:\n\n    The subject of your theory misses an attack roll against another creature by 5 or more.\n    The subject of your theory succeeds an attack roll against another creature that exceeds their AC by 5 or more.\n    The subject of your theory confirms a critical hit.\n    The subject of your theory attempts an attack of opportunity against another creature.\n\n{b}Breakthrough{/b}: You can spend any amount of notions as an immediate action to increase the insight bonus granted by this talent’s base theory ability by 1 + 1 per 2 notions spent beyond the first (rounded down, minimum 1). This increased bonus lasts until the beginning of your next turn.\n\n{b}Breakthrough{/b}: You can spend 2 notions as an immediate action (or as a free action that can be taken outside of your turn by spending an additional notion) whenever you are targeted by the subject of your theory with an attack to position yourself so that the triggering attack targets an adjacent creature or object. If the attack misses you, the attack instead targets the chosen creature or object, rolling a new attempt but at a -2 penalty." uniqueness="useronce">
    <usesource source="pPF1e_Sph_Guile"/>
    <tag group="SoGSphere" tag="Study"/>
    <tag group="SoGTlClass" tag="Talent"/>
    <tag group="SoGTalDesc" tag="Theory"/>
    <tag group="SoGAbV1Sc" tag="1_0A"/>
    <tag group="LvNamePar" tag="AppText"/>
    <tag group="LvNamePar" tag="AppValue"/>
    <tag group="LvNamePar" tag="SignAppVal"/>
    <eval phase="Render" priority="400"><![CDATA[~ Get out if disabled
  doneif (tagis[Helper.SpcDisable] <> 0)

  ~ Reduce by an existing insight bonus to your AC
  field[abValue].value -= hero.child[ArmorClass].field[BonInsight].value
  field[abValue].value = maximum(0,field[abValue].value)]]></eval>
    </thing>
  <thing id="sogSpSubterfuge" name="Subterfuge Sphere" compset="SoGSphere" uniqueness="unique">
    <usesource source="pPF1e_Sph_Guile"/>
    <tag group="SoGSphere" tag="Subterfuge" name="Subterfuge"/>
    </thing>
  <thing id="resSGSESubterfuge" name="Bonus Subterfuge Talents" compset="Resource" panellink="tbSoGSubterfuge">
    <fieldval field="resObject" value="Bonus Subterfuge Talents"/>
    <usesource source="pPF1e_Sph_Guile"/>
    <tag group="SoGSphere" tag="Subterfuge"/>
    <tag group="SoGBonTal" tag="Subterfuge"/>
    <eval phase="Final">~ Add bonus talents
        field[resMax].value += hero.tagcount[SoGBonTal.Subterfuge]</eval>
    <eval phase="Final" priority="999999999999" index="2"><![CDATA[
        ~ If we have any bonus talents, show the sphere tab
        if (field[resMax].value > 0) then
          perform pulltags[SoGBonTal.?,SoGSphTab]
          perform hero.pushtags[SoGSphTab.?]
        endif]]></eval>
    </thing>
  <thing id="sogTlHdSub" name="{align center}Subterfuge" compset="SoGTalent" isshowonly="yes">
    <tag group="SoGSphere" tag="Subterfuge"/>
    <tag group="SoGTlClass" tag="GainSphere"/>
    </thing>
  <thing id="sogTlSpSubterfuge" name="Subterfuge Sphere" compset="SoGTalent" description="Operatives of the Subterfuge sphere train to avoid scrutiny and act unsuspected. They are unobtrusive when they need to be, moving with crowds and moving so subtly that their actions are unnoticed even when they are plainly seen. Even when noticed, Subterfuge masters can seem like they belong almost anywhere, drawing no attention even under an enemy's nose.\n\n{b}Associated Skill{/b}: Disguise.\n\nYou gain the following benefits when you gain the Subterfuge sphere.\n\nWhen you gain the Subterfuge sphere, you gain 5 ranks in Disguise, plus 5 ranks per additional talent spent in the Subterfuge sphere (maximum ranks equal to your Hit Dice). If you already have ranks in Disguise, you may immediately retrain them.\n\n{b}Skill Leverage{/b}: When you gain the Subterfuge sphere, you unlock skill leverage with the Disguise and Sleight of Hand skills.\n\nYou also acquire the Baffling Revelation, Confident Subtlety, and Fast Disguise abilities." summary="Gain access to the Subterfuge Sphere." panellink="tbSoGSubterfuge" uniqueness="useronce">
    <usesource source="pPF1e_Sph_Guile"/>
    <tag group="SoGSphere" tag="Subterfuge"/>
    <tag group="SoGAssocSk" tag="skDisguise"/>
    <tag group="SkLeverage" tag="skDisguise"/>
    <tag group="SkLeverage" tag="skSleight"/>
    <tag group="SoGTlClass" tag="GainSphere" name="Sphere access" abbrev="Sphere access"/>
    <tag group="SoGTlClass" tag="UtilStart"/>
    <tag group="Helper" tag="AlwaysAvl" name="AlwaysAvl" abbrev="AlwaysAvl"/>
    <bootstrap thing="sogSpSubterfuge"></bootstrap>
    <bootstrap thing="sogTlBaffRevela">
      <containerreq phase="First" priority="500">!SoGBanTal.sogTlBaffRevela</containerreq>
      </bootstrap>
    <bootstrap thing="sogTlConfSubtlety">
      <containerreq phase="First" priority="500">!SoGBanTal.sogTlConfSubtlety</containerreq>
      </bootstrap>
    <bootstrap thing="sogTlFastDisguise">
      <containerreq phase="First" priority="500">!SoGBanTal.sogTlFastDisguise</containerreq>
      </bootstrap>
    </thing>
  <thing id="sogTlFastDisguise" name="Fast Disguise" compset="SoGTalent" description="You can don a disguise as a full-round action, including using a disguise kit and changing your clothing and accessories. You can don or doff worn magic items and shields this way. If you don a disguise that features delicate details or you attempt to impersonate a specific individual, you take a -5 penalty to your Disguise check if you took less than 1d4+1 rounds. Changing your physical features requires spending 1 use from a disguise kit, but changing your clothes does not. If you have any (disguise) talents, you can apply one as part of creating this disguise. While you wear a disguise you created, the physical reminder of the disguise helps you reflexively act in character, giving you a +2 circumstance bonus on Bluff and Disguise checks as long as they do not conflict with the disguise you wear. For example, you could not use the bonus to attempt a Disguise check to make a voice different from the person you are disguised as. The bonus increases by 1 per 5 ranks in Disguise you possess.\n\n{b}Associated Feat:{/b} Deceitful." uniqueness="useronce">
    <usesource source="pPF1e_Sph_Guile"/>
    <tag group="SoGSphere" tag="Subterfuge"/>
    <tag group="SoGTlClass" tag="InitTalent"/>
    <tag group="SoGTlClass" tag="Talent"/>
    <tag group="AbilType" tag="Extra"/>
    <tag group="HasFeat" tag="fDeceit"/>
    </thing>
  <thing id="sogTlBaffRevela" name="Baffling Revelation" compset="SoGTalent" description="You can outwit any creature as long as they are fooled by your current disguise, you possess an item they believed they possessed, or you know a secret they consider important and well-kept. To outwit them using this ability, you must brandish the item they thought they had, you must reveal the secret, or you must take an action your target believed you would not or could not take because of your successful disguise (such as casting a spell when they believed you were a barbarian with a taboo against magic). Revealing a secret or your disguised nature can be verbal or visual, as appropriate. Creatures must generally be within 30 feet for you to outwit them verbally, but they can be up to 60 feet away if you reveal your ruse visually. Anyone who discovers you are disguised this way does not necessarily discover who you are. Once an item or secret is used to outwit a creature, that item or secret cannot be used by anyone to outwit that creature again. Revealing you are disguised to one creature usually reveals it to everyone within range, preventing you from outwitting them separately that way." uniqueness="useronce">
    <usesource source="pPF1e_Sph_Guile"/>
    <tag group="SoGSphere" tag="Subterfuge"/>
    <tag group="SoGTlClass" tag="InitTalent"/>
    <tag group="SoGTlClass" tag="Talent"/>
    <tag group="AbilType" tag="Extra"/>
    </thing>
  <thing id="sogTlConfSubtlety" name="Confident Subtlety" compset="SoGTalent" description="Adopting this approach is a swift action. While you maintain this approach, you reduce the penalty for making a Sleight of Hand check as a move action or for not making a subtle action longer by 6." uniqueness="useronce">
    <usesource source="pPF1e_Sph_Guile"/>
    <tag group="SoGSphere" tag="Subterfuge"/>
    <tag group="SoGTlClass" tag="InitTalent"/>
    <tag group="SoGTlClass" tag="Talent"/>
    <tag group="SoGTalDesc" tag="Approach"/>
    <tag group="AbilType" tag="Extra"/>
    </thing>
  <thing id="sogTlEffTheft" name="Effortless Theft" compset="SoGTalent" description="You can stow up to two held objects, each with a different hand, as a swift action. You can attempt one Sleight of Hand check either to lift an object or hide an object on your person as part of a move, standard, or full-round action to move, or as part of a standard or longer action to attempt a Bluff, Diplomacy, or Intimidate check." uniqueness="useronce">
    <usesource source="pPF1e_Sph_Guile"/>
    <tag group="SoGSphere" tag="Subterfuge"/>
    <tag group="SoGTlClass" tag="Talent"/>
    <tag group="SoGTalDesc" tag="Utility"/>
    </thing>
  <thing id="sogTlConfRanks" name="Confusion In The Ranks" compset="SoGTalent" description="You are skilled at exploiting the routines and casual interactions within organizations and social groups. You disguise yourself as a generic member of a group (not a specific individual). You can take 10 on Disguise checks even in combat while you can see someone of the appropriate status (such as a guard in a specific place, mercenary of a specific company, or officer of a specific rank in a specific organization).\n\nWhile you wear the disguise created by this talent, you can always take 10 on Bluff checks to convince people you belong to your apparent group and can attempt such a lie as a move or swift action even in combat. Even if a creature is not fooled by your disguise, if you are disguised as a member of its group or an allied group, you can use your Disguise modifier in place of your Acrobatics modifier to avoid attacks of opportunity from it." uniqueness="useronce">
    <usesource source="pPF1e_Sph_Guile"/>
    <tag group="SoGSphere" tag="Subterfuge"/>
    <tag group="SoGTlClass" tag="Talent"/>
    <tag group="SoGTalDesc" tag="Disguise"/>
    </thing>
  <thing id="sogTlDrabOutfit" name="Drab Outfit" compset="SoGTalent" description="You tailor your disguise to blend into an environment without being obviously nefarious in function. Your drab outfit might make you look like a farmer, servant, hunter, beggar, or other person expected to dress in a plain manner. Choose an environment when you create the disguise from the list of ranger’s favored terrain. In that environment, you get a +4 circumstance bonus to your Stealth checks from your camouflage. If anyone uses a skill to assess your proficiency, you can use your Disguise modifier in place of your Bluff modifier to make them underestimate you.\n\nAnyone who observes or interacts with you recalls only a vague impression of the event afterward unless they succeeded at a Perception check against your Disguise check. If you are very distinctive, such as matching the description of a fugitive or if you are the only humanoid in the area, their Perception check is attempted with a +5 bonus. On a failed check, the observer recalls no more detail than your size category and rough body shape (such as humanoid) and the approximate topic of conversation. This disguise has no effect on the memory of anyone who observes you do something alarming such as attacking or stealing. Your disguise imposes a –2 penalty on Diplomacy, Intimidate, and Perform skill checks." summary="Tailor your disguise to blend into the environment." uniqueness="useronce">
    <fieldval field="usrCandid1" value="abCategory.RgrFavTerr &amp; !thingid.ftElementa &amp; !thingid.ftBlightwa"/>
    <usesource source="pPF1e_Sph_Guile" parent="pPF1e_Sph" name="Spheres of Guile"/>
    <tag group="SoGSphere" tag="Subterfuge" name="Subterfuge" abbrev="Subterfuge"/>
    <tag group="SoGTlClass" tag="Talent" name="Basic Talent" abbrev="Basic Talent"/>
    <tag group="SoGTalDesc" tag="Disguise"/>
    <tag group="SoGTalDesc" tag="Utility"/>
    <tag group="LvNameApp" tag="AppText"/>
    <tag group="ChooseSrc1" tag="Thing"/>
    <tag group="User" tag="NoAutoName"/>
    <eval phase="Final" priority="25000"><![CDATA[~ Get out if disabled
     doneif (tagis[Helper.SpcDisable] <> 0)
     ~ or a duplicate.
     doneif (tagis[Helper.FirstCopy] = 0)
     ~ or not chosen
     doneif (field[usrChosen1].ischosen = 0)

     ~ We want the terrain string, ignore "Favored Terrain " (first 16 characters).
     field[abText].text = mid(field[usrChosen1].chosen.field[name].text,16,60)
     field[abValue].value += 4

     var bon as number
     bon = 4 - hero.child[skStealth].field[ModCirc].value
     if (bon > 0) then
       #situational[hero.child[skStealth],signed(bon) & " in " & field[usrChosen1].chosen.field[name].text,field[thingname].text]
     endif]]></eval>
    </thing>
  <thing id="sogTlUnrecManner" name="Unrecognizable Mannerisms" compset="SoGTalent" description="As a free action or as part of speaking, you can mimic any sound or voice you have heard. No magical or special effects of the sound are produced by your mimicry. Observers get an opposed Perception check to notice your fakery as normal, but you attempt a new Disguise check each time you mimic a different creature or sound. You get a +5 competence bonus on your Disguise check for these sounds; this bonus does not stack with that from polymorph effects or auditory illusions.\n\nAs a swift action, you can alter your voice and mannerisms so completely that others might not recognize you even if you are not visually disguised. This allows you to attempt a Disguise check to prevent others from recognizing you even though you have not changed your clothing or face. You cannot pass for someone specific who does not already closely resemble you and you cannot change your (disguise) talent this way." summary="Gain a mockingbird like ability." uniqueness="useronce">
    <usesource source="pPF1e_Sph_Guile"/>
    <tag group="SoGSphere" tag="Subterfuge"/>
    <tag group="SoGTlClass" tag="Talent"/>
    <tag group="SoGTalDesc" tag="Utility"/>
    <eval phase="First" priority="1000"><![CDATA[
      ~ If we're disabled, do nothing
      doneif (tagis[Helper.SpcDisable] <> 0)

      perform hero.child[skDisguise].setfocus
      var bon as number
      bon = maximum(5 - focus.field[BonComp].value, 0)
      #situational[focus, "+" & bon & " to interact with a creature that is aware of you.", field[thingname].text]]]></eval>
    </thing>
  <thing id="sogTlAsYouKn" name="As You Know" compset="SoGTalent" description="You can adopt this approach as a swift action. If you have spent at least 8 hours researching a creature and you are now disguised as that creature, you can use your Disguise modifier in place of the appropriate Knowledge modifier when recalling information for someone else to reinforce your current disguise. You can only recall information this way about the creature you appear unless you spend 1 use of skill leverage. When you spend leverage for this approach, you can attempt to recall other information that an interrogator thinks your apparent identity would know with a Knowledge check using your Disguise modifier. You can outwit on this Knowledge check (to get a 13 on the die instead of rolling).\n\nIn addition, whenever you succeed at a Diplomacy or Intimidate check to make a request of someone who trusts or defers to you because they are fooled by your disguise (even a disguise you did not research), you can spend 1 use of skill leverage to learn a useful or secret piece of information the target believes you already know. The GM chooses which information to reveal, which must be relevant to your request. For example, the target might reassure you of their commitment to a shared goal, remind you to beware a strategic vulnerability of an ally, confide that a fear is still bothering them, or encourage you to trust in a specific secret asset.\n\nYou can take this talent a second time. If you do, it gains the [plan] tag and you can reveal that you researched a creature as a plan. You can research a creature in 30 minutes otherwise." summary="Use your research to better disguise.">
    <fieldval field="tMaxTaken" value="2"/>
    <usesource source="pPF1e_Sph_Guile" parent="pPF1e_Sph" name="Spheres of Guile"/>
    <tag group="SoGSphere" tag="Subterfuge" name="Subterfuge" abbrev="Subterfuge"/>
    <tag group="SoGTlClass" tag="Talent" name="Basic Talent" abbrev="Basic Talent"/>
    <tag group="SoGTalDesc" tag="Approach" name="Approach" abbrev="Approach"/>
    <tag group="SoGTalDesc" tag="Utility"/>
    <eval phase="First" priority="1000"><![CDATA[doneif (tagis[Helper.SpcDisable] <> 0)

if (field[tTaken].value = 2) then
  perform assign[SoGTalDesc.Plan]
endif]]></eval>
    </thing>
  <thing id="sogTlShockBet" name="Shocking Betrayal" compset="SoGTalent" description="When you attack a creature who believes you are an ally who has never attacked them, they must attempt a Will saving throw if you outwit them using Baffling Revelation. All of their allies who can see you within 60 feet and also believe you are an ally must also attempt Will saves. Each creature who fails gains the shocked condition for 1 round per rank in Disguise you possess. On a successful save, they are instead uncertain for 1 round.\n\nThey can reduce the shocked or uncertain condition by recognizing you as any identity you have used other than your current disguise, by explaining yourself, or by spending a standard action thinking things through and succeeding at a Will save.\n\nYou can take this talent a second time if you possess at least 10 ranks in Disguise. Creatures are then dumbfounded until the end of your next turn on a failed save. The target of your shocking attack (but not any other creature) is stunned if they have fewer Hit Dice than the number of ranks in Disguise you possess and fail their saving throw." summary="Betray someone to make them shocked, uncertain, dumbfounded, or stunned.">
    <fieldval field="abText" value="rounds"/>
    <fieldval field="tMaxTaken" value="2"/>
    <usesource source="pPF1e_Sph_Guile" parent="pPF1e_Sph" name="Spheres of Guile"/>
    <tag group="SoGSphere" tag="Subterfuge" name="Subterfuge" abbrev="Subterfuge"/>
    <tag group="SoGTlClass" tag="Talent" name="Basic Talent" abbrev="Basic Talent"/>
    <tag group="SoGAbV1Sc" tag="1_1A"/>
    <tag group="LvNamePar" tag="AppText"/>
    <tag group="LvNamePar" tag="AppValue"/>
    <tag group="tSave" tag="WillNeg"/>
    <evalrule phase="Final" priority="2147483647" message="You must have 10 ranks in Disguise to take Shocking Betrayal second time."><![CDATA[@valid = 1
validif (field[tTaken].value <= 1)

if (field[tTaken].value  = 2) then
  validif (#skillranks[skDisguise] >= 10)
endif

@valid = 0]]></evalrule>
    </thing>
  <thing id="sogTlScholarDis" name="Scholarly Disguise" compset="SoGTalent" description="You appear to be a knowledgeable scholar or healer priest. As part of creating your disguise, you can choose one kind of alchemical item or one healer’s kit to incorporate. You can draw an incorporated item as part of the action to use it. If you critically hit with an incorporated alchemical weapon, it emits a flash and the target is dazzled until the end of your next turn.\n\nYour confidence can calm and encourage creatures even if it does not allow you to really understand medicine. You can use Disguise in place of Heal with an incorporated healer’s kit to treat a conscious target’s disease or deadly wounds if they have not succeeded at a Perception check against your disguise.\n\nYou can spend 1 use of skill leverage to use your Disguise modifier to heal someone who has seen through your disguise. If you use your Disguise modifier to treat a disease, you grant a +2 morale bonus instead of the usual bonus. If you use Disguise to treat deadly wounds, you give the patient temporary hit points instead of healing them; these temporary hit points last for 1 hour per rank in the associated skill you possess but they do not count against the daily limit of treating deadly wounds since you did not actually treat them. Temporary hit points from this talent can't bring a creature above its hit point maximum.\n\nFor every 4 ranks in the sphere’s associated skill you possess, you can incorporate another kind of item.\n\nIf you possess at least 6 ranks in the associated skill, you can take this talent a second time. Once you do, incorporated alchemical weapons blind instead of dazzling on a critical hit. In addition, you can make a feint attempt as part of throwing an incorporated alchemical weapon. If you succeed, the effect applies to that alchemical weapon attack. A feint you make this way doesn’t trigger any special abilities that add effects when you feint." summary="Disguise yourself as a healer, using in place of Heal checks.">
    <fieldval field="tMaxTaken" value="2"/>
    <usesource source="pPF1e_Sph_Guile" parent="pPF1e_Sph" name="Spheres of Guile"/>
    <tag group="SoGSphere" tag="Subterfuge" name="Subterfuge" abbrev="Subterfuge"/>
    <tag group="SoGTlClass" tag="Talent" name="Basic Talent" abbrev="Basic Talent"/>
    <tag group="SoGTalDesc" tag="Disguise"/>
    <tag group="SoGAbV1Sc" tag="1_4A"/>
    <evalrule phase="Final" priority="2147483647" message="You must have 6 ranks to take Scholarly Disguise a second time."><![CDATA[@valid = 1
validif (field[tTaken].value <= 1)

if (field[tTaken].value  = 2) then
  validif (field[tAssocRanks].value >= 6)
endif

@valid = 0]]></evalrule>
    </thing>
  <thing id="sogTlAdaptaAppear" name="Adaptable Appearance" compset="SoGTalent" description="When using a disguise kit or form-altering magic, you reduce the total penalties to Disguise checks attempted to appear as a body type, age category, or condition different from your own by 4 (to a minimum of 0). For every 5 ranks you have in Disguise, this penalty is reduced by an additional 2." summary="Reduce Disguise penalties to a minimum of 0." uniqueness="useronce">
    <usesource source="pPF1e_Sph_Guile" parent="pPF1e_Sph" name="Spheres of Guile"/>
    <tag group="SoGSphere" tag="Subterfuge" name="Subterfuge" abbrev="Subterfuge"/>
    <tag group="SoGTlClass" tag="Talent" name="Basic Talent" abbrev="Basic Talent"/>
    <tag group="SoGTalDesc" tag="Utility"/>
    <tag group="SoGAbV1Sc" tag="Neg1_5A"/>
    <tag group="LvNamePar" tag="AppValue"/>
    <tag group="LvNamePar" tag="SignAppVal"/>
    </thing>
  <thing id="sogTlCleverCharla" name="Clever Charlatan" compset="SoGTalent" description="You can reveal a plan to be a useful item you prepared or stole or a minor secret you learned in disguise. Suitable items include any clothing or equipment for looking the part of a disguise. You can spend one plan to reveal one item of negligible value or piece of information you could have reasonably gained from observing as an ordinary bystander or in a disguise that would not have been studied closely. These might include having a copy of a key you could have stolen from someone in a city street, knowing a password from shadowing a guard talking off-duty, or having a guard uniform stolen from a laundress. If you produce a disguise this way, you can reveal the plan as part of applying it with fast disguise. If you produce any other stolen item, revealing it is a full-round action.\n\nYou must attempt a Sleight of Hand check to determine if you successfully took the item you intended. The DC for this check is set by the GM, generally either DC 10 + Perception modifier of the creature you stole from or DC 10 + twice the highest challenge rating among all guardians of the area. If you succeed and the item is a suitable one, you have the item you intended. Unless you succeed by 5 or more, however, the stolen item is discovered to be missing at around the same time you reveal it.\n\nIf you also possess the Layered Disguise talent, you can also cleverly plan just the right disguise to hide under your outer disguise. You spend this plan when you apply the layered disguise, cannot regain that plan while you continue to wear the disguise, and do not reveal what the disguise underneath is until your outer disguise is doffed." summary="Make a plan to have a useful item." uniqueness="useronce">
    <comment>TODO check Layered shows</comment>
    <usesource source="pPF1e_Sph_Guile" parent="pPF1e_Sph" name="Spheres of Guile"/>
    <tag group="SoGSphere" tag="Subterfuge" name="Subterfuge" abbrev="Subterfuge"/>
    <tag group="SoGTlClass" tag="Talent" name="Basic Talent" abbrev="Basic Talent"/>
    <tag group="SoGTalDesc" tag="Plan"/>
    <tag group="SoGTalDesc" tag="Utility"/>
    <tag group="LvNamePar" tag="AppText"/>
    <eval phase="First" priority="1000"><![CDATA[doneif (tagis[Helper.SpcDisable] <> 0)

perform hero.childfound[sogTlLayeredDisgu].setfocus

doneif (state.isfocus = 0)

field[abText].text = "Layered"]]></eval>
    </thing>
  <thing id="sogTlCommunityCon" name="Community Contacts" compset="SoGTalent" description="You know how to blend in among certain circles. When you are disguised as a generic person of that social status but are not impersonating a specific individual, you can make a Diplomacy check to make an impression on a member of that group as a move or swift action, using your Disguise modifier in place of Diplomacy if that is better. In addition, your attempts to gather information among that group never draw attention and take only 10 minutes. Attempts to notice you gathering information in these circumstances take a –8 penalty.\n\nYou can spend 1 use of skill leverage to take 10 on a Bluff or Disguise check to assume the role of a generic person of your chosen status even when you are in danger. You can also spend 1 use of skill leverage when you attempt a Knowledge, Lore, or Profession check to know about a group member to get a result if you had rolled a 20 on the die.\n\nYou can take this talent multiple times. Each time you do, you choose a different social status." summary="Blend in as a genericl person of a social status.">
    <comment>TODO Need a domain field to allow them to enter the social status.</comment>
    <usesource source="pPF1e_Sph_Guile" parent="pPF1e_Sph" name="Spheres of Guile"/>
    <tag group="SoGSphere" tag="Subterfuge" name="Subterfuge" abbrev="Subterfuge"/>
    <tag group="SoGTlClass" tag="Talent" name="Basic Talent" abbrev="Basic Talent"/>
    <tag group="SoGTalDesc" tag="Utility"/>
    <tag group="SoGAbV1Sc" tag="Neg1_5A"/>
    <tag group="LvNamePar" tag="AppValue"/>
    <tag group="LvNamePar" tag="SignAppVal"/>
    </thing>
  <thing id="sogTlCostumer" name="Costumer" compset="SoGTalent" description="You can dress an ally with your fast disguise ability. You can apply a different (disguise) talent to each disguise you create. They use their own skill modifiers for actions allowed by the disguise." summary="Fast disguise allies with different (disguise) talents." uniqueness="useronce">
    <usesource source="pPF1e_Sph_Guile" parent="pPF1e_Sph" name="Spheres of Guile"/>
    <tag group="SoGSphere" tag="Subterfuge" name="Subterfuge" abbrev="Subterfuge"/>
    <tag group="SoGTlClass" tag="Talent" name="Basic Talent" abbrev="Basic Talent"/>
    <tag group="SoGTalDesc" tag="Utility"/>
    </thing>
  <thing id="sogTlCriminalCont" name="Criminal Contacts" compset="SoGTalent" description="You have connections with criminals or other individuals who prefer to operate unseen. You can sell and buy illegal goods just as easily as legal ones, if you pay 10% more than market price. You can take a 20 on Diplomacy checks to gather information about the existence of and basic information about contacting illegal businesses and criminal organizations and can make such an attempt in 10 minutes. You can also spend 1 use of skill leverage when you attempt a Knowledge (local) or relevant Lore check to get a result if you had rolled a 20 on the die." summary="easily sell and buy illegal goods at a cost of 10%." uniqueness="useronce">
    <usesource source="pPF1e_Sph_Guile" parent="pPF1e_Sph" name="Spheres of Guile"/>
    <tag group="SoGSphere" tag="Subterfuge" name="Subterfuge" abbrev="Subterfuge"/>
    <tag group="SoGTlClass" tag="Talent" name="Basic Talent" abbrev="Basic Talent"/>
    <tag group="SoGTalDesc" tag="Utility"/>
    </thing>
  <thing id="sogTlFlashyOutfit" name="Flashy Outfit" compset="SoGTalent" description="Your disguise is garish or daringly fashionable. While you wear this disguise, other creatures who can see you have a +2 circumstance bonus on saving throws against pattern effects, gaze attacks, and other visual effects that do not originate from you and take a –2 penalty on Perception checks to notice anything other than you. You also gain a +4 circumstance bonus on skill checks to impress someone, create a diversion with Bluff, pose a menace with Intimidate, or entertain. If you create a diversion with Bluff and choose yourself as the object, you can use your Disguise modifier in place of your Bluff modifier and the distraction lasts until the end of your next turn.\n\nYour disguise imposes a –4 penalty on Stealth checks and ensures anyone who sees you remembers you." summary="Your flashy disguise helps to impress and other effects." uniqueness="useronce">
    <comment>TODO No situaltional bonuses applied.</comment>
    <usesource source="pPF1e_Sph_Guile" parent="pPF1e_Sph" name="Spheres of Guile"/>
    <tag group="SoGSphere" tag="Subterfuge" name="Subterfuge" abbrev="Subterfuge"/>
    <tag group="SoGTlClass" tag="Talent" name="Basic Talent" abbrev="Basic Talent"/>
    <tag group="SoGTalDesc" tag="Disguise"/>
    <tag group="SoGTalDesc" tag="Utility"/>
    </thing>
  <thing id="sogTlLayeredDisgu" name="Layered Disguise" compset="SoGTalent" description="When you create a disguise, you may simultaneously create and wear a second disguise using the same check. Only one of these disguises shows at a time. Alternatively, if you use this talent to create only one disguise, you can simultaneously attempt a Sleight of Hand check to conceal an object on your person. When you use this talent to conceal an object on your person, you can use your Disguise modifier in place of your Sleight of Hand modifier.\n\nYou can remove and destroy the outer disguise as a swift or immediate action to reveal the one beneath or to reveal your underlying appearance. You may doff a disguise in response to someone seeing you, in which case you do so a moment before being seen." summary="Your a second disguise under your outer disguise." uniqueness="useronce">
    <usesource source="pPF1e_Sph_Guile" parent="pPF1e_Sph" name="Spheres of Guile"/>
    <tag group="SoGSphere" tag="Subterfuge" name="Subterfuge" abbrev="Subterfuge"/>
    <tag group="SoGTlClass" tag="Talent" name="Basic Talent" abbrev="Basic Talent"/>
    <tag group="SoGTalDesc" tag="Disguise"/>
    <tag group="SoGTalDesc" tag="Utility"/>
    </thing>
  <thing id="sogTlPrestigiousD" name="Prestigious Disguise" compset="SoGTalent" description="Your disguise marks you as someone of obvious importance. You seem influential to anyone fooled by your disguise. Your presence in an exclusive location is generally assumed to be justified by NPCs who work or visit there (except by someone who is the only person who can grant or approve such permission). You can make requests of unfriendly creatures while you wear this disguise, although the DC is higher as normal for using Diplomacy on such a target. You can use your Disguise modifier in place of your Intimidate modifier to demand cooperation from people, and their attitude does not worsen until they realize you are disguised or 1 day passes.\n\nYour disguise ensures anyone who sees you remembers you." summary="Your disguise makes you very memorable." uniqueness="useronce">
    <usesource source="pPF1e_Sph_Guile" parent="pPF1e_Sph" name="Spheres of Guile"/>
    <tag group="SoGSphere" tag="Subterfuge" name="Subterfuge" abbrev="Subterfuge"/>
    <tag group="SoGTlClass" tag="Talent" name="Basic Talent" abbrev="Basic Talent"/>
    <tag group="SoGTalDesc" tag="Disguise"/>
    <tag group="SoGTalDesc" tag="Utility"/>
    </thing>
  <thing id="sogTlBusyHands" name="Busy Hands" compset="SoGTalent" description="You use your fumbling with one hand as a distraction from what your other hand is doing. When you fail a Sleight of Hand check to lift or plant an item, you can attempt another Sleight of Hand check against the same creature as a swift action.\n\nYou must use a different hand for the second Sleight of Hand check and you must target a different item. Your second check takes a –10 penalty unless you outwit the target." summary="Try again as a swift if you fail a Sleight of Hand check." uniqueness="useronce">
    <usesource source="pPF1e_Sph_Guile" parent="pPF1e_Sph" name="Spheres of Guile"/>
    <tag group="SoGSphere" tag="Subterfuge" name="Subterfuge" abbrev="Subterfuge"/>
    <tag group="SoGTlClass" tag="Talent" name="Basic Talent" abbrev="Basic Talent"/>
    </thing>
  <thing id="sogTlCloseSleight" name="Close Sleight" compset="SoGTalent" description="Whenever you successfully move through a creature’s space (including when a creature allows you through because it thinks you are its ally) or succeed at a combat maneuver check to drag, grapple, reposition, or trip a creature, you can attempt a Sleight of Hand check against that target even in combat as a swift action. The attempt fails if they succeed at the opposed Perception check." summary="Make Sleight of Hand checks when moving through a creates space including combat maneuvers." uniqueness="useronce">
    <usesource source="pPF1e_Sph_Guile" parent="pPF1e_Sph" name="Spheres of Guile"/>
    <tag group="SoGSphere" tag="Subterfuge" name="Subterfuge" abbrev="Subterfuge"/>
    <tag group="SoGTlClass" tag="Talent" name="Basic Talent" abbrev="Basic Talent"/>
    </thing>
  <thing id="sogTlFasterDisgui" name="Faster Disguise" compset="SoGTalent" description="You can use fast disguise as a standard action and never take a penalty for creating a disguise quickly. You can change your appearance so fast that creatures might not register your previous appearance. If you use fast disguise during the surprise round, you compare your Disguise check result against a DC for each creature who has not yet acted and was not aware of your presence before the action that caused initiative to be rolled. The DC is 10 + that creature’s Perception modifier. Each creature you succeed against does not notice your previous appearance. If you fail by 5 or less, the creature notices you changing your appearance enough to register that you are now disguised but did not notice enough of your previous appearance to recognize it even if they have seen that appearance before." summary="Fast disuise as a standard action with no penalty for disguising quickly." uniqueness="useronce">
    <usesource source="pPF1e_Sph_Guile" parent="pPF1e_Sph" name="Spheres of Guile"/>
    <tag group="SoGSphere" tag="Subterfuge" name="Subterfuge" abbrev="Subterfuge"/>
    <tag group="SoGTlClass" tag="Talent" name="Basic Talent" abbrev="Basic Talent"/>
    </thing>
  <thing id="sogTlPullOneOver" name="Pull One Over" compset="SoGTalent" description="When you fail at a Sleight of Hand check targeting a creature by 5 or less, the creature does not notice your attempt directly but rather just gets a vague sense that something odd is going on. It becomes uncertain until the end of its next turn or until you attack it. You cannot use this talent on the same creature again for 8 hours." summary="Failing a Sleight of Hand check by 5 or less isn't a failure." uniqueness="useronce">
    <usesource source="pPF1e_Sph_Guile" parent="pPF1e_Sph" name="Spheres of Guile"/>
    <tag group="SoGSphere" tag="Subterfuge" name="Subterfuge" abbrev="Subterfuge"/>
    <tag group="SoGTlClass" tag="Talent" name="Basic Talent" abbrev="Basic Talent"/>
    </thing>
  <thing id="sogTlSubtleTrick" name="Subtle Trick" compset="SoGTalent" description="You do not automatically break Stealth when you attempt a dirty trick combat maneuver (Pathfinder Roleplaying Game: Advanced Player’s Guide). Instead, you attempt a Sleight of Hand check and observers notice you if their opposed Perception check exceeds your skill check result. If the effect doesn’t apply to the target’s current activity (such as if it is sitting still watching a performance when you entangle it), the duration of the trick doesn’t begin to elapse until it becomes relevant (such as when an entangled creature moves or attempts a penalized skill check).\n\nCreatures who were already in combat realize you are the source of the trick as soon as you complete your action. In addition, a successful check denies the target their Dexterity bonus to CMD against the maneuver." summary="Yoy may make dirty trick combat maneuvers without breaking Stealth." uniqueness="useronce">
    <usesource source="pPF1e_Sph_Guile" parent="pPF1e_Sph" name="Spheres of Guile"/>
    <tag group="SoGSphere" tag="Subterfuge" name="Subterfuge" abbrev="Subterfuge"/>
    <tag group="SoGTlClass" tag="Talent" name="Basic Talent" abbrev="Basic Talent"/>
    </thing>
  <thing id="sogTlMartialDisgu" name="Martial Disguise" compset="SoGTalent" description="You appear to be a highly trained warrior. You can use Disguise in place of Intimidate to pose a menace (page 51) or to make an opponent overestimate you with their skill check to assess your proficiency. You easily disguise armor you wear so that it appears to be up to one step heavier with no penalty to your Disguise check by incorporating bits of metal and strategically placed tabards or other obfuscation. You can also disguise weapons you wear or carry as other weapons at no penalty as long as they use the same number of hands.\n\nAs a result of your dabbling with whatever armor and weapons a disguise requires, you are good at making do when you are not fully trained with armor or weapons. As part of creating your disguise, you can choose one weapon and one shield or set or armor to incorporate. You reduce any penalty for lack of proficiency with the incorporated weapon to –2, and can choose to apply the penalty to damage rolls instead of to attack rolls. You reduce any penalty you take to attacks due to incorporated armor you are not proficient with by 1.\n\nFor every 4 ranks in the associated skill you possess, you can incorporate another weapon.\n\nIf you possess at least 6 ranks in Bluff, you can feint with an incorporated weapon as a move action.\n\nIf you possess at least 11 ranks and have another way to feint as a move action (such as Improved Feint), you can feint with it as a swift action. This feint cannot be improved with any feat or talent that adds effects or improves the effects of the feint action or triggers swift or free actions when you feint." summary="You appear to be highly trained warrior, using Disguise in place of Intimidate." uniqueness="useronce">
    <fieldval field="abText" value="Weapons"/>
    <usesource source="pPF1e_Sph_Guile" parent="pPF1e_Sph" name="Spheres of Guile"/>
    <tag group="SoGSphere" tag="Subterfuge" name="Subterfuge" abbrev="Subterfuge"/>
    <tag group="SoGTlClass" tag="Talent" name="Basic Talent" abbrev="Basic Talent"/>
    <tag group="SoGTalDesc" tag="Disguise"/>
    <tag group="SoGAbV1Sc" tag="1_4A"/>
    <tag group="LvNameApp" tag="AppText2"/>
    <tag group="LvNamePar" tag="AppText"/>
    <tag group="LvNamePar" tag="AppValue"/>
    <eval phase="First" priority="1000"><![CDATA[doneif (tagis[Helper.SpcDisable] <> 0)

if (#skillranks[skBluff] >= 11) then
  if (hero.tagis[HasFeat.fImpFeint] <> 0) then
    field[abText2].text = "Generic Swift"
  else
    field[abText2].text = "Move"
  endif
elseif (#skillranks[skBluff] >= 6) then
  field[abText2].text = "Move"
endif]]></eval>
    </thing>
  <thing id="sogTlMonstrousDis" name="Monstrous Disguise" compset="SoGTalent" description="You appear to be a dangerous creature, typically a particularly bestial humanoid. You can use animal skins or similar material to disguise light armor or hide armor as natural armor at no penalty. You can use animal claws or similar elements so that you appear to have natural weapons. As part of creating the disguise, you can create the appearance of a natural weapon and can include a number of those fake weapons equal to your number of arms. You can attack with any of them, but they are manufactured weapons and not natural weapons. For every 4 ranks in the associated skill you possess, you can create the appearance of an additional natural weapon.\n\nAs part of creating your disguise, you can choose one manufactured weapon to incorporate into each seeming natural weapon, which determines that attack’s proficiency and damage and how many arms you require to make the attack. If you have a natural weapon, you can disguise it to look like a different natural weapon in a similar manner. Disguising a natural or manufactured weapon that cannot deal the same damage type as the natural weapon it appears to be applies a –4 penalty to your Disguise check. You can change which fake natural weapon you are wielding (still limited by your available hands) once per turn as a free action. If you do not incorporate a manufactured or natural weapon into a disguise’s natural attack, it is an improvised weapon that deals 1d4 points of damage of the type of your choice (bludgeoning, piercing, or slashing).\n\nIf you possess at least 6 ranks in Bluff, you can feint with a fake natural weapon as a move action as long as you do not attack with it on the same turn. You do not have to be wielding it with a hand.\n\nIf you possess at least 11 ranks and have another way to feint as a move action, you can feint with it as a swift action as long as you do not attack with it on the same turn. This feint cannot be improved with any feat or talent that adds effects or improves the effects of the feint action or triggers swift or free actions when you feint." summary="You appear to be a dangerous creature with natural weapons." uniqueness="useronce">
    <fieldval field="abText" value="Weapons"/>
    <usesource source="pPF1e_Sph_Guile" parent="pPF1e_Sph" name="Spheres of Guile"/>
    <tag group="SoGSphere" tag="Subterfuge" name="Subterfuge" abbrev="Subterfuge"/>
    <tag group="SoGTlClass" tag="Talent" name="Basic Talent" abbrev="Basic Talent"/>
    <tag group="SoGTalDesc" tag="Disguise"/>
    <tag group="SoGAbV1Sc" tag="1_4A"/>
    <tag group="LvNameApp" tag="AppText2"/>
    <tag group="LvNamePar" tag="AppText"/>
    <tag group="LvNamePar" tag="AppValue"/>
    <eval phase="First" priority="1000"><![CDATA[doneif (tagis[Helper.SpcDisable] <> 0)

if (#skillranks[skBluff] >= 11) then
  if (hero.tagis[HasFeat.fImpFeint] <> 0) then
    field[abText2].text = "Generic Swift"
  else
    field[abText2].text = "Move"
  endif
elseif (#skillranks[skBluff] >= 6) then
  field[abText2].text = "Move"
endif]]></eval>
    </thing>
  <thing id="sogTlVoSpellcastD" name="Spellcaster Disguise" compset="SoGTalent" description="Your disguise incorporates hidden magic items that you can activate while pretending to use your own magic. As part of creating the disguise, you can hide up to 2 carried magic items on your person, attempting a Sleight of Hand check for each one as normal (note many items, such as wands, are small enough to grant a bonus on this check). You can use your Disguise modifier for these Sleight of Hand checks if it is better.\n\nFor every 5 ranks in the associated skill you possess, you can incorporate an additional magic item into the disguise. You can activate items incorporated into your spellcaster disguise as if you were holding them in hand and observers cannot tell you did not cast the magic yourself unless they succeed at an opposed Perception or Spellcraft check (using whichever modifier is higher) against your Sleight of Hand result to hide it on your person.\n\nWhenever you successfully activate a magic item that is not incorporated into the disguise, you can attempt a Sleight of Hand check to pretend you cast the spell without the item’s help. Again, observers believe the ruse unless they succeed at an opposed Perception or Spellcraft check (using whichever modifier is higher)." summary="You appear to be wizard, using magic items for &quot;your spells&quot;." uniqueness="useronce">
    <fieldval field="abText" value="Weapons"/>
    <usesource source="pPF1e_Sph_Guile" parent="pPF1e_Sph" name="Spheres of Guile"/>
    <tag group="SoGSphere" tag="Subterfuge" name="Subterfuge" abbrev="Subterfuge"/>
    <tag group="SoGTlClass" tag="Talent" name="Basic Talent" abbrev="Basic Talent"/>
    <tag group="SoGTalDesc" tag="Disguise"/>
    <tag group="SoGAbV1Sc" tag="1_5A"/>
    <tag group="LvNameApp" tag="AppText2"/>
    <tag group="LvNamePar" tag="AppText"/>
    <tag group="LvNamePar" tag="AppValue"/>
    <eval phase="First" priority="1000"><![CDATA[doneif (tagis[Helper.SpcDisable] <> 0)

if (#skillranks[skBluff] >= 11) then
  if (hero.tagis[HasFeat.fImpFeint] <> 0) then
    field[abText2].text = "Generic Swift"
  else
    field[abText2].text = "Move"
  endif
elseif (#skillranks[skBluff] >= 6) then
  field[abText2].text = "Move"
endif]]></eval>
    </thing>
  <thing id="sogTlFalseSenseOS" name="False Sense Of Security" compset="SoGTalent" description="You can adopt this approach as a swift action to watch for opportunities left open by opponents who underestimate you or are fooled by you. When any opponent fails an active Perception check against your Disguise or Sleight of Hand check, you gain the ability to outwit that opponent as long as you maintain this approach. You can abandon this approach as the cost to outwit any such opponents." summary="Your opponents underestimate you." uniqueness="useronce">
    <usesource source="pPF1e_Sph_Guile" parent="pPF1e_Sph" name="Spheres of Guile"/>
    <tag group="SoGSphere" tag="Subterfuge" name="Subterfuge" abbrev="Subterfuge"/>
    <tag group="SoGTlClass" tag="Talent" name="Basic Talent" abbrev="Basic Talent"/>
    <tag group="SoGTalDesc" tag="Approach"/>
    </thing>
  <thing id="sogDbDeft" name="Deft" compset="SoGDrawbk" description="You use Sleight of Hand (instead of Disguise) as the associated skill for this sphere. You lose the fast disguise ability and cannot gain (disguise) talents; you gain the Effortless Theft talent instead." summary="You can use Sleight of Hand adeptly." panellink="tbSoGSubterfuge" uniqueness="useronce">
    <comment>
     Counting Bonus Talents
	  If a base sphere or drawback grants an additional talent
	  (such as via a package selection or alternate start), the
	  additional talents do not count as talents spent for rules
	  that count the number of talents spent in a sphere. (This
	  most often applies to gaining skill ranks.)

SoGBanDesc.Disguise warns you the talent is banned in the pick view.
</comment>
    <usesource source="pPF1e_Sph_Guile"/>
    <tag group="SphOfGuil" tag="NoBnTalent"/>
    <tag group="SoGSphere" tag="Subterfuge"/>
    <tag group="SoGTlClass" tag="AltStart"/>
    <tag group="SoGTlClass" tag="UtilStart"/>
    <tag group="Helper" tag="AlwaysAvl" name="AlwaysAvl" abbrev="AlwaysAvl"/>
    <tag group="SoGBanDesc" tag="Disguise"/>
    <tag group="SoGBanTal" tag="sogTlFastDisguise"/>
    <bootstrap thing="sogTlEffTheft">
      <autotag group="SphOfGuil" tag="NoBnTalent"/>
      </bootstrap>
    <eval phase="First" priority="1000"><![CDATA[~ This change is kept after a buy off.
      perform hero.findchild[SoGTalent,"SoGSphere.Subterfuge & SoGTlClass.GainSphere"].setfocus
      doneif (state.isfocus = 0)

      ~ Delete the default
      perform focus.delete[SoGAssocSk.skDisguise]

      perform focus.assign[SoGAssocSk.skSleight]]]>
      <after name="Assign initial Associated Skill"/>
      </eval>
    </thing>
  <thing id="sogDbImpress" name="Impressionist" compset="SoGDrawbk" description="You are adept at mimicking voices and sounds you hear. You lose the confident subtlety approach, and gain the Unrecognizable Mannerisms talent instead." summary="trade confident subtlety for Unrecognizable Mannerisms." panellink="tbSoGSubterfuge" uniqueness="useronce">
    <usesource source="pPF1e_Sph_Guile" parent="pPF1e_Sph" name="Spheres of Guile"/>
    <tag group="SphOfGuil" tag="NoBnTalent" name="No Bonus Talent from this Drawback" abbrev="No Bonus Talent from this Drawback"/>
    <tag group="SoGSphere" tag="Subterfuge"/>
    <tag group="Helper" tag="AlwaysAvl" name="AlwaysAvl" abbrev="AlwaysAvl"/>
    <tag group="SoGBanTal" tag="sogTlConfSubtlety"/>
    <bootstrap thing="sogTlUnrecManner"></bootstrap>
    </thing>
  <thing id="sogDbFashion" name="Fashionista" compset="SoGDrawbk" description="You lose the confident subtlety approach and Baffling Revelation ability. You gain a (disguise) talent of your choice instead." summary="trade confident subtlety for Unrecognizable Mannerisms." panellink="tbSoGSubterfuge" uniqueness="useronce">
    <usesource source="pPF1e_Sph_Guile" parent="pPF1e_Sph" name="Spheres of Guile"/>
    <tag group="SoGSphere" tag="Subterfuge" name="Subterfuge" abbrev="Subterfuge"/>
    <tag group="Helper" tag="AlwaysAvl" name="AlwaysAvl" abbrev="AlwaysAvl"/>
    <tag group="SoGBanTal" tag="sogTlBaffRevela" name="Baffling Revelation" abbrev="Baffling Revelation"/>
    <tag group="SoGBanTal" tag="sogTlConfSubtlety" name="Confident Subtlety" abbrev="Confident Subtlety"/>
    <tag group="SoGFreeTal" tag="Disguise"/>
    </thing>
  <thing id="sogSpSurvivalis" name="Survivalism Sphere" compset="SoGSphere" uniqueness="unique">
    <usesource source="pPF1e_Sph_Guile"/>
    <tag group="SoGSphere" tag="Survivalism" name="Survivalism"/>
    </thing>
  <thing id="resSGPkSurvivalis" name="Survivalism Packages" compset="Resource" panellink="tbSoGSurvivalis">
    <fieldval field="resObject" value="Survivalism Packages"/>
    <usesource source="pPF1e_Sph_Guile"/>
    <tag group="SoGSphere" tag="Survivalism"/>
    <tag group="SoGPackage" tag="Survivalism"/>
    </thing>
  <thing id="resSGSESurvivalis" name="Bonus Survivalism Talents" compset="Resource" panellink="tbSoGSurvivalis">
    <fieldval field="resObject" value="Bonus Survivalism Talents"/>
    <usesource source="pPF1e_Sph_Guile"/>
    <tag group="SoGSphere" tag="Survivalism"/>
    <tag group="SoGBonTal" tag="Survivalism"/>
    <eval phase="Final">~ Add bonus talents
        field[resMax].value += hero.tagcount[SoGBonTal.Survivalism]</eval>
    <eval phase="Final" priority="999999999999" index="2"><![CDATA[
        ~ If we have any bonus talents, show the sphere tab
        if (field[resMax].value > 0) then
          perform pulltags[SoGBonTal.?,SoGSphTab]
          perform hero.pushtags[SoGSphTab.?]
        endif]]></eval>
    </thing>
  <thing id="sogTlHdSur" name="{align center}Survivalism" compset="SoGTalent" isshowonly="yes">
    <tag group="SoGSphere" tag="Survivalism"/>
    <tag group="SoGTlClass" tag="GainSphere"/>
    </thing>
  <thing id="sogTlSpSurvivalis" name="Survivalism Sphere" compset="SoGTalent" description="Operatives of the Survivalism sphere are able to use nature itself to their advantage, using parts of a slain beast to their fullest potential, or shifting earth and rock to disrupt those within it. In any case, these operatives hold great power with nature and its inhabitants.\n\n{b}Associated Skill{/b}: Survival.\n\nWhen you gain the Survivalism sphere, you gain 5 ranks in Survival, plus 5 ranks per additional talent spent in the Survivalism sphere (maximum ranks equal to your Hit Dice). If you already have ranks in Survival, you may immediately retrain them.\n\n{b}Skill Leverage{/b}: You unlock skill leverage with Survival, in addition to either Knowledge (nature) or one of the following Craft skills: alchemy, jewelry, leather, taxidermy, or traps.\n\n{b}Package{/b}: When you first take the Survivalism sphere, choose one of the following packages: (dredge) or (harvest). You may take the Expanded Survivalism talent to gain an additional package.\n\nYou also acquire the Canny Survivor ability." summary="Gain access to the Survivalism Sphere." panellink="tbSoGSurvivalis" uniqueness="useronce">
    <comment>TODO replace with sogTlSpSurvivalis</comment>
    <fieldval field="usrCandid1" value="component.BaseSkill &amp; (thingid.skKnowNat | thingid.skCrafAlch | thingid.skCrafJewe | thingid.skCrafLeat | thingid.skCrafRTaxidermy | thingid.skCrafTrap)"/>
    <usesource source="pPF1e_Sph_Guile"/>
    <tag group="SoGSphere" tag="Survivalism"/>
    <tag group="SoGTlClass" tag="GainSphere"/>
    <tag group="SoGTlClass" tag="UtilStart"/>
    <tag group="ChooseSrc1" tag="Hero"/>
    <bootstrap thing="abSoGSkLeverage"></bootstrap>
    <bootstrap thing="sogSpSurvivalis"></bootstrap>
    <bootstrap thing="sogTlCannySurvivo"></bootstrap>
    <eval phase="First" priority="103" name="Assign initial Associated Skill"><![CDATA[~ Get out if disabled
     doneif (tagis[Helper.SpcDisable] <> 0)

     perform assign[SoGAssocSk.skSurvival]]]></eval>
    <eval phase="PostLevel" priority="1500" index="2" name="Assign initial Skill Leverage"><![CDATA[~ Get out if disabled
     doneif (tagis[Helper.SpcDisable] <> 0)
     ~ or a duplicate.
     doneif (tagis[Helper.FirstCopy] = 0)

     perform assign[SkLeverage.skSurvival]

     ~ or if no choice made.
     doneif (field[usrChosen1].ischosen = 0)

     perform assignstr["SkLeverage." & field[usrChosen1].chosen.idstring]]]></eval>
    </thing>
  <thing id="sogTlCannySurvivo" name="Canny Survivor" compset="SoGTalent" description="You can outwit an opponent by sharing evidence of movements or kills they keep secret. Any killing or presence in a place that they don’t want widely known is suitable as long as you have not shared any evidence from that killing or location with them before and they believe it is not widely known.\n\nWhen attempting to light a fire without flint and steel (or similar fire-making tools), you can find suitable materials and start the fire in only 5 minutes, and you may take 10 on the Survival check when doing so. Also, lighting a torch only takes a standard action (rather than a full-round action), or a move action by using a tindertwig.\n\nYou immediately succeed at any checks attempted to identify poisonous foods found in nature, in addition to recognizing poisonous creatures and tainted water.\n\nIf you possess the (harvest) package, whenever you harvest from a Tiny or larger creature you may produce enough food to feed a single Medium creature for a day. For every size category above Tiny the creature is, you can feed twice as many Medium creatures. This ability can be used to gain sustenance from unconventional creatures, such as oozes or undead that still possess flesh (such as zombies); but cannot be used with creatures incapable of providing sustenance (such as most constructs or fleshless undead).">
    <tag group="SoGSphere" tag="Survivalism"/>
    <tag group="SoGTlClass" tag="InitTalent"/>
    <tag group="SoGTlClass" tag="Talent"/>
    <tag group="AbilType" tag="Extra"/>
    </thing>
  <thing id="sogTlDisruptTerra" name="Disrupt Terrain" compset="SoGTalent" description="You can outwit an opponent by sharing evidence of movements or kills they keep secret. Any killing or presence in a place that they don’t want widely known is suitable as long as you have not shared any evidence from that killing or location with them before and they believe it is not widely known.\n\nWhen attempting to light a fire without flint and steel (or similar fire-making tools), you can find suitable materials and start the fire in only 5 minutes, and you may take 10 on the Survival check when doing so. Also, lighting a torch only takes a standard action (rather than a full-round action), or a move action by using a tindertwig.\n\nYou immediately succeed at any checks attempted to identify poisonous foods found in nature, in addition to recognizing poisonous creatures and tainted water.\n\nIf you possess the (harvest) package, whenever you harvest from a Tiny or larger creature you may produce enough food to feed a single Medium creature for a day. For every size category above Tiny the creature is, you can feed twice as many Medium creatures. This ability can be used to gain sustenance from unconventional creatures, such as oozes or undead that still possess flesh (such as zombies); but cannot be used with creatures incapable of providing sustenance (such as most constructs or fleshless undead).">
    <tag group="SoGSphere" tag="Survivalism"/>
    <tag group="SoGTlClass" tag="InitTalent"/>
    <tag group="SoGTlClass" tag="Talent"/>
    <tag group="SoGTalDesc" tag="SurGround"/>
    </thing>
  <thing id="sogTlTalisman" name="Talisman" compset="SoGTalent" description="{b}Refinement DC{/b}: 15\n\nYou harvest various innocuous pieces of a creature, which can be refined to create a talisman, helping ward off similar creatures. A talisman provides a +1 luck bonus to saving throws against attacks and abilities originating from, as well as skill checks attempted against, creatures of the component's associated creature type. If the creature is a humanoid or outsider, this instead confers its benefits to the subtype of the creature. A creature can only benefit from a single talisman at one time.\n\n{b}Potency{/b}: The luck bonus increases by 1 per 5 ranks in the associated skill you possess.">
    <fieldval field="abText" value="luck"/>
    <fieldval field="abValue" value="1"/>
    <tag group="SoGSphere" tag="Survivalism"/>
    <tag group="SoGTlClass" tag="InitTalent"/>
    <tag group="SoGTlClass" tag="Talent"/>
    <tag group="SoGTalDesc" tag="SurHarvest"/>
    <tag group="SoGAbV1Sc" tag="1_5A"/>
    </thing>
  <thing id="sogTlDredge" name="Dredge" compset="SoGTalent" description="You can spend 10 minutes to dredge up to an amount of 5-foot squares equal to 5 + twice the number of ranks in the associated skill you possess, applying the effects of one (ground) talent to the area. The chosen squares must be contiguous, and a square must be within your natural reach for you to dredge it. This dredged area lasts for 1 hour per rank in the associated skill you possess.\n\nAlternatively, you may spend a full-round action to instead move up to your base speed (provoking attacks of opportunity as normal), dredging up to an amount of 5-foot squares equal to 2 + 2 per 5 ranks in the associated skill you possess, and reducing its duration to 1 round per rank in the associated skill you possess.\n\nA dredged area can be noticed with a successful DC 15 Perception check (although a creature that sees you dredging an area automatically succeeds this check).\n\nWhen you first gain this package, you gain the Disrupt Terrain (ground) talent." summary="Gain the dredge package." uniqueness="useronce">
    <comment>TODO abValue2 for the second calculation</comment>
    <fieldval field="abText" value="— 5ft squares"/>
    <fieldval field="abValue" value="5"/>
    <usesource source="pPF1e_Sph_Guile" parent="pPF1e_Sph" name="Spheres of Guile"/>
    <tag group="SoGSphere" tag="Survivalism"/>
    <tag group="SoGTlClass" tag="Package" name="Package" abbrev="Package"/>
    <tag group="SoGTalDesc" tag="SurDredge"/>
    <tag group="SoGIsPkg" tag="Dredge"/>
    <tag group="SoGAbV1Sc" tag="2_1A"/>
    <tag group="LvNamePar" tag="AppText"/>
    <tag group="LvNamePar" tag="AppValue"/>
    <tag group="Helper" tag="SpecUp" name="SpecUp" abbrev="SpecUp"/>
    <bootstrap thing="abSoGSkLeverage"></bootstrap>
    <bootstrap thing="sogTlDisruptTerra"></bootstrap>
    </thing>
  <thing id="sogTlHarvest" name="Harvest" compset="SoGTalent" description="You can spend 1 minute to harvest a single component from a Tiny or larger corpse. The component corresponds to one (harvest) talent you have. You cannot harvest a component the corpse does not have or that has already been harvested. Some talents gain benefits depending on the creature type the component was harvested from, known as the component’s ‘associated creature type’. A harvested component lasts indefinitely, but has no market value.\n\nYou can spend 30 minutes or 15 minutes with a survival kit (Pathfinder Roleplaying Game: Ultimate Equipment) to refine a number of components you harvested equal to 1 + 1 per 4 ranks in the associated skill you possess, attempting an associated skill check against the refinement DC of each component refined this way. If you fail the refinement check, the refined component functions as if you had only 1 rank in the associated skill when determining its effects; if you succeed at the refinement check, the component uses your full ranks when determining its additional benefits, if any.\n\nYou can only have a number of components refined at one time equal to the number of (harvest) talents you possess + 1/2 your ranks in the associated skill (minimum 1); if you exceed this limit, your oldest refined component spoils 15 minutes later. A refined component grants its benefits for 24 hours before degrading into uselessness.\n\nSome (harvest) talents have a Potency entry. You can increase the refinement DC by 10 to add the listed additional benefits.\n\nWhen you first gain this package, you gain the Talisman (harvest) talent." summary="Gain the dredge package." uniqueness="useronce">
    <comment>TODO abValue2 for the second calculation</comment>
    <fieldval field="abText" value="components"/>
    <fieldval field="abValue" value="1"/>
    <usesource source="pPF1e_Sph_Guile" parent="pPF1e_Sph" name="Spheres of Guile"/>
    <tag group="SoGSphere" tag="Survivalism"/>
    <tag group="SoGTlClass" tag="Package" name="Package" abbrev="Package"/>
    <tag group="SoGTalDesc" tag="SurHarvest"/>
    <tag group="SoGIsPkg" tag="Harvest"/>
    <tag group="SoGAbV1Sc" tag="1_4A"/>
    <tag group="LvNamePar" tag="AppText"/>
    <tag group="LvNamePar" tag="AppValue"/>
    <tag group="Helper" tag="SpecUp" name="SpecUp" abbrev="SpecUp"/>
    <bootstrap thing="abSoGSkLeverage"></bootstrap>
    <bootstrap thing="sogTlTalisman"></bootstrap>
    </thing>
  <thing id="sogTlComplexPrepa" name="Complex Preparation" compset="SoGTalent" description="If you possess the (dredge) package, you can apply two (ground) talents to the dredged area when you dredge. If a talent alters the amount of squares that can be dredged, only that talent is applied to the altered area (for example, applying both a Pit and Hazardous Terrain still allows you to have the Hazardous Terrain expand out of the Pit.\n\nIf you possess the (harvest) package, you may apply the benefits of two talisman effects to a single talisman by increasing the Refinement DC by 5." uniqueness="useronce">
    <usesource source="pPF1e_Sph_Guile"/>
    <tag group="SoGSphere" tag="Survivalism"/>
    <tag group="SoGTlClass" tag="Talent"/>
    </thing>
  <thing id="sogTlCorral" name="Corral" compset="SoGTalent" description="When dredging, you can designate a number of squares within the dredged area equal to your operative ability modifier. These squares and all squares adjacent to them become corralled.\n\nA creature that enters or begins their turn in a corralled square takes a -1 penalty to AC and Reflex saves for 1 round, this penalty increases by 1 per 3 ranks in the associated skill you possess. A creature does not suffer these penalties while within the dredged area. A creature who is in a square when it is corralled may opt to move 5 feet into the dredged area as a free action that does not provoke attacks of opportunity and may be taken even when it is not their turn. You cannot apply this talent to squares dredged as a swift action or faster.\n\nWhen used with the Vertical Dredging talent, any corralled cubes that do not touch the ground only affect flying creatures." uniqueness="useronce">
    <usesource source="pPF1e_Sph_Guile"/>
    <tag group="SoGSphere" tag="Survivalism"/>
    <tag group="SoGTlClass" tag="Talent"/>
    <tag group="SoGAbV1Sc" tag="Neg1_3A"/>
    <tag group="LvNamePar" tag="AppText"/>
    <tag group="LvNamePar" tag="AppValue"/>
    <tag group="LvNamePar" tag="SignAppVal"/>
    </thing>
  <thing id="sogTlDisruptEleva" name="Disrupt Elevation" compset="SoGTalent" description="When you use dredge, you can choose one of the following options to apply to the area:\n\n{b}Elevated Terrain{/b}: Entering the dredged area requires an additional 5 feet of movement. Creatures within the dredged area are treated as if they were on higher ground against attacks made against creatures outside of the dredged area. In addition to the +1 circumstance bonus to melee attack rolls these creatures would normally receive, this bonus also applies to ranged attack rolls. This bonus increases by 1 per 6 ranks in the associated skill you possess.\n\n{b}Unpredictable Terrain{/b}: Creatures within the dredged area suffer a -1 penalty to attack rolls until the start of their next turn, increasing by 1 per 6 ranks in the associated skill you possess. This area is also considered slightly sloped, increasing the DC of Acrobatics checks by 2. Additionally, creatures who run or charge within the dredged area must succeed at a Reflex saving throw or end their movement 1d2 × 5 feet later; if this saving throw is failed by 5 or more, the creature also falls prone after this movement." uniqueness="useronce">
    <usesource source="pPF1e_Sph_Guile"/>
    <tag group="SoGSphere" tag="Survivalism"/>
    <tag group="SoGTlClass" tag="Talent"/>
    <tag group="SoGTalDesc" tag="SurGround"/>
    <tag group="SoGAbV1Sc" tag="1_6A"/>
    <tag group="SoGAbV2Sc" tag="Neg1_6A"/>
    <tag group="LvNamePar" tag="AppText"/>
    <eval phase="Render" priority="400"><![CDATA[~ Get out if disabled
  doneif (tagis[Helper.SpcDisable] <> 0)

  field[abText].text = signed(field[abValue].value) & " attack, " & signed(field[abValue2].value) & " penalty"]]></eval>
    </thing>
  <thing id="sogTlHuntersEye" name="Hunter’s Eye" compset="SoGTalent" description="You may adopt this approach as a swift action. When you adopt this approach, you can spend a free action to designate a creature as your mark for 24 hours; marking a creature requires you to at least see the creature or its tracks. You may designate additional creatures as your mark as a swift action, and can only have a number of marked creatures at one time equal to your operative ability modifier (although you can spend 1 use of skill leverage when designating a creature as your mark to have it not count towards this limit).\n\nYou learn the parts that can be harvested from your mark, in addition to what terrain they are native to. You gain a +1 insight bonus to Survival checks to track your mark, and to harvest and refine parts from your mark, increasing by 1 per 4 ranks in the associated skill you possess. Additionally, when observing a marked creature's tracks, you can attempt to assess proficiency, assess health, identify the creature, or sense the goal of the marked creature; you may use Knowledge (nature) or this sphere's associated skill instead of the normal skill associated with these skill uses (except when identifying the creature), but doing so causes you to take a -5 penalty when doing so unless you spend 1 use of skill leverage." uniqueness="useronce">
    <usesource source="pPF1e_Sph_Guile"/>
    <tag group="SoGSphere" tag="Survivalism"/>
    <tag group="SoGTlClass" tag="Talent"/>
    <tag group="SoGTalDesc" tag="Approach"/>
    <tag group="SoGAbV1Sc" tag="1_4A"/>
    <tag group="LvNamePar" tag="AppText"/>
    <tag group="LvNamePar" tag="AppValue"/>
    <tag group="LvNamePar" tag="SignAppVal"/>
    <eval phase="Render" priority="400"><![CDATA[~ Get out if disabled
  doneif (tagis[Helper.SpcDisable] <> 0)

  ~ Reduce by an existing insight bonus to your Survival
  field[abValue].value -= hero.child[skSurvival].field[BonInsight].value
  field[abValue].value = maximum(0,field[abValue].value)]]></eval>
    </thing>
  <thing id="sogTlManipulateCo" name="Manipulate Cover" compset="SoGTalent" description="When you use dredge, you can choose one of the following options to apply to the area:\n\n{/b}Entrenched Terrain{/b}: You entrench each square of the dredged area with a 3-foot-deep trench, granting partial cover to creatures that are within the dredged area from attacks and effects originating from outside of the dredged area.\n\nAt 5 ranks in the associated skill, you can instead create a 5-foot-deep trench, granting cover to Medium or smaller creatures instead.\n\n{b}Flatten Terrain{/b}: You flatten each square of the dredged area, reducing any cover for creatures of your size within the dredged area to partial cover, and treating any partial cover within the dredged area as if there were no cover. This has no effect on improved cover.\n\nAt 5 ranks in the associated skill, this also reduces improved cover to cover." uniqueness="useronce">
    <usesource source="pPF1e_Sph_Guile"/>
    <tag group="SoGSphere" tag="Survivalism"/>
    <tag group="SoGTlClass" tag="Talent"/>
    <tag group="SoGTalDesc" tag="SurGround"/>
    </thing>
  <thing id="sogTlPrepareAtmos" name="Prepare Atmosphere" compset="SoGTalent" description="When you use dredge, you can choose one of the following options to apply to the area:\n\n{b}Relaxing Atmosphere{/b}: Creatures within the dredged area gain a +2 morale bonus to Diplomacy, Handle Animal, Linguistics (except to find a loophole), and Perform checks. These bonuses increase by 1 per 4 ranks in the associated skill you possess. Such creatures also halve the time to orient themselves from a disorientation condition (as long as it would take longer than 1 round to do so).\n\nAdditionally, whenever a creature within the dredged area successfully bares their soul (new skill use), the target of the attitude adjustment also reveals a similar piece of information (such as a motivation).\n\n{b}Tense Atmosphere{/b}: Creatures within the dredged area reduce the DC required to inflict them with disorientation effects (including saving throw DCs) by 2. Additionally, creatures within the dredged area gain a +2 morale bonus to Perform checks attempted to entertain (dispirit or spook). The DC reductions and bonuses increase by 1 per 4 ranks in the associated skill you possess." uniqueness="useronce">
    <usesource source="pPF1e_Sph_Guile"/>
    <tag group="SoGSphere" tag="Survivalism"/>
    <tag group="SoGTlClass" tag="Talent"/>
    <tag group="SoGTalDesc" tag="SurGround"/>
    <tag group="SoGTalDesc" tag="Utility"/>
    <tag group="SoGAbV1Sc" tag="1_4A"/>
    <tag group="LvNamePar" tag="AppText"/>
    <tag group="LvNamePar" tag="AppValue"/>
    <tag group="LvNamePar" tag="SignAppVal"/>
    </thing>
  <thing id="sogTlRightWhereIW" name="Right Where I Want You" compset="SoGTalent" description="As part of preparing this plan, you must have been able to be near the chosen area for at least 10 minutes. When you reveal this plan, you immediately dredge an area that you can see, selecting an amount of squares as if you had dredged as a full-round action, lasting for 1 round per rank in the associated skill you possess." uniqueness="useronce">
    <usesource source="pPF1e_Sph_Guile"/>
    <tag group="SoGSphere" tag="Survivalism"/>
    <tag group="SoGTlClass" tag="Talent"/>
    <tag group="SoGTalDesc" tag="Plan"/>
    <tag group="SoGAbV1Sc" tag="1_1A"/>
    <tag group="LvNamePar" tag="AppText"/>
    <tag group="LvNamePar" tag="AppValue"/>
    <tag group="LvNamePar" tag="SignAppVal"/>
    </thing>
  <thing id="sogTlSubduer" name="Subduer" compset="SoGTalent" description="You take no penalty on attack rolls for using a lethal weapon to deal nonlethal damage. Additionally, whenever you deal nonlethal damage to a creature that is suffering a penalty to their AC (or a similar reduction to their AC against the attack, such as being prone, blind, flat-footed, or the penalties associated with broken armor or a Dexterity penalty), you add your operative modifier to the amount of nonlethal damage dealt.\n\nIn addition, you regain 1 use of skill leverage when you apply the unconscious condition to a creature with more than 0 hit points for at least 10 minutes, or render them helpless but conscious for at least 10 minutes. Once you do, you cannot regain skill leverage that way until you regain it in a different manner." uniqueness="useronce">
    <usesource source="pPF1e_DRS_InvIng"/>
    <usesource source="pPF1e_Sph_Guile"/>
    <tag group="SoGSphere" tag="Survivalism"/>
    <tag group="SoGTlClass" tag="Talent"/>
    </thing>
  <thing id="sogTSwiftDredgin" name="Swift Dredging" compset="SoGTalent" description="You may adopt this approach as a standard action, choosing an option from a (ground) talent you possess. At the end of each turn you maintain this approach, you can dredge an adjacent square as a free action. This approach must be maintained each turn as a swift action, ending the approach if you fail to maintain the approach. You may only have a number of squares dredged from this talent equal to your operative ability modifier. When you abandon this approach, either willingly or as a failure to maintain it, all currently dredged squares return to normal." uniqueness="useronce">
    <usesource source="pPF1e_Sph_Guile"/>
    <tag group="SoGSphere" tag="Survivalism"/>
    <tag group="SoGTlClass" tag="Talent"/>
    <tag group="SoGTalDesc" tag="Approach"/>
    </thing>
  <thing id="sogTlBone" name="Bone" compset="SoGTalent" description="{b}Refinement DC{/b}: 20\n\nYou refine a creature’s bones by attaching them to your armor or clothing, granting a competence bonus to Intimidate checks equal to 2 + 1 per 4 ranks in the associated skill you possess; this bonus is doubled against creature’s of the component’s associated creature type. Additionally, whenever the wearer of these bones would successfully make a creature shaken for 3 or more rounds, they can instead decide to make them frightened for 1 round.\n\nTalisman: Any creature that sees the bone talisman’s wearer must succeed at a Will saving throw or lose their immunity to mind-affecting fear effects originating from the wearer of the talisman, instead gaining a +4 bonus to saving throws against fear and increasing the DC to demoralize them by the same amount. This is not a fear effect. If a creature succeeds its save, it becomes immune to the creator’s bone talismans for 24 hours." uniqueness="useronce">
    <fieldval field="abText" value="competence to Intimidate"/>
    <fieldval field="abValue" value="2"/>
    <usesource source="pPF1e_Sph_Guile"/>
    <tag group="SoGSphere" tag="Survivalism"/>
    <tag group="SoGTlClass" tag="Talent"/>
    <tag group="SoGTalDesc" tag="SurHarvest"/>
    <tag group="SoGAbV1Sc" tag="1_4A"/>
    <tag group="LvNamePar" tag="AppText"/>
    <tag group="LvNamePar" tag="AppValue"/>
    <tag group="LvNamePar" tag="SignAppVal"/>
    </thing>
  <thing id="sogTlStench" name="Stench" compset="SoGTalent" description="{b}Refinement DC{/b}: 15\n\nYou refine the particularly odorous parts of a creature, like specific glands or waste, creating a stink bomb that can be thrown as a ranged touch attack with a range increment of 20 feet. Creatures within a 10-foot radius burst of the point of contact are sickened for 1 round per 3 ranks in the associated skill you possess (Fortitude negates).\n\n{b}Potency{/b}: Affected creatures become nauseated for 1 round on a failed save, and sickened for the remaining duration. On a successful save, the creature is still sickened for 1 round.\n\n{b}Talisman{/b}: The stench talisman’s wearer exudes a palpable, yet barely tolerable odor, granting creatures adjacent to the wearer a -2 penalty to saving throws against the sickened and nauseated conditions, and increases the penalties associated with the sickened condition by 1." uniqueness="useronce">
    <fieldval field="abText" value="rounds"/>
    <usesource source="pPF1e_Sph_Guile"/>
    <tag group="SoGSphere" tag="Survivalism"/>
    <tag group="SoGTlClass" tag="Talent"/>
    <tag group="SoGTalDesc" tag="SurHarvest"/>
    <tag group="SoGAbV1Sc" tag="1_3A"/>
    <tag group="LvNamePar" tag="AppText"/>
    <tag group="LvNamePar" tag="AppValue"/>
    <tag group="LvNamePar" tag="SignAppVal"/>
    </thing>
  <thing id="sogDbHunter" name="Hunter" compset="SoGDrawbk" description="You do not gain the talisman (harvest) talent, and cannot create talismans. You gain a (harvest) talent instead." summary="Trade talisman for a (harvest) talent." panellink="tbSoGSurvivalis" uniqueness="useronce">
    <usesource source="pPF1e_Sph_Guile" parent="pPF1e_Sph" name="Spheres of Guile"/>
    <tag group="SoGSphere" tag="Survivalism"/>
    <tag group="Helper" tag="AlwaysAvl" name="AlwaysAvl" abbrev="AlwaysAvl"/>
    <tag group="SoGBanTal" tag="sogTlTalisman"/>
    <tag group="SoGFreeTal" tag="SurHarvest"/>
    <tag group="SoGReqPkg" tag="Harvest"/>
    </thing>
  <thing id="sogSpVocation" name="Vocation Sphere" compset="SoGSphere" uniqueness="unique">
    <usesource source="pPF1e_Sph_Guile"/>
    <tag group="SoGSphere" tag="Vocation"/>
    <eval phase="PostLevel" priority="1000"></eval>
    </thing>
  <thing id="resSGSEVocation" name="Bonus Vocation Talents" compset="Resource" panellink="tbSoGVocation">
    <fieldval field="resObject" value="Bonus Vocation Talents"/>
    <usesource source="pPF1e_Sph_Guile"/>
    <tag group="SoGSphere" tag="Vocation"/>
    <tag group="SoGBonTal" tag="Vocation"/>
    <eval phase="Final">~ Add bonus talents
        field[resMax].value += hero.tagcount[SoGBonTal.Vocation]</eval>
    <eval phase="Final" priority="999999999999" index="2"><![CDATA[
        ~ If we have any bonus talents, show the sphere tab
        if (field[resMax].value > 0) then
          perform pulltags[SoGBonTal.?,SoGSphTab]
          perform hero.pushtags[SoGSphTab.?]
        endif]]></eval>
    </thing>
  <thing id="sogTlHdVoc" name="{align center}Vocation" compset="SoGTalent" isshowonly="yes">
    <tag group="SoGSphere" tag="Vocation"/>
    <tag group="SoGTlClass" tag="GainSphere"/>
    </thing>
  <thing id="sogTlSpVocation" name="Vocation Sphere" compset="SoGTalent" description="The Vocation sphere represents your background and natural aptitude towards certain trades and skill sets. Unlike most skill spheres, there is no base sphere ability or benefit to the Vocation sphere; it has no associated skill and does not unlock skill leverage.\n\nWhen you first gain the Vocation sphere, choose one Vocation talent of your choice and gain it for free. You can gain the Vocation base sphere as a utility talent; if you do, you must choose a [utility] talent as the free talent." summary="Gain access to the Vocation Sphere." panellink="tbSoGVocation" uniqueness="useronce">
    <comment>TODO When SoGFreeTal.descriptor is done, chanage to use.</comment>
    <usesource source="pPF1e_Sph_Guile"/>
    <tag group="SoGSphere" tag="Vocation"/>
    <tag group="SoGTlClass" tag="GainSphere"/>
    <tag group="SoGTlClass" tag="UtilStart"/>
    <tag group="Helper" tag="AlwaysAvl"/>
    <bootstrap thing="sogSpVocation"></bootstrap>
    <eval phase="First" priority="1000"><![CDATA[~ grant a bonus talent

     ~ SoGFreeTal.? does not help, we can gain any talent regardless of descriptor.

     ~ If taken as a utility talent (SoGTlClass.Utility), find a [utility].
     ~ Otherwise find a sphere-specific talent.
     if (tagis[SoGTlClass.Utility] <> 0) then
          perform hero.findchild[SoGTalent,"SoGSphere.Vocation & SoGTlClass.Utility & !SoGTlClass.SoGBonusTl & !SoGTlClass.InitTalent"].setfocus
     else
          perform hero.findchild[SoGTalent,"SoGSphere.Vocation & SoGBonTal.Vocation & !SoGTlClass.SoGBonusTl & !SoGTlClass.InitTalent"].setfocus
     endif
     doneif (state.isfocus = 0)

     perform focus.assign[SoGTlClass.InitTalent]]]></eval>
    <eval phase="Final" priority="26001" name="Increase Class Skill Bonus +3 -> +4"><![CDATA[~ Look for skills that need bumped from +3 to +4.

              ~ If we are not the first copy, get out.
              doneif (tagis[Helper.FirstCopy] = 0)

              ~ If we are not Guile, get out.
              doneif (hero.tagis[SphOfGuil.Class] = 0)

              foreach pick in hero from BaseSkill where "SphOfGuil.TradeDupe"
                    ~ If we are a class skill and we have the +3 currently, then +1.
                    if (eachpick.tagis[Helper.ClassSkill] = 1) then
                          if (eachpick.field[skClsSkBon].value = 3) then
                               eachpick.field[skClsSkBon].value += 1
                          endif
                    endif
              nexteach]]>
              <after name="Tag all duplicate TradeSkills"/>
              </eval>
    <eval phase="First" priority="13000" name="Tag all duplicate TradeSkills"><![CDATA[      ~ Tag all duplicate TradeSkills

      foreach pick in hero from BaseSkill
        if (eachpick.tagcount[TradeSkill.?] > 1) then
          perform eachpick.assign[SphOfGuil.TradeDupe]
        endif
      nexteach]]>
      <before name="Increase Class Skill Bonus +3 -> +4"/>
      <after name="Enable skill spheres"/>
      </eval>
    <evalrule phase="Final" priority="99999999999999" index="2" message="You must select a talent with the bonus talent provided by the base Vocation sphere"><![CDATA[     ~ find a talent that hasn't been ...
     if (tagis[SphOfGuil.NoBnTalent] <> 0) then
       @valid = 1
       done
     endif
     if (tagis[SoGTlClass.Utility] <> 0) then
       @message = "You must select a [utility] talent with the bonus talent provided by the base Vocation sphere"
     endif
     ~ our selection yet
     perform hero.findchild[SoGTalent,"SoGSphere.Vocation & (SoGTlClass.Utility | SoGBonTal.Vocation) & !SoGTlClass.SoGBonusTl & SoGTlClass.InitTalent"].setfocus

     doneif (state.isfocus = 0)

     ~ if found, mark the talent as our selection and we're valid
     perform focus.assign[SoGTlClass.SoGBonusTl]
     @valid = 1]]></evalrule>
    </thing>
  <thing id="sogTlAlternateMet" name="Alternate Methods" compset="SoGTalent" description="You can use any ability score of your choice for Artistry, Craft, and Profession checks instead of their usual ability scores, as long as the ability score is relevant to the chosen skill. For example, using Strength or Dexterity for Craft (armor) or Profession (blacksmith) to represent working metal, Intelligence for Profession (barrister), or Dexterity for Artistry (choreography)." uniqueness="useronce">
    <usesource source="pPF1e_Sph_Guile"/>
    <tag group="SoGSphere" tag="Vocation"/>
    <tag group="SoGTlClass" tag="Talent"/>
    <tag group="SoGTalDesc" tag="Utility"/>
    <eval phase="Final" priority="15001" index="2"><![CDATA[~ Get out if disabled
     doneif (tagis[Helper.SpcDisable] <> 0)
     ~ or a duplicate.
     doneif (tagis[Helper.FirstCopy] = 0)

     foreach pick in hero from BaseSkill where "ClassSkill.Craft"
          #situational[eachpick, "May use any ability score modifier that the GM feels is relevant", field[thingname].text]
          nexteach

     foreach pick in hero from BaseSkill where "ClassSkill.Profession"
          #situational[eachpick, "May use any ability score modifier that the GM feels is relevant", field[thingname].text]
          nexteach]]></eval>
    </thing>
  <thing id="sogTlArchaeologis" name="Archaeologist" compset="SoGTalent" description="You gain Appraise, Knowledge (history), Spellcraft, and Use Magic Device as class skills. When attempting a Spellcraft check to identify the properties of a magic item, you may attempt as many checks as you wish per day rather than just one (which allows you to take 20 on such checks)." uniqueness="useronce">
    <usesource source="pPF1e_Sph_Guile"/>
    <tag group="SoGSphere" tag="Vocation"/>
    <tag group="SoGTlClass" tag="Talent"/>
    <tag group="SoGTalDesc" tag="Trade"/>
    <tag group="SoGTalDesc" tag="Utility"/>
    <tag group="Helper" tag="SpecUp"/>
    <eval phase="First" priority="11000"><![CDATA[~ Get out if disabled
     doneif (tagis[Helper.SpcDisable] <> 0)
     ~ or a duplicate.
     doneif (tagis[Helper.FirstCopy] = 0)

      perform hero.child[skAppraise].setfocus
      perform focus.assign[Helper.ClassSkill]
      perform focus.assignstr["TradeSkill." & this.idstring]
      if (hero.childlives[skKnowHist] = 1) then
           perform hero.child[skKnowHist].setfocus
           perform focus.assign[Helper.ClassSkill]
           perform focus.assignstr["TradeSkill." & this.idstring]
      endif
      perform hero.child[skSpellcr].setfocus
      perform focus.assign[Helper.ClassSkill]
      perform focus.assignstr["TradeSkill." & this.idstring]
      perform hero.child[skUseMagic].setfocus
      perform focus.assign[Helper.ClassSkill]
      perform focus.assignstr["TradeSkill." & this.idstring]

      perform this.assign[TradeSkill.skAppraise]
      perform this.assign[TradeSkill.skKnowHist]
      perform this.assign[TradeSkill.skSpellcr]
      perform this.assign[TradeSkill.skUseMagic]]]></eval>
    <eval phase="Attr" priority="100003" index="2"><![CDATA[~ Get out if disabled
     doneif (tagis[Helper.SpcDisable] <> 0)
     ~ or a duplicate.
     doneif (tagis[Helper.FirstCopy] = 0)

     ~ When attempting a Spellcraft check to identify the properties of a magic item, you may attempt as many checks as you wish per day rather than just one (which allows you to take 20 on such checks).

     #situational[hero.childfound[skSpellcr], "May take 20 to identify the properties of a magic item.", field[thingname].text]]]></eval>
    </thing>
  <thing id="sogTlConArt" name="Con Artist" compset="SoGTalent" description="You gain Bluff, Disguise, Knowledge (local), and Linguistics as class skills. You may use the better of your Charisma or Intelligence modifier when attempting either Bluff or Knowledge (local) checks, chosen when you select this talent." uniqueness="useronce">
    <fieldval field="usrCandid1" value="component.BaseSkill &amp; (Reference.skBluff | Reference.skKnowLoc)"/>
    <usesource source="pPF1e_Sph_Guile"/>
    <tag group="SoGSphere" tag="Vocation"/>
    <tag group="SoGTlClass" tag="Talent"/>
    <tag group="SoGTalDesc" tag="Trade"/>
    <tag group="SoGTalDesc" tag="Utility"/>
    <tag group="ChooseSrc1" tag="Hero"/>
    <tag group="Helper" tag="SpecUp"/>
    <eval phase="First" priority="11000"><![CDATA[~ Get out if disabled
     doneif (tagis[Helper.SpcDisable] <> 0)
     ~ or a duplicate.
     doneif (tagis[Helper.FirstCopy] = 0)

      perform hero.child[skBluff].setfocus
      perform focus.assign[Helper.ClassSkill]
      perform focus.assignstr["TradeSkill." & this.idstring]
      perform hero.child[skDisguise].setfocus
      perform focus.assign[Helper.ClassSkill]
      perform focus.assignstr["TradeSkill." & this.idstring]
      if (hero.childlives[skKnowLoc] = 1) then
           perform hero.child[skKnowLoc].setfocus
           perform focus.assign[Helper.ClassSkill]
           perform focus.assignstr["TradeSkill." & this.idstring]
      endif
      perform hero.child[skLinguist].setfocus
      perform focus.assign[Helper.ClassSkill]
      perform focus.assignstr["TradeSkill." & this.idstring]

      perform this.assign[TradeSkill.skBluff]
      perform this.assign[TradeSkill.skDisguise]
      perform this.assign[TradeSkill.skKnowLoc]
      perform this.assign[TradeSkill.skLinguist]]]></eval>
    <eval phase="Attr" priority="100003" index="2"><![CDATA[~ Get out if disabled
      doneif (tagis[Helper.SpcDisable] <> 0)
      ~ or a duplicate.
      doneif (tagis[Helper.FirstCopy] = 0)

      doneif (field[usrChosen1].ischosen = 0)

     ~ You may use the better of your Charisma or Intelligence modifier when attempting either Bluff or Knowledge (local) checks, chosen when you select this talent.
       perform field[usrChosen1].chosen.assign[SkillOpt.aINT]
       perform field[usrChosen1].chosen.assign[SkillOpt.aCHA]]]></eval>
    </thing>
  <thing id="sogTlUndeadSlay" name="Undead Slayer" compset="SoGTalent" description="You gain Intimidate, Knowledge (religion), Knowledge (planes), and Survival as class skills. You can attempt Intimidate checks against undead creatures to influence their attitude as if they were not immune to mind-affecting effects." uniqueness="useronce">
    <usesource source="pPF1e_Sph_Guile"/>
    <tag group="SoGSphere" tag="Vocation"/>
    <tag group="SoGTlClass" tag="Talent"/>
    <tag group="SoGTalDesc" tag="Trade"/>
    <tag group="SoGTalDesc" tag="Utility"/>
    <eval phase="First" priority="11000"><![CDATA[~ Get out if disabled
     doneif (tagis[Helper.SpcDisable] <> 0)
     ~ or a duplicate.
     doneif (tagis[Helper.FirstCopy] = 0)

     perform hero.child[skIntim].setfocus
     perform focus.assign[Helper.ClassSkill]
     perform focus.assignstr["TradeSkill." & this.idstring]
     if (hero.childlives[skKnowRel] = 1) then
           perform hero.child[skKnowRel].setfocus
           perform focus.assign[Helper.ClassSkill]
           perform focus.assignstr["TradeSkill." & this.idstring]
     endif
     if (hero.childlives[skKnowPlan] = 1) then
           perform hero.child[skKnowPlan].setfocus
           perform focus.assign[Helper.ClassSkill]
           perform focus.assignstr["TradeSkill." & this.idstring]
     endif
     perform hero.child[skSurvival].setfocus
     perform focus.assign[Helper.ClassSkill]
     perform focus.assignstr["TradeSkill." & this.idstring]

     perform this.assign[TradeSkill.skIntim]
     perform this.assign[TradeSkill.skKnowRel]
     perform this.assign[TradeSkill.skKnowPlan]
     perform this.assign[TradeSkill.skSurvival]]]></eval>
    <eval phase="Final" priority="15100" index="2"><![CDATA[~ Get out if disabled
     doneif (tagis[Helper.SpcDisable] <> 0)
     ~ or a duplicate.
     doneif (tagis[Helper.FirstCopy] = 0)

     ~ You can attempt Intimidate checks against undead creatures to influence their attitude as if they were not immune to mind-affecting effects.
     #situational[hero.childfound[skIntim], "You may Intimidate undead immune to mind-affecting.", field[thingname].text]]]></eval>
    </thing>
  <thing id="sogTlMystic" name="Mystic" compset="SoGTalent" description="You gain Heal, Knowledge (planes), Knowledge (religion), and Spellcraft as class skills. You may treat deadly wounds on a creature even if it was wounded more than 24 hours ago and may treat deadly wounds on each creature up to twice per day." uniqueness="useronce">
    <usesource source="pPF1e_Sph_Guile"/>
    <tag group="SoGSphere" tag="Vocation"/>
    <tag group="SoGTlClass" tag="Talent"/>
    <tag group="SoGTalDesc" tag="Trade"/>
    <tag group="SoGTalDesc" tag="Utility"/>
    <eval phase="First" priority="11000"><![CDATA[~ Get out if disabled
     doneif (tagis[Helper.SpcDisable] <> 0)
     ~ or a duplicate.
     doneif (tagis[Helper.FirstCopy] = 0)

     perform hero.child[skHeal].setfocus
     perform focus.assign[Helper.ClassSkill]
     perform focus.assignstr["TradeSkill." & this.idstring]
     if (hero.childlives[skKnowPlan] = 1) then
           perform hero.child[skKnowPlan].setfocus
           perform focus.assign[Helper.ClassSkill]
           perform focus.assignstr["TradeSkill." & this.idstring]
     endif
     if (hero.childlives[skKnowRel] = 1) then
           perform hero.child[skKnowRel].setfocus
           perform focus.assign[Helper.ClassSkill]
           perform focus.assignstr["TradeSkill." & this.idstring]
     endif
     perform hero.child[skSpellcr].setfocus
     perform focus.assign[Helper.ClassSkill]
     perform focus.assignstr["TradeSkill." & this.idstring]

     perform this.assign[TradeSkill.skHeal]
     perform this.assign[TradeSkill.skKnowPlan]
     perform this.assign[TradeSkill.skKnowRel]
     perform this.assign[TradeSkill.skSpellcr]]]></eval>
    <eval phase="Final" priority="15100" index="2"><![CDATA[~ Get out if disabled
     doneif (tagis[Helper.SpcDisable] <> 0)
     ~ or a duplicate.
     doneif (tagis[Helper.FirstCopy] = 0)

     ~ You may treat deadly wounds on a creature even if it was wounded more than 24 hours ago and may treat deadly wounds on each creature up to twice per day.
     #situational[hero.childfound[skHeal], "You may treat deadly wounds after 24 hours and also twice daily.", field[thingname].text]]]></eval>
    </thing>
  <thing id="sogTlServant" name="Servant" compset="SoGTalent" description="You gain Handle Animal, Heal, Knowledge (nobility), and Stealth as class skills. You can use your Knowledge (nobility) modifier for any skill check to aid another." uniqueness="useronce">
    <usesource source="pPF1e_Sph_Guile"/>
    <tag group="SoGSphere" tag="Vocation"/>
    <tag group="SoGTlClass" tag="Talent"/>
    <tag group="SoGTalDesc" tag="Trade"/>
    <tag group="SoGTalDesc" tag="Utility"/>
    <eval phase="First" priority="11000"><![CDATA[~ Get out if disabled
     doneif (tagis[Helper.SpcDisable] <> 0)
     ~ or a duplicate.
     doneif (tagis[Helper.FirstCopy] = 0)

     perform hero.child[skHandleAn].setfocus
     perform focus.assign[Helper.ClassSkill]
     perform focus.assignstr["TradeSkill." & this.idstring]
     perform hero.child[skHeal].setfocus
     perform focus.assign[Helper.ClassSkill]
     perform focus.assignstr["TradeSkill." & this.idstring]
     if (hero.childlives[skKnowNobl] = 1) then
           perform hero.child[skKnowNobl].setfocus
           perform focus.assign[Helper.ClassSkill]
           perform focus.assignstr["TradeSkill." & this.idstring]
     endif
     perform hero.child[skStealth].setfocus
     perform focus.assign[Helper.ClassSkill]
     perform focus.assignstr["TradeSkill." & this.idstring]

     perform this.assign[TradeSkill.skHandleAn]
     perform this.assign[TradeSkill.skHeal]
     perform this.assign[TradeSkill.skKnowNobl]
     perform this.assign[TradeSkill.skStealth]]]></eval>
    <eval phase="Final" priority="15100" index="2"><![CDATA[~ Get out if disabled
     doneif (tagis[Helper.SpcDisable] <> 0)
     ~ or a duplicate.
     doneif (tagis[Helper.FirstCopy] = 0)

     ~ You can use your Knowledge (nobility) modifier for any skill check to aid another.
     #situational[hero.childfound[skKnowNobl], "May be used for any aid another check.", field[thingname].text]]]></eval>
    </thing>
  <thing id="sogTlSkyPilot" name="Sky Pilot" compset="SoGTalent" description="You gain Acrobatics, Fly, Knowledge (geography), and Survival as class skills. You treat yourself and any vehicle you are piloting as one size larger for the purpose of being checked or blown away by wind." uniqueness="useronce">
    <usesource source="pPF1e_Sph_Guile"/>
    <tag group="SoGSphere" tag="Vocation"/>
    <tag group="SoGTlClass" tag="Talent"/>
    <tag group="SoGTalDesc" tag="Trade"/>
    <tag group="SoGTalDesc" tag="Utility"/>
    <tag group="Helper" tag="SpecUp"/>
    <eval phase="First" priority="11000"><![CDATA[~ Get out if disabled
     doneif (tagis[Helper.SpcDisable] <> 0)
     ~ or a duplicate.
     doneif (tagis[Helper.FirstCopy] = 0)

     perform hero.child[skAcrobat].setfocus
     perform focus.assign[Helper.ClassSkill]
     perform focus.assignstr["TradeSkill." & this.idstring]
     perform hero.child[skFly].setfocus
     perform focus.assign[Helper.ClassSkill]
     perform focus.assignstr["TradeSkill." & this.idstring]
     if (hero.childlives[skKnowGeog] = 1) then
           perform hero.child[skKnowGeog].setfocus
           perform focus.assign[Helper.ClassSkill]
           perform focus.assignstr["TradeSkill." & this.idstring]
     endif
     perform hero.child[skSurvival].setfocus
     perform focus.assign[Helper.ClassSkill]
     perform focus.assignstr["TradeSkill." & this.idstring]

     perform this.assign[TradeSkill.skAcrobat]
     perform this.assign[TradeSkill.skFly]
     perform this.assign[TradeSkill.skKnowGeog]
     perform this.assign[TradeSkill.skSurvival]]]></eval>
    <eval phase="Final" priority="15100" index="2"><![CDATA[~ Get out if disabled
     doneif (tagis[Helper.SpcDisable] <> 0)
     ~ or a duplicate.
     doneif (tagis[Helper.FirstCopy] = 0)

     ~ You treat yourself and any vehicle you are piloting as one size larger for the purpose of being checked or blown away by wind.
     #situational[hero.childfound[skFly], "Treat yourself & any vehicle you pilot as 1 size larger for the purpose of being checked or blown away by wind.", field[thingname].text]
     ]]></eval>
    </thing>
  <thing id="sogTlDiplomat" name="Diplomat" compset="SoGTalent" description="You gain Diplomacy, Knowledge (local), Linguistics, and Sense Motive as class skills. If you fail a Diplomacy check to alter a creature's attitude and the creature's attitude would worsen, instead the creature's attitude towards you is unchanged. A specific creature may only be affected by this ability once every 24 hours." uniqueness="useronce">
    <usesource source="pPF1e_Sph_Guile"/>
    <tag group="SoGSphere" tag="Vocation"/>
    <tag group="SoGTlClass" tag="Talent"/>
    <tag group="SoGTalDesc" tag="Trade"/>
    <tag group="SoGTalDesc" tag="Utility"/>
    <tag group="Helper" tag="SpecUp"/>
    <eval phase="First" priority="11000"><![CDATA[~ Get out if disabled
     doneif (tagis[Helper.SpcDisable] <> 0)
     ~ or a duplicate.
     doneif (tagis[Helper.FirstCopy] = 0)

     perform hero.child[skDiplo].setfocus
     perform focus.assign[Helper.ClassSkill]
     perform focus.assignstr["TradeSkill." & this.idstring]
     if (hero.childlives[skKnowLoc] = 1) then
           perform hero.child[skKnowLoc].setfocus
           perform focus.assign[Helper.ClassSkill]
           perform focus.assignstr["TradeSkill." & this.idstring]
     endif
     perform hero.child[skLinguist].setfocus
     perform focus.assign[Helper.ClassSkill]
     perform focus.assignstr["TradeSkill." & this.idstring]
     perform hero.child[skSenseMot].setfocus
     perform focus.assign[Helper.ClassSkill]
     perform focus.assignstr["TradeSkill." & this.idstring]

     perform this.assign[TradeSkill.skDiplo]
     perform this.assign[TradeSkill.skKnowLoc]
     perform this.assign[TradeSkill.skLinguist]
     perform this.assign[TradeSkill.skSenseMot]]]></eval>
    <eval phase="Final" priority="15100" index="2"><![CDATA[~ Get out if disabled
     doneif (tagis[Helper.SpcDisable] <> 0)
     ~ or a duplicate.
     doneif (tagis[Helper.FirstCopy] = 0)

     ~  If you fail a Diplomacy check to alter a creature's attitude and the creature's attitude would worsen, instead the creature's attitude towards you is unchanged. A specific creature may only be affected by this ability once every 24 hours.
     #situational[hero.childfound[skDiplo], "Failure to alter attitude never worsens (once/24 hour)", field[thingname].text]]]></eval>
    </thing>
  <thing id="sogTlDuelist" name="Duelist" compset="SoGTalent" description="You gain Bluff, Intimidate, Linguistics, and Sense Motive as class skills. You gain a +1 insight bonus on these skill checks against a target who has attacked you within the last 24 hours." uniqueness="useronce">
    <usesource source="pPF1e_Sph_Guile"/>
    <tag group="SoGSphere" tag="Vocation"/>
    <tag group="SoGTlClass" tag="Talent"/>
    <tag group="SoGTalDesc" tag="Trade"/>
    <tag group="SoGTalDesc" tag="Utility"/>
    <tag group="Helper" tag="SpecUp"/>
    <eval phase="First" priority="11000"><![CDATA[~ Get out if disabled
     doneif (tagis[Helper.SpcDisable] <> 0)
     ~ or a duplicate.
     doneif (tagis[Helper.FirstCopy] = 0)

     perform hero.child[skBluff].setfocus
     perform focus.assign[Helper.ClassSkill]
     perform focus.assignstr["TradeSkill." & this.idstring]
     perform hero.child[skIntim].setfocus
     perform focus.assign[Helper.ClassSkill]
     perform focus.assignstr["TradeSkill." & this.idstring]
     perform hero.child[skLinguist].setfocus
     perform focus.assign[Helper.ClassSkill]
     perform focus.assignstr["TradeSkill." & this.idstring]
     perform hero.child[skSenseMot].setfocus
     perform focus.assign[Helper.ClassSkill]
     perform focus.assignstr["TradeSkill." & this.idstring]

     perform this.assign[TradeSkill.skBluff]
     perform this.assign[TradeSkill.skIntim]
     perform this.assign[TradeSkill.skLinguist]
     perform this.assign[TradeSkill.skSenseMot]]]></eval>
    <eval phase="Final" priority="15100" index="2"><![CDATA[~ Get out if disabled
     doneif (tagis[Helper.SpcDisable] <> 0)
     ~ or a duplicate.
     doneif (tagis[Helper.FirstCopy] = 0)

     ~ You gain a +1 insight bonus on these skill checks against a target who has attacked you within the last 24 hours.
     #situational[hero.childfound[skBluff], "+1 insight to target who attacked you < 24 hrs", field[thingname].text]
     #situational[hero.childfound[skIntim], "+1 insight to target who attacked you < 24 hrs", field[thingname].text]
     #situational[hero.childfound[skLinguist], "+1 insight to target who attacked you < 24 hrs", field[thingname].text]
     #situational[hero.childfound[skSenseMot], "+1 insight to target who attacked you < 24 hrs", field[thingname].text]]]></eval>
    </thing>
  <thing id="sogTlFalconer" name="Falconer" compset="SoGTalent" description="You gain Climb, Fly, Handle Animal, and Knowledge (nature) as class skills. As a swift action, you may improve the maneuverability of any flying creature that can hear you by one step to a maximum of good for 1 round." uniqueness="useronce">
    <usesource source="pPF1e_Sph_Guile"/>
    <tag group="SoGSphere" tag="Vocation"/>
    <tag group="SoGTlClass" tag="Talent"/>
    <tag group="SoGTalDesc" tag="Trade"/>
    <tag group="SoGTalDesc" tag="Utility"/>
    <tag group="abAction" tag="Swift"/>
    <tag group="abDuration" tag="Round"/>
    <eval phase="First" priority="11000"><![CDATA[~ Get out if disabled
     doneif (tagis[Helper.SpcDisable] <> 0)
     ~ or a duplicate.
     doneif (tagis[Helper.FirstCopy] = 0)

     perform hero.child[skClimb].setfocus
     perform focus.assign[Helper.ClassSkill]
     perform focus.assignstr["TradeSkill." & this.idstring]
     perform hero.child[skFly].setfocus
     perform focus.assign[Helper.ClassSkill]
     perform focus.assignstr["TradeSkill." & this.idstring]
     perform hero.child[skHandleAn].setfocus
     perform focus.assign[Helper.ClassSkill]
     perform focus.assignstr["TradeSkill." & this.idstring]
     if (hero.childlives[skKnowNat] = 1) then
       perform hero.child[skKnowNat].setfocus
       perform focus.assign[Helper.ClassSkill]
       perform focus.assignstr["TradeSkill." & this.idstring]
     endif

     perform this.assign[TradeSkill.skClimb]
     perform this.assign[TradeSkill.skFly]
     perform this.assign[TradeSkill.skHandleAn]
     perform this.assign[TradeSkill.skKnowNat]]]></eval>
    </thing>
  <thing id="sogTlRoughrider" name="Roughrider" compset="SoGTalent" description="You gain Climb, Handle Animal, Ride, and Swim as class skills. Whenever you take cover, soft fall, fast mount, or fast dismount with an unwilling mount, you ignore any Climb modifiers." uniqueness="useronce">
    <usesource source="pPF1e_Sph_Guile"/>
    <tag group="SoGSphere" tag="Vocation"/>
    <tag group="SoGTlClass" tag="Talent"/>
    <tag group="SoGTalDesc" tag="Trade"/>
    <tag group="SoGTalDesc" tag="Utility"/>
    <tag group="Helper" tag="SpecUp"/>
    <eval phase="First" priority="11000"><![CDATA[~ Get out if disabled
     doneif (tagis[Helper.SpcDisable] <> 0)
     ~ or a duplicate.
     doneif (tagis[Helper.FirstCopy] = 0)

     perform hero.child[skClimb].setfocus
     perform focus.assign[Helper.ClassSkill]
     perform focus.assignstr["TradeSkill." & this.idstring]
     perform hero.child[skHandleAn].setfocus
     perform focus.assign[Helper.ClassSkill]
     perform focus.assignstr["TradeSkill." & this.idstring]
     perform hero.child[skRide].setfocus
     perform focus.assign[Helper.ClassSkill]
     perform focus.assignstr["TradeSkill." & this.idstring]
     perform hero.child[skSwim].setfocus
     perform focus.assign[Helper.ClassSkill]
     perform focus.assignstr["TradeSkill." & this.idstring]

     perform this.assign[TradeSkill.skClimb]
     perform this.assign[TradeSkill.skHandleAn]
     perform this.assign[TradeSkill.skRide]
     perform this.assign[TradeSkill.skSwim]]]></eval>
    <eval phase="Final" priority="15100" index="2"><![CDATA[~ Get out if disabled
     doneif (tagis[Helper.SpcDisable] <> 0)
     ~ or a duplicate.
     doneif (tagis[Helper.FirstCopy] = 0)

     ~ Whenever you take cover, soft fall, fast mount, or fast dismount with an unwilling mount, you ignore any Climb modifiers.
     #situational[hero.childfound[skClimb], "Ignore climb modifiers to cover, soft fall, fast mount, or fast dismount with an unwilling mount.", field[thingname].text]]]></eval>
    </thing>
  <thing id="sogTlDungDelver" name="Dungeon Delver" compset="SoGTalent" description="You gain Acrobatics, Disable Device, Knowledge (dungeoneering), and Use Magic Device as class skills. You are only considered to have failed by 5 or more on any of these skill checks if you fail by 7 or more." uniqueness="useronce">
    <usesource source="pPF1e_Sph_Guile"/>
    <tag group="SoGSphere" tag="Vocation"/>
    <tag group="SoGTlClass" tag="Talent"/>
    <tag group="SoGTalDesc" tag="Trade"/>
    <tag group="SoGTalDesc" tag="Utility"/>
    <tag group="Helper" tag="SpecUp"/>
    <eval phase="First" priority="11000"><![CDATA[~ Get out if disabled
     doneif (tagis[Helper.SpcDisable] <> 0)
     ~ or a duplicate.
     doneif (tagis[Helper.FirstCopy] = 0)

     ~ You gain Acrobatics, Disable Device, Knowledge (dungeoneering), and Use Magic Device as class skills.

     perform hero.child[skAcrobat].setfocus
     perform focus.assign[Helper.ClassSkill]
     perform focus.assignstr["TradeSkill." & this.idstring]
     perform hero.child[skDisable].setfocus
     perform focus.assign[Helper.ClassSkill]
     perform focus.assignstr["TradeSkill." & this.idstring]
     if (hero.childlives[skKnowDun] = 1) then
           perform hero.child[skKnowDun].setfocus
           perform focus.assign[Helper.ClassSkill]
           perform focus.assignstr["TradeSkill." & this.idstring]
     endif
     perform hero.child[skUseMagic].setfocus
     perform focus.assign[Helper.ClassSkill]
     perform focus.assignstr["TradeSkill." & this.idstring]

     perform this.assign[TradeSkill.skAcrobat]
     perform this.assign[TradeSkill.skDisable]
     perform this.assign[TradeSkill.skKnowDun]
     perform this.assign[TradeSkill.skUseMagic]]]></eval>
    <eval phase="Attr" priority="100003" index="2"><![CDATA[~ Get out if disabled
     doneif (tagis[Helper.SpcDisable] <> 0)
     ~ or a duplicate.
     doneif (tagis[Helper.FirstCopy] = 0)

     ~ You are only considered to have failed by 5 or more on any of these skill checks if you fail by 7 or more.

     #situational[hero.childfound[skAcrobat], "You fail by 7 instead of 5.", field[thingname].text]
     #situational[hero.childfound[skDisable], "You fail by 7 instead of 5.", field[thingname].text]
     #situational[hero.childfound[skKnowDun], "You fail by 7 instead of 5.", field[thingname].text]
     #situational[hero.childfound[skUseMagic], "You fail by 7 instead of 5.", field[thingname].text]]]></eval>
    </thing>
  <thing id="sogTlMedium" name="Medium" compset="SoGTalent" description="You gain Diplomacy, Fly, Knowledge (planes), and Knowledge (religion) as class skills. You can use the better of your Intelligence or Charisma modifier when attempting Diplomacy checks." uniqueness="useronce">
    <usesource source="pPF1e_Sph_Guile"/>
    <tag group="SoGSphere" tag="Vocation"/>
    <tag group="SoGTlClass" tag="Talent"/>
    <tag group="SoGTalDesc" tag="Trade"/>
    <tag group="SoGTalDesc" tag="Utility"/>
    <tag group="Helper" tag="SpecUp"/>
    <eval phase="First" priority="11000"><![CDATA[~ Get out if disabled
     doneif (tagis[Helper.SpcDisable] <> 0)
     ~ or a duplicate.
     doneif (tagis[Helper.FirstCopy] = 0)

     ~ You gain Diplomacy, Fly, Knowledge (planes), and Knowledge (religion) as class skills.
     perform hero.child[skDiplo].setfocus
     perform focus.assign[Helper.ClassSkill]
     perform focus.assignstr["TradeSkill." & this.idstring]
     perform hero.child[skFly].setfocus
     perform focus.assign[Helper.ClassSkill]
     perform focus.assignstr["TradeSkill." & this.idstring]
     if (hero.childlives[skKnowPlan] = 1) then
           perform hero.child[skKnowPlan].setfocus
           perform focus.assign[Helper.ClassSkill]
           perform focus.assignstr["TradeSkill." & this.idstring]
     endif
     if (hero.childlives[skKnowRel] = 1) then
           perform hero.child[skKnowRel].setfocus
           perform focus.assign[Helper.ClassSkill]
           perform focus.assignstr["TradeSkill." & this.idstring]
     endif

     perform this.assign[TradeSkill.skDiplo]
     perform this.assign[TradeSkill.skFly]
     perform this.assign[TradeSkill.skKnowPlan]
     perform this.assign[TradeSkill.skKnowRel]]]></eval>
    <eval phase="Attr" priority="100003" index="2"><![CDATA[~ Get out if disabled
     doneif (tagis[Helper.SpcDisable] <> 0)
     ~ or a duplicate.
     doneif (tagis[Helper.FirstCopy] = 0)

     ~ You can use the better of your Intelligence or Charisma modifier when attempting Diplomacy checks.
     perform hero.child[skDiplo].assign[SkillOpt.aINT]
     perform hero.child[skDiplo].assign[SkillOpt.aCHA]]]></eval>
    </thing>
  <thing id="sogTlOccultist" name="Occultist" compset="SoGTalent" description="You gain Knowledge (dungeoneering), Knowledge (planes), Linguistics, and Use Magic Device as class skills. You can use the better of your Charisma or Intelligence modifier when attempting Use Magic Device checks." uniqueness="useronce">
    <usesource source="pPF1e_Sph_Guile"/>
    <tag group="SoGSphere" tag="Vocation"/>
    <tag group="SoGTlClass" tag="Talent"/>
    <tag group="SoGTalDesc" tag="Trade"/>
    <tag group="SoGTalDesc" tag="Utility"/>
    <tag group="Helper" tag="SpecUp"/>
    <eval phase="First" priority="11000"><![CDATA[~ Get out if disabled
     doneif (tagis[Helper.SpcDisable] <> 0)
     ~ or a duplicate.
     doneif (tagis[Helper.FirstCopy] = 0)

     ~ You gain Knowledge (dungeoneering), Knowledge (planes), Linguistics, and Use Magic Device as class skills.
     if (hero.childlives[skKnowDun] = 1) then
           perform hero.child[skKnowDun].setfocus
           perform focus.assign[Helper.ClassSkill]
           perform focus.assignstr["TradeSkill." & this.idstring]
     endif
     if (hero.childlives[skKnowPlan] = 1) then
           perform hero.child[skKnowPlan].setfocus
           perform focus.assign[Helper.ClassSkill]
           perform focus.assignstr["TradeSkill." & this.idstring]
     endif
     perform hero.child[skLinguist].setfocus
     perform focus.assign[Helper.ClassSkill]
     perform focus.assignstr["TradeSkill." & this.idstring]
     perform hero.child[skUseMagic].setfocus
     perform focus.assign[Helper.ClassSkill]
     perform focus.assignstr["TradeSkill." & this.idstring]

     perform this.assign[TradeSkill.skKnowDun]
     perform this.assign[TradeSkill.skKnowPlan]
     perform this.assign[TradeSkill.skLinguist]
     perform this.assign[TradeSkill.skUseMagic]]]></eval>
    <eval phase="Attr" priority="100003" index="2"><![CDATA[~ Get out if disabled
     doneif (tagis[Helper.SpcDisable] <> 0)
     ~ or a duplicate.
     doneif (tagis[Helper.FirstCopy] = 0)

     ~ You can use the better of your Charisma or Intelligence modifier when attempting Use Magic Device checks.
     perform hero.child[skUseMagic].assign[SkillOpt.aCHA]
     perform hero.child[skUseMagic].assign[SkillOpt.aINT]]]></eval>
    </thing>
  <thing id="sogTlTranslator" name="Translator" compset="SoGTalent" description="You gain Knowledge (local), Knowledge (nobility), Sense Motive, and Linguistics as class skills. Every time you gain a rank in Linguistics, you learn one additional language in addition to the normal language or languages you learn (this benefit applies retroactively when you gain it permanently)." uniqueness="useronce">
    <usesource source="pPF1e_Sph_Guile"/>
    <tag group="SoGSphere" tag="Vocation"/>
    <tag group="SoGTlClass" tag="Talent"/>
    <tag group="SoGTalDesc" tag="Trade"/>
    <tag group="SoGTalDesc" tag="Utility"/>
    <tag group="Helper" tag="SpecUp"/>
    <eval phase="First" priority="11000"><![CDATA[~ Get out if disabled
     doneif (tagis[Helper.SpcDisable] <> 0)
     ~ or a duplicate.
     doneif (tagis[Helper.FirstCopy] = 0)

     ~ You gain Knowledge (local), Knowledge (nobility), Sense Motive, and Linguistics as class skills.
     if (hero.childlives[skKnowLoc] = 1) then
           perform hero.child[skKnowLoc].setfocus
           perform focus.assign[Helper.ClassSkill]
           perform focus.assignstr["TradeSkill." & this.idstring]
     endif
     if (hero.childlives[skKnowNobl] = 1) then
           perform hero.child[skKnowNobl].setfocus
           perform focus.assign[Helper.ClassSkill]
           perform focus.assignstr["TradeSkill." & this.idstring]
     endif
     perform hero.child[skSenseMot].setfocus
     perform focus.assign[Helper.ClassSkill]
     perform focus.assignstr["TradeSkill." & this.idstring]
     perform hero.child[skLinguist].setfocus
     perform focus.assign[Helper.ClassSkill]
     perform focus.assignstr["TradeSkill." & this.idstring]

     perform this.assign[TradeSkill.skKnowLoc]
     perform this.assign[TradeSkill.skKnowNobl]
     perform this.assign[TradeSkill.skSenseMot]
     perform this.assign[TradeSkill.skLinguist]]]></eval>
    <eval phase="PostAttr" priority="5000" index="2"><![CDATA[~ Get out if disabled
     doneif (tagis[Helper.SpcDisable] <> 0)
     ~ or a duplicate.
     doneif (tagis[Helper.FirstCopy] = 0)

     ~ Every time you gain a rank in Linguistics, you learn one additional language in addition to the normal language or languages you learn (this benefit applies retroactively when you gain it permanently).
     herofield[tLangsSpk].value += #skillranks[skLinguist]]]></eval>
    </thing>
  <thing id="sogTlExperiment" name="Experimenter" compset="SoGTalent" description="You gain Fly, Intimidate, Knowledge (engineering), and Use Magic Device as class skills. You may use the better of your Intelligence or Charisma modifier for Intimidate checks." uniqueness="useronce">
    <usesource source="pPF1e_Sph_Guile"/>
    <tag group="SoGSphere" tag="Vocation"/>
    <tag group="SoGTlClass" tag="Talent"/>
    <tag group="SoGTalDesc" tag="Trade"/>
    <tag group="SoGTalDesc" tag="Utility"/>
    <tag group="Helper" tag="SpecUp"/>
    <eval phase="First" priority="11000"><![CDATA[~ Get out if disabled
     doneif (tagis[Helper.SpcDisable] <> 0)
     ~ or a duplicate.
     doneif (tagis[Helper.FirstCopy] = 0)

     ~ You gain Fly, Intimidate, Knowledge (engineering), and Use Magic Device as class skills.
     perform hero.child[skFly].setfocus
     perform focus.assign[Helper.ClassSkill]
     perform focus.assignstr["TradeSkill." & this.idstring]
     perform hero.child[skIntim].setfocus
     perform focus.assign[Helper.ClassSkill]
     perform focus.assignstr["TradeSkill." & this.idstring]
     if (hero.childlives[skKnowEng] = 1) then
           perform hero.child[skKnowEng].setfocus
           perform focus.assign[Helper.ClassSkill]
           perform focus.assignstr["TradeSkill." & this.idstring]
     endif
     perform hero.child[skUseMagic].setfocus
     perform focus.assign[Helper.ClassSkill]
     perform focus.assignstr["TradeSkill." & this.idstring]

     perform this.assign[TradeSkill.skFly]
     perform this.assign[TradeSkill.skIntim]
     perform this.assign[TradeSkill.skKnowEng]
     perform this.assign[TradeSkill.skUseMagic]]]></eval>
    <eval phase="Attr" priority="100003" index="2"><![CDATA[~ Get out if disabled
     doneif (tagis[Helper.SpcDisable] <> 0)
     ~ or a duplicate.
     doneif (tagis[Helper.FirstCopy] = 0)

     ~  You may use the better of your Intelligence or Charisma modifier for Intimidate checks.
     perform hero.child[skIntim].assign[SkillOpt.aINT]
     perform hero.child[skIntim].assign[SkillOpt.aCHA]]]></eval>
    </thing>
  <thing id="sogTlMonsterHunt" name="Monster Hunter" compset="SoGTalent" description="You gain Appraise, Intimidate, Knowledge (arcana), and Survival as class skills. You do not take penalties on Intimidate checks for being smaller than your target." uniqueness="useronce">
    <usesource source="pPF1e_Sph_Guile"/>
    <tag group="SoGSphere" tag="Vocation"/>
    <tag group="SoGTlClass" tag="Talent"/>
    <tag group="SoGTalDesc" tag="Trade"/>
    <tag group="SoGTalDesc" tag="Utility"/>
    <tag group="Helper" tag="SpecUp"/>
    <eval phase="First" priority="11000"><![CDATA[~ Get out if disabled
     doneif (tagis[Helper.SpcDisable] <> 0)
     ~ or a duplicate.
     doneif (tagis[Helper.FirstCopy] = 0)

     perform hero.child[skAppraise].setfocus
     perform focus.assign[Helper.ClassSkill]
     perform focus.assignstr["TradeSkill." & this.idstring]
     perform hero.child[skIntim].setfocus
     perform focus.assign[Helper.ClassSkill]
     perform focus.assignstr["TradeSkill." & this.idstring]
     if (hero.childlives[skKnowArca] = 1) then
           perform hero.child[skKnowArca].setfocus
           perform focus.assign[Helper.ClassSkill]
           perform focus.assignstr["TradeSkill." & this.idstring]
     endif
     perform hero.child[skSurvival].setfocus
     perform focus.assign[Helper.ClassSkill]
     perform focus.assignstr["TradeSkill." & this.idstring]

     perform this.assign[TradeSkill.skAppraise]
     perform this.assign[TradeSkill.skIntim]
     perform this.assign[TradeSkill.skKnowArca]
     perform this.assign[TradeSkill.skSurvival]]]></eval>
    <eval phase="Attr" priority="100003" index="2"><![CDATA[~ Get out if disabled
     doneif (tagis[Helper.SpcDisable] <> 0)
     ~ or a duplicate.
     doneif (tagis[Helper.FirstCopy] = 0)

     ~ You do not take penalties on Intimidate checks for being smaller than your target.
     #situational[hero.childfound[skIntim], "No size penalties to Intimidate creatures aware of you.", field[thingname].text]]]></eval>
    </thing>
  <thing id="sogTlMageHunt" name="Mage Hunter" compset="SoGTalent" description="You gain Disable Device, Disguise, Knowledge (arcana), and Spellcraft as class skills. You can disable magical traps using Disable Device as if you had the trapfinding class feature." uniqueness="useronce">
    <usesource source="pPF1e_Sph_Guile"/>
    <tag group="SoGSphere" tag="Vocation"/>
    <tag group="SoGTlClass" tag="Talent"/>
    <tag group="SoGTalDesc" tag="Trade"/>
    <tag group="SoGTalDesc" tag="Utility"/>
    <tag group="Helper" tag="SpecUp"/>
    <eval phase="First" priority="11000"><![CDATA[~ Get out if disabled
     doneif (tagis[Helper.SpcDisable] <> 0)
     ~ or a duplicate.
     doneif (tagis[Helper.FirstCopy] = 0)

     perform hero.child[skDisable].setfocus
     perform focus.assign[Helper.ClassSkill]
     perform focus.assignstr["TradeSkill." & this.idstring]
     perform hero.child[skDisguise].setfocus
     perform focus.assign[Helper.ClassSkill]
     perform focus.assignstr["TradeSkill." & this.idstring]
     if (hero.childlives[skKnowArca] = 1) then
           perform hero.child[skKnowArca].setfocus
           perform focus.assign[Helper.ClassSkill]
           perform focus.assignstr["TradeSkill." & this.idstring]
     endif
     perform hero.child[skSpellcr].setfocus
     perform focus.assign[Helper.ClassSkill]
     perform focus.assignstr["TradeSkill." & this.idstring]

     perform this.assign[TradeSkill.skDisable]
     perform this.assign[TradeSkill.skDisguise]
     perform this.assign[TradeSkill.skKnowArca]
     perform this.assign[TradeSkill.skSpellcr]]]></eval>
    <eval phase="Attr" priority="100003" index="2"><![CDATA[~ Get out if disabled
     doneif (tagis[Helper.SpcDisable] <> 0)
     ~ or a duplicate.
     doneif (tagis[Helper.FirstCopy] = 0)

     ~ Confirmation it is just the Disarm Magical part, no Perception bonus.
     ~ https://discord.com/channels/533773201549819925/585184023794679810/1334703547073429527

     ~ You can disable magical traps using Disable Device as if you had the trapfinding class feature.
     #situational[hero.childfound[skDisable], "You disable magical traps as if you had trapfinding.", field[thingname].text]]]></eval>
    </thing>
  <thing id="sogTlStoryteller" name="Storyteller" compset="SoGTalent" description="You gain Diplomacy, Knowledge (history), Knowledge (local), and Knowledge (nobility) as class skills. You can use the higher of your Charisma or Intelligence modifiers when attempting two of Knowledge (history), Knowledge (local), and Knowledge (nobility) checks, chosen when you select this talent." uniqueness="useronce">
    <fieldval field="usrCandid1" value="component.BaseSkill &amp; (Reference.skKnowHist | Reference.skKnowLoc | Reference.skKnowNobl)"/>
    <fieldval field="usrCandid2" value="component.BaseSkill &amp; (Reference.skKnowHist | Reference.skKnowLoc | Reference.skKnowNobl)"/>
    <usesource source="pPF1e_Sph_Guile"/>
    <tag group="SoGSphere" tag="Vocation"/>
    <tag group="SoGTlClass" tag="Talent"/>
    <tag group="SoGTalDesc" tag="Trade"/>
    <tag group="SoGTalDesc" tag="Utility"/>
    <tag group="ChooseSrc1" tag="Hero"/>
    <tag group="ChooseSrc2" tag="Hero"/>
    <tag group="Helper" tag="SpecUp"/>
    <tag group="Hide" tag="Activation"/>
    <tag group="User" tag="NoAutoName"/>
    <eval phase="First" priority="11000"><![CDATA[~ Get out if disabled
     doneif (tagis[Helper.SpcDisable] <> 0)
     ~ or a duplicate.
     doneif (tagis[Helper.FirstCopy] = 0)

     perform hero.child[skDiplo].setfocus
     perform focus.assign[Helper.ClassSkill]
     perform focus.assignstr["TradeSkill." & this.idstring]
     if (hero.childlives[skKnowHist] = 1) then
           perform hero.child[skKnowHist].setfocus
           perform focus.assign[Helper.ClassSkill]
           perform focus.assignstr["TradeSkill." & this.idstring]
     endif
     if (hero.childlives[skKnowLoc] = 1) then
           perform hero.child[skKnowLoc].setfocus
           perform focus.assign[Helper.ClassSkill]
           perform focus.assignstr["TradeSkill." & this.idstring]
     endif
     if (hero.childlives[skKnowNobl] = 1) then
           perform hero.child[skKnowNobl].setfocus
           perform focus.assign[Helper.ClassSkill]
           perform focus.assignstr["TradeSkill." & this.idstring]
     endif

     perform this.assign[TradeSkill.skAppraise]
     perform this.assign[TradeSkill.skKnowHist]
     perform this.assign[TradeSkill.skKnowLoc]
     perform this.assign[TradeSkill.skKnowNobl]]]></eval>
    <eval phase="Attr" priority="100003" index="2"><![CDATA[~ Get out if disabled
     doneif (tagis[Helper.SpcDisable] <> 0)
     ~ or a duplicate.
     doneif (tagis[Helper.FirstCopy] = 0)

      doneif (field[usrChosen1].ischosen = 0)
      doneif (field[usrChosen2].ischosen = 0)

     ~ You can use the higher of your Charisma or Intelligence modifiers when attempting two of Knowledge (history), Knowledge (local), and Knowledge (nobility) checks, chosen when you select this talent.
     perform field[usrChosen1].chosen.assign[SkillOver.aINT]
     perform field[usrChosen1].chosen.assign[SkillOver.aCHA]
     perform field[usrChosen2].chosen.assign[SkillOver.aINT]
     perform field[usrChosen2].chosen.assign[SkillOver.aCHA]]]></eval>
    </thing>
  <thing id="sogTlFalseMage" name="False Mage" compset="SoGTalent" description="You gain Bluff, Knowledge (arcana), Sleight of Hand, and Use Magic Device as class skills. You may use your Charisma modifier in place of your Dexterity modifier for Sleight of Hand checks." uniqueness="useronce">
    <usesource source="pPF1e_Sph_Guile"/>
    <tag group="SoGSphere" tag="Vocation"/>
    <tag group="SoGTlClass" tag="Talent"/>
    <tag group="SoGTalDesc" tag="Trade"/>
    <tag group="SoGTalDesc" tag="Utility"/>
    <tag group="Helper" tag="SpecUp"/>
    <eval phase="First" priority="11000"><![CDATA[~ Get out if disabled
     doneif (tagis[Helper.SpcDisable] <> 0)
     ~ or a duplicate.
     doneif (tagis[Helper.FirstCopy] = 0)

     perform hero.child[skBluff].setfocus
     perform focus.assign[Helper.ClassSkill]
     perform focus.assignstr["TradeSkill." & this.idstring]
     if (hero.childlives[skKnowArca] = 1) then
           perform hero.child[skKnowArca].setfocus
           perform focus.assign[Helper.ClassSkill]
           perform focus.assignstr["TradeSkill." & this.idstring]
     endif
     perform hero.child[skSleight].setfocus
     perform focus.assign[Helper.ClassSkill]
     perform focus.assignstr["TradeSkill." & this.idstring]
     perform hero.child[skUseMagic].setfocus
     perform focus.assign[Helper.ClassSkill]
     perform focus.assignstr["TradeSkill." & this.idstring]

     perform this.assign[TradeSkill.skBluff]
     perform this.assign[TradeSkill.skKnowArca]
     perform this.assign[TradeSkill.skSleight]
     perform this.assign[TradeSkill.skUseMagic]]]></eval>
    <eval phase="Attr" priority="100003" index="2"><![CDATA[~ Get out if disabled
     doneif (tagis[Helper.SpcDisable] <> 0)
     ~ or a duplicate.
     doneif (tagis[Helper.FirstCopy] = 0)

     ~ You may use your Charisma modifier in place of your Dexterity modifier for Sleight of Hand checks.
     perform hero.child[skSleight].assign[SkillOpt.aDEX]
     perform hero.child[skSleight].assign[SkillOpt.aCHA]]]></eval>
    </thing>
  <thing id="sogTlFeyFriend" name="Fey Friend" compset="SoGTalent" description="You gain Knowledge (nature), Knowledge (nobility), Linguistics, and Spellcraft as class skills. You can use your Charisma modifier in place of your Intelligence modifier for Spellcraft checks." uniqueness="useronce">
    <usesource source="pPF1e_Sph_Guile"/>
    <tag group="SoGSphere" tag="Vocation"/>
    <tag group="SoGTlClass" tag="Talent"/>
    <tag group="SoGTalDesc" tag="Trade"/>
    <tag group="SoGTalDesc" tag="Utility"/>
    <tag group="Helper" tag="SpecUp"/>
    <eval phase="First" priority="11000"><![CDATA[~ Get out if disabled
     doneif (tagis[Helper.SpcDisable] <> 0)
     ~ or a duplicate.
     doneif (tagis[Helper.FirstCopy] = 0)

     if (hero.childlives[skKnowNat] = 1) then
           perform hero.child[skKnowNat].setfocus
           perform focus.assign[Helper.ClassSkill]
           perform focus.assignstr["TradeSkill." & this.idstring]
     endif
     if (hero.childlives[skKnowNobl] = 1) then
           perform hero.child[skKnowNobl].setfocus
           perform focus.assign[Helper.ClassSkill]
           perform focus.assignstr["TradeSkill." & this.idstring]
     endif
     perform hero.child[skLinguist].setfocus
     perform focus.assign[Helper.ClassSkill]
     perform focus.assignstr["TradeSkill." & this.idstring]
     perform hero.child[skSpellcr].setfocus
     perform focus.assign[Helper.ClassSkill]
     perform focus.assignstr["TradeSkill." & this.idstring]

     perform this.assign[TradeSkill.skKnowNat]
     perform this.assign[TradeSkill.skKnowNobl]
     perform this.assign[TradeSkill.skLinguist]
     perform this.assign[TradeSkill.skSpellcr]]]></eval>
    <eval phase="Attr" priority="100003" index="2"><![CDATA[~ Get out if disabled
     doneif (tagis[Helper.SpcDisable] <> 0)
     ~ or a duplicate.
     doneif (tagis[Helper.FirstCopy] = 0)

     ~ You can use your Charisma modifier in place of your Intelligence modifier for Spellcraft checks.
     perform hero.child[skSpellcr].assign[SkillOpt.aINT]
     perform hero.child[skSpellcr].assign[SkillOpt.aCHA]]]></eval>
    </thing>
  <thing id="sogTlGossip" name="Gossip" compset="SoGTalent" description="You gain Diplomacy, Knowledge (local), Knowledge (nobility), and Sense Motive as class skills. You can use your Charisma modifier in place of your Wisdom modifier for Sense Motive checks." uniqueness="useronce">
    <usesource source="pPF1e_Sph_Guile"/>
    <tag group="SoGSphere" tag="Vocation"/>
    <tag group="SoGTlClass" tag="Talent"/>
    <tag group="SoGTalDesc" tag="Trade"/>
    <tag group="SoGTalDesc" tag="Utility"/>
    <tag group="Helper" tag="SpecUp"/>
    <eval phase="First" priority="11000"><![CDATA[~ Get out if disabled
     doneif (tagis[Helper.SpcDisable] <> 0)
     ~ or a duplicate.
     doneif (tagis[Helper.FirstCopy] = 0)

     perform hero.child[skDiplo].setfocus
     perform focus.assign[Helper.ClassSkill]
     perform focus.assignstr["TradeSkill." & this.idstring]
     if (hero.childlives[skKnowLoc] = 1) then
           perform hero.child[skKnowLoc].setfocus
           perform focus.assign[Helper.ClassSkill]
           perform focus.assignstr["TradeSkill." & this.idstring]
     endif
     if (hero.childlives[skKnowNobl] = 1) then
           perform hero.child[skKnowNobl].setfocus
           perform focus.assign[Helper.ClassSkill]
           perform focus.assignstr["TradeSkill." & this.idstring]
     endif
     perform hero.child[skSenseMot].setfocus
     perform focus.assign[Helper.ClassSkill]
     perform focus.assignstr["TradeSkill." & this.idstring]

     perform this.assign[TradeSkill.skDiplo]
     perform this.assign[TradeSkill.skKnowLoc]
     perform this.assign[TradeSkill.skKnowNobl]
     perform this.assign[TradeSkill.skSenseMot]]]></eval>
    <eval phase="Attr" priority="100003" index="2"><![CDATA[~ Get out if disabled
     doneif (tagis[Helper.SpcDisable] <> 0)
     ~ or a duplicate.
     doneif (tagis[Helper.FirstCopy] = 0)

     ~ You can use your Charisma modifier in place of your Wisdom modifier for Sense Motive checks.
     perform hero.child[skSenseMot].assign[SkillOver.aWIS]
     perform hero.child[skSenseMot].assign[SkillOver.aCHA]]]></eval>
    </thing>
  <thing id="sogTlDilettante" name="Dilettante" compset="SoGTalent" description="You gain four skills of your choice as class skills, at least one of which must be a background skill. You may select this talent multiple times, gaining a different set of skills each time.\n\n{b}Note{/b}:Choose two skills to become class skills, the first one being a background skill.">
    <fieldval field="usrCandid1" value="component.BaseSkill"/>
    <fieldval field="usrCandid2" value="component.BaseSkill"/>
    <usesource source="pPF1e_Sph_Guile"/>
    <tag group="SoGSphere" tag="Vocation"/>
    <tag group="SoGTlClass" tag="Talent"/>
    <tag group="SoGTalDesc" tag="Trade"/>
    <tag group="SoGTalDesc" tag="Utility"/>
    <tag group="ChooseSrc1" tag="Hero"/>
    <tag group="ChooseSrc2" tag="Hero"/>
    <tag group="Helper" tag="SpecUp"/>
    <tag group="Hide" tag="Activation"/>
    <tag group="User" tag="NoAutoName"/>
    <bootstrap thing="sogTlDilettantH">
      <autotag group="Helper" tag="Free"/>
      </bootstrap>
    <eval phase="First" priority="11000"><![CDATA[~ Get out if disabled
      doneif (tagis[Helper.SpcDisable] <> 0)

      doneif (field[usrChosen1].ischosen = 0)
      doneif (field[usrChosen2].ischosen = 0)

      perform field[usrChosen1].chosen.setfocus
      perform focus.assign[Helper.ClassSkill]
      perform focus.assignstr["TradeSkill." & this.idstring]
      perform focus.pulltags[Target.?]
      perform this.assignstr["TradeSkill." & focus.idstring]

      perform field[usrChosen2].chosen.setfocus
      perform focus.assign[Helper.ClassSkill]
      perform focus.assignstr["TradeSkill." & this.idstring]
      perform focus.pulltags[Target.?]
      perform this.assignstr["TradeSkill." & focus.idstring]]]></eval>
    <evalrule phase="Final" priority="2147483647" message="You may not duplicate skills or have missing skill choices." summary="You may not duplicate skills or have missing skill choices."><![CDATA[     @valid = 0
     validif (tagis[Helper.SpcDisable] <> 0)
     ~ or not chosen.
     doneif (field[usrChosen1].ischosen = 0)
     doneif (field[usrChosen2].ischosen = 0)

     foreach pick in hero from SoGTalent where "thingid." & idstring
       if (eachpick.uniqindex <> this.uniqindex) then
         if (eachpick.intersect[Target,Target] <> 0) then
           done
         endif
       endif
     nexteach

     @valid = 0
     @message = "The first choice must be a background skill."
     doneif (field[usrChosen1].chosen.tagis[Helper.BackSkill] = 0)

     ~ or less than 4 unique Target.? tags
     @message = "Requires at least 4 skills, including the 2 on the second line."
     doneif (tagunique[Target.?] < 4)

     @valid = 1]]></evalrule>
    </thing>
  <thing id="sogTlDilettantH" name="Dilettante" compset="SoGTalent" description="{b}Note{/b}: Choose two skills to become class skills.">
    <fieldval field="usrCandid1" value="component.BaseSkill"/>
    <fieldval field="usrCandid2" value="component.BaseSkill"/>
    <usesource source="pPF1e_Sph_Guile"/>
    <tag group="SphOfGuil" tag="Helper"/>
    <tag group="SoGSphere" tag="Vocation"/>
    <tag group="SoGTlClass" tag="Talent"/>
    <tag group="SoGTalDesc" tag="Trade"/>
    <tag group="SoGTalDesc" tag="Utility"/>
    <tag group="ChooseSrc1" tag="Hero"/>
    <tag group="ChooseSrc2" tag="Hero"/>
    <tag group="Helper" tag="SpecUp"/>
    <tag group="Hide" tag="Activation"/>
    <tag group="User" tag="NoAutoName"/>
    <eval phase="First" priority="11000"><![CDATA[~ Get out if disabled
      doneif (isroot = 0)
      doneif (root.tagis[Helper.SpcDisable] <> 0)

     ~ If root was picked by a Utility Start, we pull that tag to sort adjacent.
     perform root.pulltags[SoGTlClass.InitTalent]

      doneif (field[usrChosen1].ischosen = 0)
      doneif (field[usrChosen2].ischosen = 0)

      perform field[usrChosen1].chosen.setfocus
      perform focus.assign[Helper.ClassSkill]
      perform focus.assignstr["TradeSkill." & root.idstring]
      perform focus.pulltags[Target.?]
      perform root.assignstr["TradeSkill." & focus.idstring]

      perform field[usrChosen2].chosen.setfocus
      perform focus.assign[Helper.ClassSkill]
      perform focus.assignstr["TradeSkill." & root.idstring]
      perform focus.pulltags[Target.?]
      perform root.assignstr["TradeSkill." & focus.idstring]

      perform root.pushtags[Target.?]]]></eval>
    <evalrule phase="Final" priority="2147483647" message="You must have"><![CDATA[     @valid = 0
     doneif (isroot = 0)
     validif (root.tagis[Helper.SpcDisable] <> 0)
     ~ or not chosen.
     doneif (field[usrChosen1].ischosen = 0)
     doneif (field[usrChosen2].ischosen = 0)

     ~ or less than 2 unique Target.? tags on the second line.
     @message = "Requires at least 2 skills on the second line of choosers."
     doneif (tagunique[Target.?] < 2)

     @valid = 1]]></evalrule>
    </thing>
  <thing id="sogTlEntertainer" name="Entertainer" compset="SoGTalent" description="You gain Acrobatics, Disguise, Escape Artist, and Sleight of Hand as class skills. You may use the better of your Dexterity or Charisma modifier when using one of these skills (chosen when you gain this talent) to entertain or interact with a creature that is aware of you (including escaping from a grapple or tumbling through a creature's space). You may select this talent a second time, in which case you may use the better of the two ability score modifiers on all of the chosen skills.">
    <fieldval field="tMaxTaken" value="2"/>
    <fieldval field="usrCandid1" value="component.BaseSkill &amp; (thingid.skAcrobat | thingid.skDisguise | thingid.skEscape | thingid.skSleight)"/>
    <usesource source="pPF1e_Sph_Guile"/>
    <tag group="SoGSphere" tag="Vocation"/>
    <tag group="SoGTlClass" tag="Talent"/>
    <tag group="SoGTalDesc" tag="Trade"/>
    <tag group="SoGTalDesc" tag="Utility"/>
    <tag group="ChooseSrc1" tag="Hero"/>
    <tag group="Helper" tag="SpecUp"/>
    <tag group="Hide" tag="Activation"/>
    <eval phase="First" priority="11000"><![CDATA[~ Get out if disabled
     doneif (tagis[Helper.SpcDisable] <> 0)
     ~ or a duplicate.
     doneif (tagis[Helper.FirstCopy] = 0)

     perform hero.child[skAcrobat].setfocus
     perform focus.assign[Helper.ClassSkill]
     perform focus.assignstr["TradeSkill." & this.idstring]
     perform hero.child[skDisguise].setfocus
     perform focus.assign[Helper.ClassSkill]
     perform focus.assignstr["TradeSkill." & this.idstring]
     perform hero.child[skEscape].setfocus
     perform focus.assign[Helper.ClassSkill]
     perform focus.assignstr["TradeSkill." & this.idstring]
     perform hero.child[skSleight].setfocus
     perform focus.assign[Helper.ClassSkill]
     perform focus.assignstr["TradeSkill." & this.idstring]

     perform this.assign[TradeSkill.skAcrobat]
     perform this.assign[TradeSkill.skDisguise]
     perform this.assign[TradeSkill.skEscape]
     perform this.assign[TradeSkill.skSleight]]]></eval>
    <eval phase="Attr" priority="100003" index="2"><![CDATA[~ Get out if disabled
     doneif (tagis[Helper.SpcDisable] <> 0)

     var bCHA as number
     bCHA = hero.child[aCHA].field[aModBonus].value
     bCHA -= hero.child[aDEX].field[aModBonus].value
     var bDEX as number
     bDEX = 0 - bCHA

     if (field[tTaken].value = 1) then
       doneif (field[usrChosen1].ischosen = 0)
       perform field[usrChosen1].chosen.setfocus
       doneif (state.isfocus = 0)
       if (focus.tagis[SkillAbil.aCHA] <> 0) then
         if (bDEX > 0) then
           #situational[focus, "+" & bDEX & " to interact with a creature that is aware of you.", field[thingname].text]
         endif
       endif
       done
     else
       if (tagis[Helper.FirstCopy] = 1) then
         if (bCHA > 0) then
           #situational[hero.child[skAcrobat], "+" & bCHA & " to interact with a creature that is aware of you.", field[thingname].text]
           #situational[hero.child[skEscape], "+" & bCHA & " to interact with a creature that is aware of you.", field[thingname].text]
           #situational[hero.child[skSleight], "+" & bCHA & " to interact with a creature that is aware of you.", field[thingname].text]
         else
           #situational[hero.child[skDisguise], "+" & bDEX & " to interact with a creature that is aware of you.", field[thingname].text]
         endif
         field[abText].text = "Acro, Disgu, Esc, Sleight"
       else
         field[abText].text = "Taken twice"
       endif
       field[usrCandid1].text = ""
       perform delete[ChooseSrc1.?]
       perform assign[LvNamePar.AppText]
       perform assign[SbNamePar.AppText]
     endif]]></eval>
    </thing>
  <thing id="sogTlThug" name="Thug" compset="SoGTalent" description="You gain Disguise, Intimidate, Knowledge (local), and Stealth as class skills. You can add your Strength modifier in place of your Charisma modifier when attempting Intimidate checks." uniqueness="useronce">
    <usesource source="pPF1e_Sph_Guile"/>
    <tag group="SoGSphere" tag="Vocation"/>
    <tag group="SoGTlClass" tag="Talent"/>
    <tag group="SoGTalDesc" tag="Trade"/>
    <tag group="SoGTalDesc" tag="Utility"/>
    <tag group="Helper" tag="SpecUp"/>
    <eval phase="First" priority="11000"><![CDATA[~ Get out if disabled
     doneif (tagis[Helper.SpcDisable] <> 0)
     ~ or a duplicate.
     doneif (tagis[Helper.FirstCopy] = 0)

     perform hero.child[skDisguise].setfocus
     perform focus.assign[Helper.ClassSkill]
     perform focus.assignstr["TradeSkill." & this.idstring]
     perform hero.child[skIntim].setfocus
     perform focus.assign[Helper.ClassSkill]
     perform focus.assignstr["TradeSkill." & this.idstring]
     if (hero.childlives[skKnowLoc] = 1) then
           perform hero.child[skKnowLoc].setfocus
           perform focus.assign[Helper.ClassSkill]
           perform focus.assignstr["TradeSkill." & this.idstring]
     endif
     perform hero.child[skStealth].setfocus
     perform focus.assign[Helper.ClassSkill]
     perform focus.assignstr["TradeSkill." & this.idstring]

     perform this.assign[TradeSkill.skDisguise]
     perform this.assign[TradeSkill.skIntim]
     perform this.assign[TradeSkill.skKnowLoc]
     perform this.assign[TradeSkill.skStealth]]]></eval>
    <eval phase="Attr" priority="100003" index="2"><![CDATA[~ Get out if disabled
     doneif (tagis[Helper.SpcDisable] <> 0)
     ~ or a duplicate.
     doneif (tagis[Helper.FirstCopy] = 0)

     ~ You can add your Strength modifier in place of your Charisma modifier when attempting Intimidate checks.
     perform hero.child[skIntim].assign[SkillOver.aSTR]
     perform hero.child[skIntim].assign[SkillOver.aCHA]]]></eval>
    </thing>
  <thing id="sogTlPlanewalker" name="Plane-walker" compset="SoGTalent" description="You gain Fly, Knowledge (planes), Linguistics, and Use Magic Device as class skills. You can use your Charisma modifier when attempting your choice of either Knowledge (planes) or Linguistics checks instead of your Intelligence modifier." uniqueness="useronce">
    <fieldval field="usrCandid1" value="component.BaseSkill &amp; (Reference.skKnowPlan | Reference.skLinguist)"/>
    <usesource source="pPF1e_Sph_Guile"/>
    <tag group="SoGSphere" tag="Vocation"/>
    <tag group="SoGTlClass" tag="Talent"/>
    <tag group="SoGTalDesc" tag="Trade"/>
    <tag group="SoGTalDesc" tag="Utility"/>
    <tag group="ChooseSrc1" tag="Hero"/>
    <tag group="Helper" tag="SpecUp"/>
    <tag group="Hide" tag="Activation"/>
    <eval phase="First" priority="11000"><![CDATA[~ Get out if disabled
     doneif (tagis[Helper.SpcDisable] <> 0)
     ~ or a duplicate.
     doneif (tagis[Helper.FirstCopy] = 0)

     perform hero.child[skFly].setfocus
     perform focus.assign[Helper.ClassSkill]
     perform focus.assignstr["TradeSkill." & this.idstring]
     if (hero.childlives[skKnowPlan] = 1) then
           perform hero.child[skKnowPlan].setfocus
           perform focus.assign[Helper.ClassSkill]
           perform focus.assignstr["TradeSkill." & this.idstring]
     endif
     perform hero.child[skLinguist].setfocus
     perform focus.assign[Helper.ClassSkill]
     perform focus.assignstr["TradeSkill." & this.idstring]
     perform hero.child[skUseMagic].setfocus
     perform focus.assign[Helper.ClassSkill]
     perform focus.assignstr["TradeSkill." & this.idstring]

     perform this.assign[TradeSkill.skFly]
     perform this.assign[TradeSkill.skKnowPlan]
     perform this.assign[TradeSkill.skLinguist]
     perform this.assign[TradeSkill.skUseMagic]]]></eval>
    <eval phase="Attr" priority="100003" index="2"><![CDATA[~ Get out if disabled
     doneif (tagis[Helper.SpcDisable] <> 0)
     ~ or a duplicate.
     doneif (tagis[Helper.FirstCopy] = 0)

     doneif (field[usrChosen1].ischosen = 0)

     ~ You can use your Charisma modifier when attempting your choice of either Knowledge (planes) or Linguistics checks instead of your Intelligence modifier.
     perform field[usrChosen1].chosen.assign[SkillOver.aINT]
     perform field[usrChosen1].chosen.assign[SkillOver.aCHA]]]></eval>
    </thing>
  <thing id="sogTlAthlete" name="Athlete" compset="SoGTalent" description="You gain Acrobatics, Climb, Fly, and Swim as class skills. You may use the better of your Dexterity or Strength modifier instead of the normal ability modifier for one of Climb, Acrobatics, Fly, or Swim, chosen when you select this talent. You may select this talent a second time, in which case you may use the better of the two ability score modifiers on all of the chosen skills.">
    <fieldval field="tMaxTaken" value="2"/>
    <fieldval field="usrCandid1" value="component.BaseSkill &amp; (Reference.skAcrobat | Reference.skClimb | Reference.skFly | Reference.skSwim)"/>
    <usesource source="pPF1e_Sph_Guile"/>
    <tag group="SphOfGuil" tag="LnNoCount"/>
    <tag group="SoGSphere" tag="Vocation"/>
    <tag group="SoGTlClass" tag="Talent"/>
    <tag group="SoGTalDesc" tag="Trade"/>
    <tag group="SoGTalDesc" tag="Utility"/>
    <tag group="ChooseSrc1" tag="Hero"/>
    <tag group="Helper" tag="SpecUp"/>
    <tag group="Hide" tag="Activation"/>
    <eval phase="Attr" priority="100003" index="2"><![CDATA[~ Get out if disabled
     doneif (tagis[Helper.SpcDisable] <> 0)
     ~ or a duplicate.
     doneif (tagis[Helper.FirstCopy] = 0)

     ~ You may use the better of your Dexterity or Strength modifier instead of the normal ability modifier for one of Climb, Acrobatics, Fly, or Swim, chosen when you select this talent. You may select this talent a second time, in which case you may use the better of the two ability score modifiers on all of the chosen skills.
     if (field[tTaken].value < 2) then
       perform field[usrChosen1].chosen.assign[SkillOpt.aSTR]
       perform field[usrChosen1].chosen.assign[SkillOpt.aDEX]
     else
       perform hero.child[skClimb].assign[SkillOpt.aSTR]
       perform hero.child[skClimb].assign[SkillOpt.aDEX]
       perform hero.child[skAcrobat].assign[SkillOpt.aSTR]
       perform hero.child[skAcrobat].assign[SkillOpt.aDEX]
       perform hero.child[skFly].assign[SkillOpt.aSTR]
       perform hero.child[skFly].assign[SkillOpt.aDEX]
       perform hero.child[skSwim].assign[SkillOpt.aSTR]
       perform hero.child[skSwim].assign[SkillOpt.aDEX]
       endif]]></eval>
    <eval phase="First" priority="11000"><![CDATA[~ Get out if disabled
     doneif (tagis[Helper.SpcDisable] <> 0)
     ~ or a duplicate.
     doneif (tagis[Helper.FirstCopy] = 0)

      perform hero.child[skAcrobat].setfocus
      perform focus.assign[Helper.ClassSkill]
      perform focus.assignstr["TradeSkill." & this.idstring]
      perform hero.child[skClimb].setfocus
      perform focus.assign[Helper.ClassSkill]
      perform focus.assignstr["TradeSkill." & this.idstring]
      perform hero.child[skFly].setfocus
      perform focus.assign[Helper.ClassSkill]
      perform focus.assignstr["TradeSkill." & this.idstring]
      perform hero.child[skSwim].setfocus
      perform focus.assign[Helper.ClassSkill]
      perform focus.assignstr["TradeSkill." & this.idstring]

      perform this.assign[TradeSkill.skAcrobat]
      perform this.assign[TradeSkill.skClimb]
      perform this.assign[TradeSkill.skFly]
      perform this.assign[TradeSkill.skSwim]]]>
      <before name="Process Skill Replacements"/>
      <before name="Tag all duplicate TradeSkills"/>
      <after name="Call SoGSetupTl"/>
      </eval>
    <eval phase="Final" priority="99999999" index="3"><![CDATA[
      if (field[tTaken].value > 1) then
          if (tagis[Helper.FirstCopy] = 1) then
              field[abText].text = "Acrobatics, Climb, Fly, and Swim"
          else
              field[abText].text = "Taken Twice"
          endif
          perform assign[LvNamePar.AppText]
          perform assign[SbNamePar.AppText]
          field[usrCandid1].text = ""
          perform delete[ChooseSrc1.?]
        if (tagis[Helper.FirstCopy] = 0) then
          perform assign[Helper.SpecUp]
        endif
      endif]]></eval>
    </thing>
  <thing id="sogTlDragonEnvoy" name="Dragon Envoy" compset="SoGTalent" description="You gain Diplomacy, Fly, Knowledge (arcana), and Knowledge (planes) as class skills. Creatures do not gain a bonus to Intimidate checks against you for being larger than you." uniqueness="useronce">
    <usesource source="pPF1e_Sph_Guile"/>
    <tag group="SoGSphere" tag="Vocation"/>
    <tag group="SoGTlClass" tag="Talent"/>
    <tag group="SoGTalDesc" tag="Trade"/>
    <tag group="SoGTalDesc" tag="Utility"/>
    <tag group="Helper" tag="SpecUp"/>
    <eval phase="First" priority="11000"><![CDATA[~ Get out if disabled
     doneif (tagis[Helper.SpcDisable] <> 0)
     ~ or a duplicate.
     doneif (tagis[Helper.FirstCopy] = 0)

     perform hero.child[skDiplo].setfocus
     perform focus.assign[Helper.ClassSkill]
     perform focus.assignstr["TradeSkill." & this.idstring]
     perform hero.child[skFly].setfocus
     perform focus.assign[Helper.ClassSkill]
     perform focus.assignstr["TradeSkill." & this.idstring]
     if (hero.childlives[skKnowArca] = 1) then
           perform hero.child[skKnowArca].setfocus
           perform focus.assign[Helper.ClassSkill]
           perform focus.assignstr["TradeSkill." & this.idstring]
     endif
     if (hero.childlives[skKnowPlan] = 1) then
           perform hero.child[skKnowPlan].setfocus
           perform focus.assign[Helper.ClassSkill]
           perform focus.assignstr["TradeSkill." & this.idstring]
     endif

     perform this.assign[TradeSkill.skDiplo]
     perform this.assign[TradeSkill.skFly]
     perform this.assign[TradeSkill.skKnowArca]
     perform this.assign[TradeSkill.skKnowPlan]]]></eval>
    <eval phase="Attr" priority="100003" index="2"><![CDATA[~ Get out if disabled
     doneif (tagis[Helper.SpcDisable] <> 0)
     ~ or a duplicate.
     doneif (tagis[Helper.FirstCopy] = 0)

     ~ Creatures do not gain a bonus to Intimidate checks against you for being larger than you.

     #situational[hero.childfound[skIntim], "Creatures larger than you gain no bonus to Intimidate you.", field[thingname].text]]]></eval>
    </thing>
  <thing id="sogTlSeaCultist" name="Sea Cultist" compset="SoGTalent" description="You gain Knowledge (dungeoneering), Knowledge (religion), Swim, and Use Magic Device as class skills. You can use the highest of your Charisma, Wisdom, or Intelligence modifiers for attempting either Knowledge (dungeoneering) or Knowledge (religion) checks, chosen when you select this talent." uniqueness="useronce">
    <fieldval field="usrCandid1" value="component.BaseSkill &amp; (Reference.skKnowDun | Reference.skKnowRel)"/>
    <usesource source="pPF1e_Sph_Guile"/>
    <tag group="SoGSphere" tag="Vocation"/>
    <tag group="SoGTlClass" tag="Talent"/>
    <tag group="SoGTalDesc" tag="Trade"/>
    <tag group="SoGTalDesc" tag="Utility"/>
    <tag group="ChooseSrc1" tag="Hero"/>
    <tag group="Helper" tag="SpecUp"/>
    <tag group="Hide" tag="Activation"/>
    <eval phase="First" priority="11000"><![CDATA[~ Get out if disabled
     doneif (tagis[Helper.SpcDisable] <> 0)
     ~ or a duplicate.
     doneif (tagis[Helper.FirstCopy] = 0)

     if (hero.childlives[skKnowDun] = 1) then
           perform hero.child[skKnowDun].setfocus
           perform focus.assign[Helper.ClassSkill]
           perform focus.assignstr["TradeSkill." & this.idstring]
     endif
     if (hero.childlives[skKnowRel] = 1) then
           perform hero.child[skKnowRel].setfocus
           perform focus.assign[Helper.ClassSkill]
           perform focus.assignstr["TradeSkill." & this.idstring]
     endif
     perform hero.child[skSwim].setfocus
     perform focus.assign[Helper.ClassSkill]
     perform focus.assignstr["TradeSkill." & this.idstring]
     perform hero.child[skUseMagic].setfocus
     perform focus.assign[Helper.ClassSkill]
     perform focus.assignstr["TradeSkill." & this.idstring]

     perform this.assign[TradeSkill.skKnowDun]
     perform this.assign[TradeSkill.skKnowRel]
     perform this.assign[TradeSkill.skSwim]
     perform this.assign[TradeSkill.skUseMagic]]]></eval>
    <eval phase="Attr" priority="100003" index="2"><![CDATA[~ Get out if disabled
     doneif (tagis[Helper.SpcDisable] <> 0)
     ~ or a duplicate.
     doneif (tagis[Helper.FirstCopy] = 0)

     doneif (field[usrChosen1].ischosen = 0)

     ~ You can use the highest of your Charisma, Wisdom, or Intelligence modifiers for attempting either Knowledge (dungeoneering) or Knowledge (religion) checks, chosen when you select this talent.

     perform field[usrChosen1].chosen.assign[SkillOver.aINT]
     perform field[usrChosen1].chosen.assign[SkillOver.aWIS]
     perform field[usrChosen1].chosen.assign[SkillOver.aCHA]]]></eval>
    </thing>
  <thing id="sogTlGreenskeeper" name="Greenskeeper" compset="SoGTalent" description="You gain Heal, Knowledge (nature), Knowledge (geography), and Survival as class skills. You can use your Wisdom modifier in place of your Intelligence modifier when attempting Knowledge (nature) or Knowledge (geography) checks, chosen when you take this talent." uniqueness="useronce">
    <fieldval field="usrCandid1" value="component.BaseSkill &amp; (Reference.skKnowNat | Reference.skKnowGeog)"/>
    <usesource source="pPF1e_Sph_Guile"/>
    <tag group="SoGSphere" tag="Vocation"/>
    <tag group="SoGTlClass" tag="Talent"/>
    <tag group="SoGTalDesc" tag="Trade"/>
    <tag group="SoGTalDesc" tag="Utility"/>
    <tag group="ChooseSrc1" tag="Hero"/>
    <tag group="Helper" tag="SpecUp"/>
    <eval phase="First" priority="11000"><![CDATA[~ Get out if disabled
     doneif (tagis[Helper.SpcDisable] <> 0)
     ~ or a duplicate.
     doneif (tagis[Helper.FirstCopy] = 0)

     perform hero.child[skHeal].setfocus
     perform focus.assign[Helper.ClassSkill]
     perform focus.assignstr["TradeSkill." & this.idstring]
     if (hero.childlives[skKnowNat] = 1) then
       perform hero.child[skKnowNat].setfocus
       perform focus.assign[Helper.ClassSkill]
       perform focus.assignstr["TradeSkill." & this.idstring]
     endif
     if (hero.childlives[skKnowGeog] = 1) then
       perform hero.child[skKnowGeog].setfocus
       perform focus.assign[Helper.ClassSkill]
       perform focus.assignstr["TradeSkill." & this.idstring]
     endif
     perform hero.child[skSurvival].setfocus
     perform focus.assign[Helper.ClassSkill]
     perform focus.assignstr["TradeSkill." & this.idstring]

     perform this.assign[TradeSkill.skHeal]
     perform this.assign[TradeSkill.skKnowNat]
     perform this.assign[TradeSkill.skKnowGeog]
     perform this.assign[TradeSkill.skSurvival]]]></eval>
    <eval phase="Attr" priority="100003" index="2"><![CDATA[~ Get out if disabled
     doneif (tagis[Helper.SpcDisable] <> 0)
     ~ or a duplicate.
     doneif (tagis[Helper.FirstCopy] = 0)

     doneif (field[usrChosen1].ischosen = 0)

     ~ You can use your Wisdom modifier in place of your Intelligence modifier when attempting Knowledge (nature) or Knowledge (geography) checks, chosen when you take this talent.
     perform field[usrChosen1].chosen.assign[SkillOver.aINT]
     perform field[usrChosen1].chosen.assign[SkillOver.aWIS]]]></eval>
    </thing>
  <thing id="sogTlRescuer" name="Rescuer" compset="SoGTalent" description="You gain Climb, Escape Artist, Heal, and Swim as class skills. You may take 10 on Heal checks attempted to perform first aid or treat poison." uniqueness="useronce">
    <usesource source="pPF1e_Sph_Guile" parent="pPF1e_Sph" name="Spheres of Guile"/>
    <tag group="SoGSphere" tag="Vocation" name="Vocation" abbrev="Vocation"/>
    <tag group="SoGTlClass" tag="Talent" name="Basic Talent" abbrev="Basic Talent"/>
    <tag group="SoGTalDesc" tag="Trade" name="Trade" abbrev="Trade"/>
    <tag group="SoGTalDesc" tag="Utility" name="Utility" abbrev="Utility"/>
    <eval phase="First" priority="11000"><![CDATA[~ Get out if disabled
     doneif (tagis[Helper.SpcDisable] <> 0)
     ~ or a duplicate.
     doneif (tagis[Helper.FirstCopy] = 0)

     ~ You gain Climb, Escape Artist, Heal, and Swim as class skills.
     perform hero.child[skClimb].setfocus
     perform focus.assign[Helper.ClassSkill]
     perform focus.assignstr["TradeSkill." & this.idstring]
     perform hero.child[skEscape].setfocus
     perform focus.assign[Helper.ClassSkill]
     perform focus.assignstr["TradeSkill." & this.idstring]
     perform hero.child[skHeal].setfocus
     perform focus.assign[Helper.ClassSkill]
     perform focus.assignstr["TradeSkill." & this.idstring]
     perform hero.child[skSwim].setfocus
     perform focus.assign[Helper.ClassSkill]
     perform focus.assignstr["TradeSkill." & this.idstring]

     perform this.assign[TradeSkill.skClimb]
     perform this.assign[TradeSkill.skEscape]
     perform this.assign[TradeSkill.skHeal]
     perform this.assign[TradeSkill.skSwim]]]></eval>
    <eval phase="Final" priority="15100" index="2"><![CDATA[~ Get out if disabled
     doneif (tagis[Helper.SpcDisable] <> 0)
     ~ or a duplicate.
     doneif (tagis[Helper.FirstCopy] = 0)

     ~ You may take 10 on Heal checks attempted to perform first aid or treat poison.
     #situational[hero.childfound[skHeal], "Take 10 on Heal to perform first aid or treat poison", field[thingname].text]]]></eval>
    </thing>
  <thing id="sogTlCourtier" name="Courtier" compset="SoGTalent" description="You gain Bluff, Diplomacy, Knowledge (nobility), and Sense Motive as class skills. You gain a +5 insight bonus to Bluff checks made to resist sensing your goals or emotions and to the DC to get a hunch about you." uniqueness="useronce">
    <usesource source="pPF1e_Sph_Guile" parent="pPF1e_Sph" name="Spheres of Guile"/>
    <tag group="SoGSphere" tag="Vocation" name="Vocation" abbrev="Vocation"/>
    <tag group="SoGTlClass" tag="Talent" name="Basic Talent" abbrev="Basic Talent"/>
    <tag group="SoGTalDesc" tag="Trade" name="Trade" abbrev="Trade"/>
    <tag group="SoGTalDesc" tag="Utility" name="Utility" abbrev="Utility"/>
    <eval phase="First" priority="11000"><![CDATA[~ Get out if disabled
     doneif (tagis[Helper.SpcDisable] <> 0)
     ~ or a duplicate.
     doneif (tagis[Helper.FirstCopy] = 0)

     ~ You gain Bluff, Diplomacy, Knowledge (nobility), and Sense Motive as class skills.
     perform hero.child[skBluff].setfocus
     perform focus.assign[Helper.ClassSkill]
     perform focus.assignstr["TradeSkill." & this.idstring]
     perform hero.child[skDiplo].setfocus
     perform focus.assign[Helper.ClassSkill]
     perform focus.assignstr["TradeSkill." & this.idstring]
     if (hero.childlives[skKnowNobl] = 1) then
           perform hero.child[skKnowNobl].setfocus
           perform focus.assign[Helper.ClassSkill]
           perform focus.assignstr["TradeSkill." & this.idstring]
     endif
     perform hero.child[skSenseMot].setfocus
     perform focus.assign[Helper.ClassSkill]
     perform focus.assignstr["TradeSkill." & this.idstring]

     perform this.assign[TradeSkill.skBluff]
     perform this.assign[TradeSkill.skDiplo]
     perform this.assign[TradeSkill.skKnowNobl]
     perform this.assign[TradeSkill.skSenseMot]]]></eval>
    <eval phase="Final" priority="15100" index="2"><![CDATA[~ Get out if disabled
     doneif (tagis[Helper.SpcDisable] <> 0)
     ~ or a duplicate.
     doneif (tagis[Helper.FirstCopy] = 0)

     ~ You gain a +5 insight bonus to Bluff checks made to resist sensing your goals or emotions and to the DC to get a hunch about you.

     #situational[hero.childfound[skBluff], "+5 insight vs someone sensing your goals, emotions, hunch.", field[thingname].text]]]></eval>
    </thing>
  <thing id="sogTlApothecary" name="Apothecary" compset="SoGTalent" description="You gain Heal, Knowledge (arcana), Knowledge (nature), and Use Magic Device as class skills. Additionally, whenever you attempt to create an alchemical remedy, you may pay twice the normal crafting cost to create three instances of that remedy." uniqueness="useronce">
    <usesource source="pPF1e_Sph_Guile" parent="pPF1e_Sph" name="Spheres of Guile"/>
    <tag group="SoGSphere" tag="Vocation" name="Vocation" abbrev="Vocation"/>
    <tag group="SoGTlClass" tag="Talent" name="Basic Talent" abbrev="Basic Talent"/>
    <tag group="SoGTalDesc" tag="Trade" name="Trade" abbrev="Trade"/>
    <tag group="SoGTalDesc" tag="Utility" name="Utility" abbrev="Utility"/>
    <eval phase="First" priority="11000"><![CDATA[~ Get out if disabled
     doneif (tagis[Helper.SpcDisable] <> 0)
     ~ or a duplicate.
     doneif (tagis[Helper.FirstCopy] = 0)

     ~ You gain Heal, Knowledge (arcana), Knowledge (nature), and Use Magic Device as class skills.
     perform hero.child[skHeal].setfocus
     perform focus.assign[Helper.ClassSkill]
     perform focus.assignstr["TradeSkill." & this.idstring]
     if (hero.childlives[skKnowArca] = 1) then
           perform hero.child[skKnowArca].setfocus
           perform focus.assign[Helper.ClassSkill]
           perform focus.assignstr["TradeSkill." & this.idstring]
     endif
     if (hero.childlives[skKnowNat] = 1) then
           perform hero.child[skKnowNat].setfocus
           perform focus.assign[Helper.ClassSkill]
           perform focus.assignstr["TradeSkill." & this.idstring]
     endif
     perform hero.child[skUseMagic].setfocus
     perform focus.assign[Helper.ClassSkill]
     perform focus.assignstr["TradeSkill." & this.idstring]

     perform this.assign[TradeSkill.skHeal]
     perform this.assign[TradeSkill.skKnowArca]
     perform this.assign[TradeSkill.skKnowNat]
     perform this.assign[TradeSkill.skUseMagic]]]></eval>
    <eval phase="Final" priority="15100" index="2"><![CDATA[~ Get out if disabled
     doneif (tagis[Helper.SpcDisable] <> 0)
     ~ or a duplicate.
     doneif (tagis[Helper.FirstCopy] = 0)

     ~ Additionally, whenever you attempt to create an alchemical remedy, you may pay twice the normal crafting cost to create three instances of that remedy.

     #situational[hero.childfound[skCrafAlch], "Craft 3 alchemical remedy for cost of 2.", field[thingname].text]]]></eval>
    </thing>
  <thing id="sogTlCutpurse" name="Cutpurse" compset="SoGTalent" description="You gain Acrobatics, Escape Artist, Sleight of Hand, and Stealth as class skills. If you have at least one ally within reach of your opponent, you gain a +2 circumstance bonus on Sleight of Hand checks against them." uniqueness="useronce">
    <usesource source="pPF1e_Sph_Guile" parent="pPF1e_Sph" name="Spheres of Guile"/>
    <tag group="SoGSphere" tag="Vocation" name="Vocation" abbrev="Vocation"/>
    <tag group="SoGTlClass" tag="Talent" name="Basic Talent" abbrev="Basic Talent"/>
    <tag group="SoGTalDesc" tag="Trade" name="Trade" abbrev="Trade"/>
    <tag group="SoGTalDesc" tag="Utility" name="Utility" abbrev="Utility"/>
    <eval phase="First" priority="11000"><![CDATA[~ Get out if disabled
     doneif (tagis[Helper.SpcDisable] <> 0)
     ~ or a duplicate.
     doneif (tagis[Helper.FirstCopy] = 0)

     ~ You gain Acrobatics, Escape Artist, Sleight of Hand, and Stealth as class skills.
     perform hero.child[skAcrobat].setfocus
     perform focus.assign[Helper.ClassSkill]
     perform focus.assignstr["TradeSkill." & this.idstring]
     perform hero.child[skEscape].setfocus
     perform focus.assign[Helper.ClassSkill]
     perform focus.assignstr["TradeSkill." & this.idstring]
     perform hero.child[skSleight].setfocus
     perform focus.assign[Helper.ClassSkill]
     perform focus.assignstr["TradeSkill." & this.idstring]
     perform hero.child[skStealth].setfocus
     perform focus.assign[Helper.ClassSkill]
     perform focus.assignstr["TradeSkill." & this.idstring]

     perform this.assign[TradeSkill.skAcrobat]
     perform this.assign[TradeSkill.skEscape]
     perform this.assign[TradeSkill.skSleight]
     perform this.assign[TradeSkill.skStealth]]]></eval>
    <eval phase="Final" priority="15100" index="2"><![CDATA[~ Get out if disabled
     doneif (tagis[Helper.SpcDisable] <> 0)
     ~ or a duplicate.
     doneif (tagis[Helper.FirstCopy] = 0)

     ~ If you have at least one ally within reach of your opponent, you gain a +2 circumstance bonus on Sleight of Hand checks against them.

     #applybonus[ModCirc,hero.child[skSleight],2]]]></eval>
    </thing>
  <thing id="sogTlFarmer" name="Farmer" compset="SoGTalent" description="You gain Appraise, Handle Animal, Knowledge (nature), and Ride as class skills. You receive a +1 competence bonus when taking 10 or 20 on skill checks." uniqueness="useronce">
    <usesource source="pPF1e_Sph_Guile" parent="pPF1e_Sph" name="Spheres of Guile"/>
    <tag group="SoGSphere" tag="Vocation" name="Vocation" abbrev="Vocation"/>
    <tag group="SoGTlClass" tag="Talent" name="Basic Talent" abbrev="Basic Talent"/>
    <tag group="SoGTalDesc" tag="Trade" name="Trade" abbrev="Trade"/>
    <tag group="SoGTalDesc" tag="Utility" name="Utility" abbrev="Utility"/>
    <eval phase="First" priority="11000"><![CDATA[~ Get out if disabled
     doneif (tagis[Helper.SpcDisable] <> 0)
     ~ or a duplicate.
     doneif (tagis[Helper.FirstCopy] = 0)

     ~ You gain Appraise, Handle Animal, Knowledge (nature), and Ride as class skills.

     perform hero.child[skAppraise].setfocus
     perform focus.assign[Helper.ClassSkill]
     perform focus.assignstr["TradeSkill." & this.idstring]
     perform hero.child[skHandleAn].setfocus
     perform focus.assign[Helper.ClassSkill]
     perform focus.assignstr["TradeSkill." & this.idstring]
     if (hero.childlives[skKnowNat] = 1) then
           perform hero.child[skKnowNat].setfocus
           perform focus.assign[Helper.ClassSkill]
           perform focus.assignstr["TradeSkill." & this.idstring]
     endif
     perform hero.child[skRide].setfocus
     perform focus.assign[Helper.ClassSkill]
     perform focus.assignstr["TradeSkill." & this.idstring]

     perform this.assign[TradeSkill.skAppraise]
     perform this.assign[TradeSkill.skHandleAn]
     perform this.assign[TradeSkill.skKnowNat]
     perform this.assign[TradeSkill.skRide]]]></eval>
    </thing>
  <thing id="sogTlSmuggler" name="Smuggler" compset="SoGTalent" description="You gain Bluff, Disguise, Sleight of Hand, and Stealth as class skills. Any small object you attempt to hide on your body is treated as an extraordinarily small object for the purpose of Sleight of Hand checks." uniqueness="useronce">
    <usesource source="pPF1e_Sph_Guile" parent="pPF1e_Sph" name="Spheres of Guile"/>
    <tag group="SoGSphere" tag="Vocation" name="Vocation" abbrev="Vocation"/>
    <tag group="SoGTlClass" tag="Talent" name="Basic Talent" abbrev="Basic Talent"/>
    <tag group="SoGTalDesc" tag="Trade" name="Trade" abbrev="Trade"/>
    <tag group="SoGTalDesc" tag="Utility" name="Utility" abbrev="Utility"/>
    <eval phase="First" priority="11000"><![CDATA[~ Get out if disabled
     doneif (tagis[Helper.SpcDisable] <> 0)
     ~ or a duplicate.
     doneif (tagis[Helper.FirstCopy] = 0)

     ~ You gain Bluff, Disguise, Sleight of Hand, and Stealth as class skills.
     perform hero.child[skBluff].setfocus
     perform focus.assign[Helper.ClassSkill]
     perform focus.assignstr["TradeSkill." & this.idstring]
     perform hero.child[skDisguise].setfocus
     perform focus.assign[Helper.ClassSkill]
     perform focus.assignstr["TradeSkill." & this.idstring]
     perform hero.child[skSleight].setfocus
     perform focus.assign[Helper.ClassSkill]
     perform focus.assignstr["TradeSkill." & this.idstring]
     perform hero.child[skStealth].setfocus
     perform focus.assign[Helper.ClassSkill]
     perform focus.assignstr["TradeSkill." & this.idstring]

     perform this.assign[TradeSkill.skBluff]
     perform this.assign[TradeSkill.skDisguise]
     perform this.assign[TradeSkill.skSleight]
     perform this.assign[TradeSkill.skStealth]]]></eval>
    <eval phase="Final" priority="15100" index="2"><![CDATA[~ Get out if disabled
     doneif (tagis[Helper.SpcDisable] <> 0)
     ~ or a duplicate.
     doneif (tagis[Helper.FirstCopy] = 0)

     ~ Any small object you attempt to hide on your body is treated as an extraordinarily small object for the purpose of Sleight of Hand checks.

     #situational[hero.childfound[skSleight], "Small objects are treated as extraordinarily small", field[thingname].text]]]></eval>
    </thing>
  <thing id="sogTlVoSpy" name="Spy" compset="SoGTalent" description="You gain Disguise, Escape Artist, Sense Motive, and Stealth as class skills. When someone uses an ability that would detect alignment on you, your effective Hit Dice are 4 lower than your actual total when someone discerns the strength of your aura." uniqueness="useronce">
    <usesource source="pPF1e_Sph_Guile" parent="pPF1e_Sph" name="Spheres of Guile"/>
    <tag group="SoGSphere" tag="Vocation" name="Vocation" abbrev="Vocation"/>
    <tag group="SoGTlClass" tag="Talent" name="Basic Talent" abbrev="Basic Talent"/>
    <tag group="SoGTalDesc" tag="Trade" name="Trade" abbrev="Trade"/>
    <tag group="SoGTalDesc" tag="Utility" name="Utility" abbrev="Utility"/>
    <eval phase="First" priority="11000"><![CDATA[~ Get out if disabled
     doneif (tagis[Helper.SpcDisable] <> 0)
     ~ or a duplicate.
     doneif (tagis[Helper.FirstCopy] = 0)

     ~ You gain Disguise, Escape Artist, Sense Motive, and Stealth as class skills.

     perform hero.child[skDisguise].setfocus
     perform focus.assign[Helper.ClassSkill]
     perform focus.assignstr["TradeSkill." & this.idstring]
     perform hero.child[skEscape].setfocus
     perform focus.assign[Helper.ClassSkill]
     perform focus.assignstr["TradeSkill." & this.idstring]
     perform hero.child[skSenseMot].setfocus
     perform focus.assign[Helper.ClassSkill]
     perform focus.assignstr["TradeSkill." & this.idstring]
     perform hero.child[skStealth].setfocus
     perform focus.assign[Helper.ClassSkill]
     perform focus.assignstr["TradeSkill." & this.idstring]

     perform this.assign[TradeSkill.skDisguise]
     perform this.assign[TradeSkill.skEscape]
     perform this.assign[TradeSkill.skSenseMot]
     perform this.assign[TradeSkill.skStealth]]]></eval>
    </thing>
  <thing id="sogTlHistorian" name="Historian" compset="SoGTalent" description="You gain Knowledge (arcana), Knowledge (history), Knowledge (religion), and Linguistics as class skills. By spending 1 use of skill leverage, you may use a Knowledge (history) check in place of any other Knowledge check. When you do this, you take a -5 penalty on the roll." uniqueness="useronce">
    <usesource source="pPF1e_Sph_Guile" parent="pPF1e_Sph" name="Spheres of Guile"/>
    <tag group="SoGSphere" tag="Vocation" name="Vocation" abbrev="Vocation"/>
    <tag group="SoGTlClass" tag="Talent" name="Basic Talent" abbrev="Basic Talent"/>
    <tag group="SoGTalDesc" tag="Trade" name="Trade" abbrev="Trade"/>
    <tag group="SoGTalDesc" tag="Utility" name="Utility" abbrev="Utility"/>
    <eval phase="First" priority="11000"><![CDATA[~ Get out if disabled
     doneif (tagis[Helper.SpcDisable] <> 0)
     ~ or a duplicate.
     doneif (tagis[Helper.FirstCopy] = 0)

     ~ You gain Knowledge (arcana), Knowledge (history), Knowledge (religion), and Linguistics as class skills.

     if (hero.childlives[skKnowArca] = 1) then
           perform hero.child[skKnowArca].setfocus
           perform focus.assign[Helper.ClassSkill]
           perform focus.assignstr["TradeSkill." & this.idstring]
     endif
     if (hero.childlives[skKnowHist] = 1) then
           perform hero.child[skKnowHist].setfocus
           perform focus.assign[Helper.ClassSkill]
           perform focus.assignstr["TradeSkill." & this.idstring]
     endif
     if (hero.childlives[skKnowRel] = 1) then
           perform hero.child[skKnowRel].setfocus
           perform focus.assign[Helper.ClassSkill]
           perform focus.assignstr["TradeSkill." & this.idstring]
     endif
     perform hero.child[skLinguist].setfocus
     perform focus.assign[Helper.ClassSkill]
     perform focus.assignstr["TradeSkill." & this.idstring]

     perform this.assign[TradeSkill.skKnowArca]
     perform this.assign[TradeSkill.skKnowHist]
     perform this.assign[TradeSkill.skKnowRel]
     perform this.assign[TradeSkill.skLinguist]]]></eval>
    <eval phase="Final" priority="15100" index="2"><![CDATA[~ Get out if disabled
     doneif (tagis[Helper.SpcDisable] <> 0)
     ~ or a duplicate.
     doneif (tagis[Helper.FirstCopy] = 0)

     ~ By spending 1 use of skill leverage, you may use a Knowledge (history) check in place of any other Knowledge check. When you do this, you take a -5 penalty on the roll.

     #situational[hero.childfound[skKnowHist], "-5 and 1 use of skill leverage to make any Knowledge check.", field[thingname].text]]]></eval>
    </thing>
  <thing id="sogTlAnthropologi" name="Anthropologist" compset="SoGTalent" description="You gain Knowledge (geography), Knowledge (history), Knowledge (local), Knowledge (nobility), and Knowledge (religion) as class skills. When you appeal to precedent, reduce any DC modifiers for relevance to motivation by 5 (to a minimum of -15). You must decide to use this ability after the first roll is made but before the results are revealed." uniqueness="useronce">
    <usesource source="pPF1e_Sph_Guile" parent="pPF1e_Sph" name="Spheres of Guile"/>
    <tag group="SoGSphere" tag="Vocation" name="Vocation" abbrev="Vocation"/>
    <tag group="SoGTlClass" tag="Talent" name="Basic Talent" abbrev="Basic Talent"/>
    <tag group="SoGTalDesc" tag="Trade" name="Trade" abbrev="Trade"/>
    <tag group="SoGTalDesc" tag="Utility" name="Utility" abbrev="Utility"/>
    <eval phase="First" priority="11000"><![CDATA[~ Get out if disabled
     doneif (tagis[Helper.SpcDisable] <> 0)
     ~ or a duplicate.
     doneif (tagis[Helper.FirstCopy] = 0)

     ~ You gain Knowledge (geography), Knowledge (history), Knowledge (local), Knowledge (nobility), and Knowledge (religion) as class skills.

     if (hero.childlives[skKnowGeog] = 1) then
           perform hero.child[skKnowGeog].setfocus
           perform focus.assign[Helper.ClassSkill]
           perform focus.assignstr["TradeSkill." & this.idstring]
     endif
     if (hero.childlives[skKnowHist] = 1) then
           perform hero.child[skKnowHist].setfocus
           perform focus.assign[Helper.ClassSkill]
           perform focus.assignstr["TradeSkill." & this.idstring]
     endif
     if (hero.childlives[skKnowLoc] = 1) then
           perform hero.child[skKnowLoc].setfocus
           perform focus.assign[Helper.ClassSkill]
           perform focus.assignstr["TradeSkill." & this.idstring]
     endif
     if (hero.childlives[skKnowNobl] = 1) then
           perform hero.child[skKnowNobl].setfocus
           perform focus.assign[Helper.ClassSkill]
           perform focus.assignstr["TradeSkill." & this.idstring]
     endif
     if (hero.childlives[skKnowRel] = 1) then
           perform hero.child[skKnowRel].setfocus
           perform focus.assign[Helper.ClassSkill]
           perform focus.assignstr["TradeSkill." & this.idstring]
     endif

     perform this.assign[TradeSkill.skKnowGeog]
     perform this.assign[TradeSkill.skKnowHist]
     perform this.assign[TradeSkill.skKnowLoc]
     perform this.assign[TradeSkill.skKnowNobl]
     perform this.assign[TradeSkill.skKnowRel]]]></eval>
    <eval phase="Final" priority="15100" index="2"><![CDATA[~ Get out if disabled
     doneif (tagis[Helper.SpcDisable] <> 0)
     ~ or a duplicate.
     doneif (tagis[Helper.FirstCopy] = 0)

     ~ When you appeal to precedent, reduce any DC modifiers for relevance to motivation by 5 (to a minimum of -15). You must decide to use this ability after the first roll is made but before the results are revealed.

     ~ Appeal to Precedent (arcana, dungeoneering, history, local, nature, nobility, planes, religion, and relevant Lore skills only).
     ~ Profession (Barrister)

     #situational[hero.childfound[skKnowArca], "reduce DC mods for relevance to motivation by 5 (min -15). You must decide to use this ability after the first roll is made but before the results are revealed.", field[thingname].text]
     #situational[hero.childfound[skKnowDun], "reduce DC mods for relevance to motivation by 5 (min -15). You must decide to use this ability after the first roll is made but before the results are revealed.", field[thingname].text]
     #situational[hero.childfound[skKnowHist], "reduce DC mods for relevance to motivation by 5 (min -15). You must decide to use this ability after the first roll is made but before the results are revealed.", field[thingname].text]
     #situational[hero.childfound[skKnowLoc], "reduce DC mods for relevance to motivation by 5 (min -15). You must decide to use this ability after the first roll is made but before the results are revealed.", field[thingname].text]
     #situational[hero.childfound[skKnowNat], "reduce DC mods for relevance to motivation by 5 (min -15). You must decide to use this ability after the first roll is made but before the results are revealed.", field[thingname].text]
     #situational[hero.childfound[skKnowNobl], "reduce DC mods for relevance to motivation by 5 (min -15). You must decide to use this ability after the first roll is made but before the results are revealed.", field[thingname].text]
     #situational[hero.childfound[skKnowPlan], "reduce DC mods for relevance to motivation by 5 (min -15). You must decide to use this ability after the first roll is made but before the results are revealed.", field[thingname].text]
     #situational[hero.childfound[skKnowRel], "reduce DC mods for relevance to motivation by 5 (min -15). You must decide to use this ability after the first roll is made but before the results are revealed.", field[thingname].text]
     #situational[hero.childfound[skProfBarr], "reduce DC mods for relevance to motivation by 5 (min -15). You must decide to use this ability after the first roll is made but before the results are revealed.", field[thingname].text]]]></eval>
    </thing>
  <thing id="sogTlAberrationHu" name="Aberration Hunter" compset="SoGTalent" description="You gain Heal, Knowledge (dungeoneering), Spellcraft, and Stealth as class skills. You gain lowlight vision. If you already possess low-light vision, you can see things three times as far away rather than twice as far away." uniqueness="useronce">
    <usesource source="pPF1e_Sph_Guile" parent="pPF1e_Sph" name="Spheres of Guile"/>
    <tag group="SoGSphere" tag="Vocation" name="Vocation" abbrev="Vocation"/>
    <tag group="SoGTlClass" tag="Talent" name="Basic Talent" abbrev="Basic Talent"/>
    <tag group="SoGTalDesc" tag="Trade" name="Trade" abbrev="Trade"/>
    <tag group="SoGTalDesc" tag="Utility" name="Utility" abbrev="Utility"/>
    <tag group="Helper" tag="SpecUp"/>
    <bootstrap thing="raLowLight"></bootstrap>
    <eval phase="First" priority="11000"><![CDATA[~ Get out if disabled
     doneif (tagis[Helper.SpcDisable] <> 0)
     ~ or a duplicate.
     doneif (tagis[Helper.FirstCopy] = 0)

     ~ You gain Heal, Knowledge (dungeoneering), Spellcraft, and Stealth as class skills. You gain lowlight vision.

     perform hero.child[skHeal].setfocus
     perform focus.assign[Helper.ClassSkill]
     perform focus.assignstr["TradeSkill." & this.idstring]
     if (hero.childlives[skKnowDun] = 1) then
           perform hero.child[skKnowDun].setfocus
           perform focus.assign[Helper.ClassSkill]
           perform focus.assignstr["TradeSkill." & this.idstring]
     endif
     perform hero.child[skSpellcr].setfocus
     perform focus.assign[Helper.ClassSkill]
     perform focus.assignstr["TradeSkill." & this.idstring]
     perform hero.child[skStealth].setfocus
     perform focus.assign[Helper.ClassSkill]
     perform focus.assignstr["TradeSkill." & this.idstring]

     perform this.assign[TradeSkill.skHeal]
     perform this.assign[TradeSkill.skKnowDun]
     perform this.assign[TradeSkill.skSpellcr]
     perform this.assign[TradeSkill.skStealth]]]></eval>
    <eval phase="PostLevel" priority="10000" index="2"><![CDATA[~ Get out if disabled
     doneif (tagis[Helper.SpcDisable] <> 0)
     ~ or a duplicate.
     doneif (tagis[Helper.FirstCopy] = 0)

     ~ If we're not shown, just get out now
     doneif (tagis[Helper.ShowSpec] = 0)

     ~ If you already possess low-light vision, you can see things three times as far away rather than twice as far away.

      ~If we're already getting low-light vision from another source, then
      ~ it's enhanced
      var i as number
      foreach root in hero.child[raLowLight]

        ~We skip types, since they're all bootstrapped to every hero
        if (eachpick.tagis[component.Type] = 0) then
          i += 1
          endif
        nexteach

      if (i >=2) then
        perform delete[Helper.SpecUp]
        field[abSumm].text = "See three times as far as humans in areas of dim light."
        endif]]></eval>
    </thing>
  <thing id="sogTlArtificer" name="Artificer" compset="SoGTalent" description="You gain Appraise, Knowledge (arcana), Knowledge (engineering), and Spellcraft as class skills. When rolling for the perks, quirks, or flaws of a magic item you create, you may roll twice on the table and take the result of your choice." uniqueness="useronce">
    <usesource source="pPF1e_Sph_Guile" parent="pPF1e_Sph" name="Spheres of Guile"/>
    <tag group="SoGSphere" tag="Vocation" name="Vocation" abbrev="Vocation"/>
    <tag group="SoGTlClass" tag="Talent" name="Basic Talent" abbrev="Basic Talent"/>
    <tag group="SoGTalDesc" tag="Trade" name="Trade" abbrev="Trade"/>
    <tag group="SoGTalDesc" tag="Utility" name="Utility" abbrev="Utility"/>
    <eval phase="First" priority="11000"><![CDATA[~ Get out if disabled
     doneif (tagis[Helper.SpcDisable] <> 0)
     ~ or a duplicate.
     doneif (tagis[Helper.FirstCopy] = 0)

     ~ You gain Appraise, Knowledge (arcana), Knowledge (engineering), and Spellcraft as class skills.

     perform hero.child[skAppraise].setfocus
     perform focus.assign[Helper.ClassSkill]
     perform focus.assignstr["TradeSkill." & this.idstring]
     if (hero.childlives[skKnowArca] = 1) then
           perform hero.child[skKnowArca].setfocus
           perform focus.assign[Helper.ClassSkill]
           perform focus.assignstr["TradeSkill." & this.idstring]
     endif
     if (hero.childlives[skKnowEng] = 1) then
           perform hero.child[skKnowEng].setfocus
           perform focus.assign[Helper.ClassSkill]
           perform focus.assignstr["TradeSkill." & this.idstring]
     endif
     perform hero.child[skSpellcr].setfocus
     perform focus.assign[Helper.ClassSkill]
     perform focus.assignstr["TradeSkill." & this.idstring]

     perform this.assign[TradeSkill.skAppraise]
     perform this.assign[TradeSkill.skKnowArca]
     perform this.assign[TradeSkill.skKnowEng]
     perform this.assign[TradeSkill.skSpellcr]]]></eval>
    </thing>
  <thing id="sogTlArtisan" name="Artisan" compset="SoGTalent" description="You gain Disable Device, Disguise, Knowledge (engineering), and Sleight of Hand as class skills. Additionally, whenever you attempt an Artistry or Craft check (or a similar check for crafting or creating a commissioned work), you may attempt a Knowledge (engineering) check against the same DC. If you succeed, you gain a +2 circumstance bonus to the Artistry or Craft check." uniqueness="useronce">
    <usesource source="pPF1e_Sph_Guile" parent="pPF1e_Sph" name="Spheres of Guile"/>
    <tag group="SoGSphere" tag="Vocation" name="Vocation" abbrev="Vocation"/>
    <tag group="SoGTlClass" tag="Talent" name="Basic Talent" abbrev="Basic Talent"/>
    <tag group="SoGTalDesc" tag="Trade" name="Trade" abbrev="Trade"/>
    <tag group="SoGTalDesc" tag="Utility" name="Utility" abbrev="Utility"/>
    <eval phase="First" priority="11000"><![CDATA[~ Get out if disabled
     doneif (tagis[Helper.SpcDisable] <> 0)
     ~ or a duplicate.
     doneif (tagis[Helper.FirstCopy] = 0)

     ~ You gain Disable Device, Disguise, Knowledge (engineering), and Sleight of Hand as class skills.

     perform hero.child[skDisable].setfocus
     perform focus.assign[Helper.ClassSkill]
     perform focus.assignstr["TradeSkill." & this.idstring]
     perform hero.child[skDisguise].setfocus
     perform focus.assign[Helper.ClassSkill]
     perform focus.assignstr["TradeSkill." & this.idstring]
     if (hero.childlives[skKnowEng] = 1) then
           perform hero.child[skKnowEng].setfocus
           perform focus.assign[Helper.ClassSkill]
           perform focus.assignstr["TradeSkill." & this.idstring]
     endif
     perform hero.child[skSleight].setfocus
     perform focus.assign[Helper.ClassSkill]
     perform focus.assignstr["TradeSkill." & this.idstring]

     perform this.assign[TradeSkill.skDisable]
     perform this.assign[TradeSkill.skDisguise]
     perform this.assign[TradeSkill.skKnowEng]
     perform this.assign[TradeSkill.skSleight]]]></eval>
    <eval phase="Final" priority="15100" index="2"><![CDATA[~ Get out if disabled
     doneif (tagis[Helper.SpcDisable] <> 0)
     ~ or a duplicate.
     doneif (tagis[Helper.FirstCopy] = 0)

     ~ Additionally, whenever you attempt an Artistry or Craft check (or a similar check for crafting or creating a commissioned work), you may attempt a Knowledge (engineering) check against the same DC. If you succeed, you gain a +2 circumstance bonus to the Artistry or Craft check.

     #situational[hero.childfound[skKnowEng], "+2 circumstance to Artistry/Craft to create if succeed at same DC with Knowledge Engineering.", field[thingname].text]]]></eval>
    </thing>
  <thing id="sogTlBuilder" name="Builder" compset="SoGTalent" description="You gain Climb, Disable Device, Escape Artist, and Knowledge (engineering) as class skills. Once per round, you may examine an item as a free action rather than a move action." uniqueness="useronce">
    <fieldval field="actName" value="Examine an item "/>
    <usesource source="pPF1e_Sph_Guile" parent="pPF1e_Sph" name="Spheres of Guile"/>
    <tag group="SoGSphere" tag="Vocation" name="Vocation" abbrev="Vocation"/>
    <tag group="SoGTlClass" tag="Talent" name="Basic Talent" abbrev="Basic Talent"/>
    <tag group="SoGTalDesc" tag="Trade" name="Trade" abbrev="Trade"/>
    <tag group="SoGTalDesc" tag="Utility" name="Utility" abbrev="Utility"/>
    <tag group="User" tag="Activation"/>
    <tag group="abAction" tag="Free"/>
    <eval phase="First" priority="11000"><![CDATA[~ Get out if disabled
     doneif (tagis[Helper.SpcDisable] <> 0)
     ~ or a duplicate.
     doneif (tagis[Helper.FirstCopy] = 0)

     ~ You gain Climb, Disable Device, Escape Artist, and Knowledge (engineering) as class skills.

     perform hero.child[skClimb].setfocus
     perform focus.assign[Helper.ClassSkill]
     perform focus.assignstr["TradeSkill." & this.idstring]
     perform hero.child[skDisable].setfocus
     perform focus.assign[Helper.ClassSkill]
     perform focus.assignstr["TradeSkill." & this.idstring]
     perform hero.child[skEscape].setfocus
     perform focus.assign[Helper.ClassSkill]
     perform focus.assignstr["TradeSkill." & this.idstring]
     if (hero.childlives[skKnowEng] = 1) then
           perform hero.child[skKnowEng].setfocus
           perform focus.assign[Helper.ClassSkill]
           perform focus.assignstr["TradeSkill." & this.idstring]
     endif


     perform this.assign[TradeSkill.skClimb]
     perform this.assign[TradeSkill.skDisable]
     perform this.assign[TradeSkill.skEscape]
     perform this.assign[TradeSkill.skKnowEng]]]></eval>
    </thing>
  <thing id="sogTlBurglar" name="Burglar" compset="SoGTalent" description="You gain Climb, Disable Device, Sleight of Hand, and Stealth as class skills. You require only one hand free to climb." uniqueness="useronce">
    <usesource source="pPF1e_Sph_Guile" parent="pPF1e_Sph" name="Spheres of Guile"/>
    <tag group="SoGSphere" tag="Vocation" name="Vocation" abbrev="Vocation"/>
    <tag group="SoGTlClass" tag="Talent" name="Basic Talent" abbrev="Basic Talent"/>
    <tag group="SoGTalDesc" tag="Trade" name="Trade" abbrev="Trade"/>
    <tag group="SoGTalDesc" tag="Utility" name="Utility" abbrev="Utility"/>
    <eval phase="First" priority="11000"><![CDATA[~ Get out if disabled
     doneif (tagis[Helper.SpcDisable] <> 0)
     ~ or a duplicate.
     doneif (tagis[Helper.FirstCopy] = 0)

     ~ You gain Climb, Disable Device, Sleight of Hand, and Stealth as class skills.

     perform hero.child[skClimb].setfocus
     perform focus.assign[Helper.ClassSkill]
     perform focus.assignstr["TradeSkill." & this.idstring]
     perform hero.child[skDisable].setfocus
     perform focus.assign[Helper.ClassSkill]
     perform focus.assignstr["TradeSkill." & this.idstring]
     perform hero.child[skSleight].setfocus
     perform focus.assign[Helper.ClassSkill]
     perform focus.assignstr["TradeSkill." & this.idstring]
     perform hero.child[skStealth].setfocus
     perform focus.assign[Helper.ClassSkill]
     perform focus.assignstr["TradeSkill." & this.idstring]

     perform this.assign[TradeSkill.skClimb]
     perform this.assign[TradeSkill.skDisable]
     perform this.assign[TradeSkill.skSleight]
     perform this.assign[TradeSkill.skStealth]]]></eval>
    <eval phase="Final" priority="15100" index="2"><![CDATA[~ Get out if disabled
     doneif (tagis[Helper.SpcDisable] <> 0)
     ~ or a duplicate.
     doneif (tagis[Helper.FirstCopy] = 0)

     ~ You require only one hand free to climb.

     #situational[hero.childfound[skClimb], "You need only one hand free.", field[thingname].text]]]></eval>
    </thing>
  <thing id="sogTlCommander" name="Commander" compset="SoGTalent" description="You gain Diplomacy, Knowledge (history), Knowledge (nobility), and Ride as class skills. You get a +1 competence bonus to your Leadership modifier for mass combat." uniqueness="useronce">
    <comment>TODO Leadership Score is likely wrong.</comment>
    <usesource source="pPF1e_Sph_Guile" parent="pPF1e_Sph" name="Spheres of Guile"/>
    <tag group="SoGSphere" tag="Vocation" name="Vocation" abbrev="Vocation"/>
    <tag group="SoGTlClass" tag="Talent" name="Basic Talent" abbrev="Basic Talent"/>
    <tag group="SoGTalDesc" tag="Trade" name="Trade" abbrev="Trade"/>
    <tag group="SoGTalDesc" tag="Utility" name="Utility" abbrev="Utility"/>
    <eval phase="First" priority="11000"><![CDATA[~ Get out if disabled
     doneif (tagis[Helper.SpcDisable] <> 0)
     ~ or a duplicate.
     doneif (tagis[Helper.FirstCopy] = 0)

     ~ You gain Diplomacy, Knowledge (history), Knowledge (nobility), and Ride as class skills.

     perform hero.child[skDiplo].setfocus
     perform focus.assign[Helper.ClassSkill]
     perform focus.assignstr["TradeSkill." & this.idstring]
     if (hero.childlives[skKnowHist] = 1) then
           perform hero.child[skKnowHist].setfocus
           perform focus.assign[Helper.ClassSkill]
           perform focus.assignstr["TradeSkill." & this.idstring]
     endif
     if (hero.childlives[skKnowNobl] = 1) then
           perform hero.child[skKnowNobl].setfocus
           perform focus.assign[Helper.ClassSkill]
           perform focus.assignstr["TradeSkill." & this.idstring]
     endif
     perform hero.child[skRide].setfocus
     perform focus.assign[Helper.ClassSkill]
     perform focus.assignstr["TradeSkill." & this.idstring]

     perform this.assign[TradeSkill.skDiplo]
     perform this.assign[TradeSkill.skKnowHist]
     perform this.assign[TradeSkill.skKnowNobl]
     perform this.assign[TradeSkill.skRide]]]></eval>
    <eval phase="Final" priority="15100" index="2"><![CDATA[~ Get out if disabled
     doneif (tagis[Helper.SpcDisable] <> 0)
     ~ or a duplicate.
     doneif (tagis[Helper.FirstCopy] = 0)

     ~ if we don't have leadership helper, get out
     doneif (hero.childlives[LeaderHelp] = 0)

     ~ You get a +1 competence bonus to your Leadership modifier for mass combat.

     ~ Look at: call LeaderScor
     #value[fLeader] += 1]]></eval>
    </thing>
  <thing id="sogTlCounterfeite" name="Counterfeiter" compset="SoGTalent" description="You gain Appraise, Bluff, Linguistics, and Sleight of Hand as class skills. You treat objects as one size smaller for the purpose of calculating how long it takes you to Disguise them." uniqueness="useronce">
    <usesource source="pPF1e_Sph_Guile" parent="pPF1e_Sph" name="Spheres of Guile"/>
    <tag group="SoGSphere" tag="Vocation" name="Vocation" abbrev="Vocation"/>
    <tag group="SoGTlClass" tag="Talent" name="Basic Talent" abbrev="Basic Talent"/>
    <tag group="SoGTalDesc" tag="Trade" name="Trade" abbrev="Trade"/>
    <tag group="SoGTalDesc" tag="Utility" name="Utility" abbrev="Utility"/>
    <eval phase="First" priority="11000"><![CDATA[~ Get out if disabled
     doneif (tagis[Helper.SpcDisable] <> 0)
     ~ or a duplicate.
     doneif (tagis[Helper.FirstCopy] = 0)

     ~ You gain Appraise, Bluff, Linguistics, and Sleight of Hand as class skills.

     perform hero.child[skAppraise].setfocus
     perform focus.assign[Helper.ClassSkill]
     perform focus.assignstr["TradeSkill." & this.idstring]
     perform hero.child[skBluff].setfocus
     perform focus.assign[Helper.ClassSkill]
     perform focus.assignstr["TradeSkill." & this.idstring]
     perform hero.child[skLinguist].setfocus
     perform focus.assign[Helper.ClassSkill]
     perform focus.assignstr["TradeSkill." & this.idstring]
     perform hero.child[skSleight].setfocus
     perform focus.assign[Helper.ClassSkill]
     perform focus.assignstr["TradeSkill." & this.idstring]

     perform this.assign[TradeSkill.skAppraise]
     perform this.assign[TradeSkill.skBluff]
     perform this.assign[TradeSkill.skLinguist]
     perform this.assign[TradeSkill.skSleight]]]></eval>
    <eval phase="Final" priority="15100" index="2"><![CDATA[~ Get out if disabled
     doneif (tagis[Helper.SpcDisable] <> 0)
     ~ or a duplicate.
     doneif (tagis[Helper.FirstCopy] = 0)

     ~ You treat objects as one size smaller for the purpose of calculating how long it takes you to Disguise them.

     #situational[hero.childfound[skDisguise], "objects are treated as one size smaller small for time", field[thingname].text]]]></eval>
    </thing>
  <thing id="sogTlDoctor" name="Doctor" compset="SoGTalent" description="You gain Heal, Knowledge (nature), Knowledge (religion), and Spellcraft as class skills. You may use the better of your Intelligence and Wisdom modifier for Heal checks." uniqueness="useronce">
    <usesource source="pPF1e_Sph_Guile" parent="pPF1e_Sph" name="Spheres of Guile"/>
    <tag group="SoGSphere" tag="Vocation" name="Vocation" abbrev="Vocation"/>
    <tag group="SoGTlClass" tag="Talent" name="Basic Talent" abbrev="Basic Talent"/>
    <tag group="SoGTalDesc" tag="Trade" name="Trade" abbrev="Trade"/>
    <tag group="SoGTalDesc" tag="Utility" name="Utility" abbrev="Utility"/>
    <tag group="Helper" tag="SpecUp" name="SpecUp" abbrev="SpecUp"/>
    <eval phase="First" priority="11000"><![CDATA[~ Get out if disabled
     doneif (tagis[Helper.SpcDisable] <> 0)
     ~ or a duplicate.
     doneif (tagis[Helper.FirstCopy] = 0)

     ~ You gain Heal, Knowledge (nature), Knowledge (religion), and Spellcraft as class skills.

     perform hero.child[skHeal].setfocus
     perform focus.assign[Helper.ClassSkill]
     perform focus.assignstr["TradeSkill." & this.idstring]
     if (hero.childlives[skKnowNat] = 1) then
           perform hero.child[skKnowNat].setfocus
           perform focus.assign[Helper.ClassSkill]
           perform focus.assignstr["TradeSkill." & this.idstring]
     endif
     if (hero.childlives[skKnowRel] = 1) then
           perform hero.child[skKnowRel].setfocus
           perform focus.assign[Helper.ClassSkill]
           perform focus.assignstr["TradeSkill." & this.idstring]
     endif
     perform hero.child[skSpellcr].setfocus
     perform focus.assign[Helper.ClassSkill]
     perform focus.assignstr["TradeSkill." & this.idstring]

     perform this.assign[TradeSkill.skHeal]
     perform this.assign[TradeSkill.skKnowNat]
     perform this.assign[TradeSkill.skKnowRel]
     perform this.assign[TradeSkill.skSpellcr]]]></eval>
    <eval phase="Attr" priority="100003" index="2"><![CDATA[~ Get out if disabled
     doneif (tagis[Helper.SpcDisable] <> 0)
     ~ or a duplicate.
     doneif (tagis[Helper.FirstCopy] = 0)

     ~ You may use the better of your Intelligence and Wisdom modifier for Heal checks.

     perform hero.child[skHeal].assign[SkillOpt.aINT]
     perform hero.child[skHeal].assign[SkillOpt.aWIS]]]></eval>
    </thing>
  <thing id="sogTlEngineer" name="Engineer" compset="SoGTalent" description="You gain Appraise, Disable Device, Knowledge (dungeoneering), and Knowledge (engineering) as class skills. You may use the better of your Dexterity or Intelligence modifier for Disable Device checks." uniqueness="useronce">
    <usesource source="pPF1e_Sph_Guile" parent="pPF1e_Sph" name="Spheres of Guile"/>
    <tag group="SoGSphere" tag="Vocation" name="Vocation" abbrev="Vocation"/>
    <tag group="SoGTlClass" tag="Talent" name="Basic Talent" abbrev="Basic Talent"/>
    <tag group="SoGTalDesc" tag="Trade" name="Trade" abbrev="Trade"/>
    <tag group="SoGTalDesc" tag="Utility" name="Utility" abbrev="Utility"/>
    <tag group="Helper" tag="SpecUp" name="SpecUp" abbrev="SpecUp"/>
    <eval phase="First" priority="11000"><![CDATA[~ Get out if disabled
     doneif (tagis[Helper.SpcDisable] <> 0)
     ~ or a duplicate.
     doneif (tagis[Helper.FirstCopy] = 0)

     ~ You gain Appraise, Disable Device, Knowledge (dungeoneering), and Knowledge (engineering) as class skills.

     perform hero.child[skAppraise].setfocus
     perform focus.assign[Helper.ClassSkill]
     perform focus.assignstr["TradeSkill." & this.idstring]
     perform hero.child[skDisable].setfocus
     perform focus.assign[Helper.ClassSkill]
     perform focus.assignstr["TradeSkill." & this.idstring]
     if (hero.childlives[skKnowDun] = 1) then
           perform hero.child[skKnowDun].setfocus
           perform focus.assign[Helper.ClassSkill]
           perform focus.assignstr["TradeSkill." & this.idstring]
     endif
     if (hero.childlives[skKnowEng] = 1) then
           perform hero.child[skKnowEng].setfocus
           perform focus.assign[Helper.ClassSkill]
           perform focus.assignstr["TradeSkill." & this.idstring]
     endif

     perform this.assign[TradeSkill.skAppraise]
     perform this.assign[TradeSkill.skDisable]
     perform this.assign[TradeSkill.skKnowDun]
     perform this.assign[TradeSkill.skKnowEng]]]></eval>
    <eval phase="Attr" priority="100003" index="2"><![CDATA[~ Get out if disabled
     doneif (tagis[Helper.SpcDisable] <> 0)
     ~ or a duplicate.
     doneif (tagis[Helper.FirstCopy] = 0)

     ~ You may use the better of your Dexterity or Intelligence modifier for Disable Device checks.

     perform hero.child[skDisable].assign[SkillOpt.aDEX]
     perform hero.child[skDisable].assign[SkillOpt.aINT]]]></eval>
    </thing>
  <thing id="sogTlEscapologist" name="Escapologist" compset="SoGTalent" description="You gain Acrobatics, Escape Artist, Knowledge (arcana), and Knowledge (engineering) as class skills. Whenever you attempt to break free of any bindings, manacles, or other restraints that take 1 minute to do so, you reduce the time taken to 1 round." uniqueness="useronce">
    <usesource source="pPF1e_Sph_Guile" parent="pPF1e_Sph" name="Spheres of Guile"/>
    <tag group="SoGSphere" tag="Vocation" name="Vocation" abbrev="Vocation"/>
    <tag group="SoGTlClass" tag="Talent" name="Basic Talent" abbrev="Basic Talent"/>
    <tag group="SoGTalDesc" tag="Trade" name="Trade" abbrev="Trade"/>
    <tag group="SoGTalDesc" tag="Utility" name="Utility" abbrev="Utility"/>
    <eval phase="First" priority="11000"><![CDATA[~ Get out if disabled
     doneif (tagis[Helper.SpcDisable] <> 0)
     ~ or a duplicate.
     doneif (tagis[Helper.FirstCopy] = 0)

     ~ You gain Acrobatics, Escape Artist, Knowledge (arcana), and Knowledge (engineering) as class skills.

     perform hero.child[skAcrobat].setfocus
     perform focus.assign[Helper.ClassSkill]
     perform focus.assignstr["TradeSkill." & this.idstring]
     perform hero.child[skEscape].setfocus
     perform focus.assign[Helper.ClassSkill]
     perform focus.assignstr["TradeSkill." & this.idstring]
     if (hero.childlives[skKnowArca] = 1) then
           perform hero.child[skKnowArca].setfocus
           perform focus.assign[Helper.ClassSkill]
           perform focus.assignstr["TradeSkill." & this.idstring]
     endif
     if (hero.childlives[skKnowEng] = 1) then
           perform hero.child[skKnowEng].setfocus
           perform focus.assign[Helper.ClassSkill]
           perform focus.assignstr["TradeSkill." & this.idstring]
     endif

     perform this.assign[TradeSkill.skAcrobat]
     perform this.assign[TradeSkill.skEscape]
     perform this.assign[TradeSkill.skKnowArca]
     perform this.assign[TradeSkill.skKnowEng]]]></eval>
    </thing>
  <thing id="sogTlEsotericScho" name="Esoteric Scholar" compset="SoGTalent" description="You gain Knowledge (dungeoneering), Knowledge (nature), Knowledge (planes), and Knowledge (religion) as class skills. When you fail a Knowledge check to recall the abilities of a creature, you learn two pieces of information of the GM’s choice about the creature, one true and one plausible but false." uniqueness="useronce">
    <usesource source="pPF1e_Sph_Guile" parent="pPF1e_Sph" name="Spheres of Guile"/>
    <tag group="SoGSphere" tag="Vocation" name="Vocation" abbrev="Vocation"/>
    <tag group="SoGTlClass" tag="Talent" name="Basic Talent" abbrev="Basic Talent"/>
    <tag group="SoGTalDesc" tag="Trade" name="Trade" abbrev="Trade"/>
    <tag group="SoGTalDesc" tag="Utility" name="Utility" abbrev="Utility"/>
    <eval phase="First" priority="11000"><![CDATA[~ Get out if disabled
     doneif (tagis[Helper.SpcDisable] <> 0)
     ~ or a duplicate.
     doneif (tagis[Helper.FirstCopy] = 0)

     ~ You gain Knowledge (dungeoneering), Knowledge (nature), Knowledge (planes), and Knowledge (religion) as class skills

     if (hero.childlives[skKnowDun] = 1) then
           perform hero.child[skKnowDun].setfocus
           perform focus.assign[Helper.ClassSkill]
           perform focus.assignstr["TradeSkill." & this.idstring]
     endif
     if (hero.childlives[skKnowNat] = 1) then
           perform hero.child[skKnowNat].setfocus
           perform focus.assign[Helper.ClassSkill]
           perform focus.assignstr["TradeSkill." & this.idstring]
     endif
     if (hero.childlives[skKnowPlan] = 1) then
           perform hero.child[skKnowPlan].setfocus
           perform focus.assign[Helper.ClassSkill]
           perform focus.assignstr["TradeSkill." & this.idstring]
     endif
     if (hero.childlives[skKnowRel] = 1) then
           perform hero.child[skKnowRel].setfocus
           perform focus.assign[Helper.ClassSkill]
           perform focus.assignstr["TradeSkill." & this.idstring]
     endif


     perform this.assign[TradeSkill.skKnowDun]
     perform this.assign[TradeSkill.skKnowHist]
     perform this.assign[TradeSkill.skKnowPlan]
     perform this.assign[TradeSkill.skKnowRel]]]></eval>
    </thing>
  <thing id="sogTlExplorer" name="Explorer" compset="SoGTalent" description="You gain Climb, Knowledge (geography), Survival, and Swim as class skills. You do not take penalties on skill checks for using improvised equipment or not having the proper equipment." uniqueness="useronce">
    <comment>TODO Code possible? Maybe mark all as tool available?</comment>
    <usesource source="pPF1e_Sph_Guile" parent="pPF1e_Sph" name="Spheres of Guile"/>
    <tag group="SoGSphere" tag="Vocation" name="Vocation" abbrev="Vocation"/>
    <tag group="SoGTlClass" tag="Talent" name="Basic Talent" abbrev="Basic Talent"/>
    <tag group="SoGTalDesc" tag="Trade" name="Trade" abbrev="Trade"/>
    <tag group="SoGTalDesc" tag="Utility" name="Utility" abbrev="Utility"/>
    <eval phase="First" priority="11000"><![CDATA[~ Get out if disabled
     doneif (tagis[Helper.SpcDisable] <> 0)
     ~ or a duplicate.
     doneif (tagis[Helper.FirstCopy] = 0)

     ~ You gain Climb, Knowledge (geography), Survival, and Swim as class skills.

     perform hero.child[skClimb].setfocus
     perform focus.assign[Helper.ClassSkill]
     perform focus.assignstr["TradeSkill." & this.idstring]
     if (hero.childlives[skKnowGeog] = 1) then
           perform hero.child[skKnowGeog].setfocus
           perform focus.assign[Helper.ClassSkill]
           perform focus.assignstr["TradeSkill." & this.idstring]
     endif
     perform hero.child[skSurvival].setfocus
     perform focus.assign[Helper.ClassSkill]
     perform focus.assignstr["TradeSkill." & this.idstring]
     perform hero.child[skSwim].setfocus
     perform focus.assign[Helper.ClassSkill]
     perform focus.assignstr["TradeSkill." & this.idstring]

     perform this.assign[TradeSkill.skClimb]
     perform this.assign[TradeSkill.skKnowGeog]
     perform this.assign[TradeSkill.skSurvival]
     perform this.assign[TradeSkill.skSwim]]]></eval>
    </thing>
  <thing id="sogTlFaithHealer" name="Faith Healer" compset="SoGTalent" description="You gain Bluff, Diplomacy, Heal, and Knowledge (religion) as class skills. You may use the better of your Wisdom and Charisma modifier for Heal checks." uniqueness="useronce">
    <usesource source="pPF1e_Sph_Guile" parent="pPF1e_Sph" name="Spheres of Guile"/>
    <tag group="SoGSphere" tag="Vocation" name="Vocation" abbrev="Vocation"/>
    <tag group="SoGTlClass" tag="Talent" name="Basic Talent" abbrev="Basic Talent"/>
    <tag group="SoGTalDesc" tag="Trade" name="Trade" abbrev="Trade"/>
    <tag group="SoGTalDesc" tag="Utility" name="Utility" abbrev="Utility"/>
    <tag group="Helper" tag="SpecUp" name="SpecUp" abbrev="SpecUp"/>
    <eval phase="First" priority="11000"><![CDATA[~ Get out if disabled
     doneif (tagis[Helper.SpcDisable] <> 0)
     ~ or a duplicate.
     doneif (tagis[Helper.FirstCopy] = 0)

     ~ You gain Bluff, Diplomacy, Heal, and Knowledge (religion) as class skills

     perform hero.child[skBluff].setfocus
     perform focus.assign[Helper.ClassSkill]
     perform focus.assignstr["TradeSkill." & this.idstring]
     perform hero.child[skDiplo].setfocus
     perform focus.assign[Helper.ClassSkill]
     perform focus.assignstr["TradeSkill." & this.idstring]
     perform hero.child[skHeal].setfocus
     perform focus.assign[Helper.ClassSkill]
     perform focus.assignstr["TradeSkill." & this.idstring]
     if (hero.childlives[skKnowRel] = 1) then
           perform hero.child[skKnowRel].setfocus
           perform focus.assign[Helper.ClassSkill]
           perform focus.assignstr["TradeSkill." & this.idstring]
     endif

     perform this.assign[TradeSkill.skBluff]
     perform this.assign[TradeSkill.skDiplo]
     perform this.assign[TradeSkill.skHeal]
     perform this.assign[TradeSkill.skKnowRel]]]></eval>
    <eval phase="Attr" priority="100003" index="2"><![CDATA[~ Get out if disabled
     doneif (tagis[Helper.SpcDisable] <> 0)
     ~ or a duplicate.
     doneif (tagis[Helper.FirstCopy] = 0)

     ~ You may use the better of your Wisdom and Charisma modifier for Heal checks.

     perform hero.child[skHeal].assign[SkillOpt.aWIS]
     perform hero.child[skHeal].assign[SkillOpt.aCHA]]]></eval>
    </thing>
  <thing id="sogTlGambler" name="Gambler" compset="SoGTalent" description="You gain Appraise, Bluff, Sense Motive, and Sleight of Hand as class skills. You can use your Charisma modifier in place of your Intelligence modifier for Appraise checks." uniqueness="useronce">
    <usesource source="pPF1e_Sph_Guile" parent="pPF1e_Sph" name="Spheres of Guile"/>
    <tag group="SoGSphere" tag="Vocation" name="Vocation" abbrev="Vocation"/>
    <tag group="SoGTlClass" tag="Talent" name="Basic Talent" abbrev="Basic Talent"/>
    <tag group="SoGTalDesc" tag="Trade" name="Trade" abbrev="Trade"/>
    <tag group="SoGTalDesc" tag="Utility" name="Utility" abbrev="Utility"/>
    <tag group="Helper" tag="SpecUp" name="SpecUp" abbrev="SpecUp"/>
    <eval phase="First" priority="11000"><![CDATA[~ Get out if disabled
     doneif (tagis[Helper.SpcDisable] <> 0)
     ~ or a duplicate.
     doneif (tagis[Helper.FirstCopy] = 0)

     ~ You gain Appraise, Bluff, Sense Motive, and Sleight of Hand as class skills.

     perform hero.child[skAppraise].setfocus
     perform focus.assign[Helper.ClassSkill]
     perform focus.assignstr["TradeSkill." & this.idstring]
     perform hero.child[skBluff].setfocus
     perform focus.assign[Helper.ClassSkill]
     perform focus.assignstr["TradeSkill." & this.idstring]
     perform hero.child[skSenseMot].setfocus
     perform focus.assign[Helper.ClassSkill]
     perform focus.assignstr["TradeSkill." & this.idstring]
     perform hero.child[skSleight].setfocus
     perform focus.assign[Helper.ClassSkill]
     perform focus.assignstr["TradeSkill." & this.idstring]

     perform this.assign[TradeSkill.skAppraise]
     perform this.assign[TradeSkill.skBluff]
     perform this.assign[TradeSkill.skSenseMot]
     perform this.assign[TradeSkill.skSleight]]]></eval>
    <eval phase="Attr" priority="100003" index="2"><![CDATA[~ Get out if disabled
     doneif (tagis[Helper.SpcDisable] <> 0)
     ~ or a duplicate.
     doneif (tagis[Helper.FirstCopy] = 0)

     ~ You can use your Charisma modifier in place of your Intelligence modifier for Appraise checks.

     perform hero.child[skAppraise].assign[SkillOpt.aCHA]]]></eval>
    </thing>
  <thing id="sogTlGuide" name="Guide" compset="SoGTalent" description="You gain Knowledge (geography), Knowledge (nature), Ride, and Survival as class skills. You can attempt a Ride check in place of a Handle Animal check to interact with a mount that is helpful to you while you are touching it." uniqueness="useronce">
    <usesource source="pPF1e_Sph_Guile" parent="pPF1e_Sph" name="Spheres of Guile"/>
    <tag group="SoGSphere" tag="Vocation" name="Vocation" abbrev="Vocation"/>
    <tag group="SoGTlClass" tag="Talent" name="Basic Talent" abbrev="Basic Talent"/>
    <tag group="SoGTalDesc" tag="Trade" name="Trade" abbrev="Trade"/>
    <tag group="SoGTalDesc" tag="Utility" name="Utility" abbrev="Utility"/>
    <eval phase="First" priority="11000"><![CDATA[~ Get out if disabled
     doneif (tagis[Helper.SpcDisable] <> 0)
     ~ or a duplicate.
     doneif (tagis[Helper.FirstCopy] = 0)

     ~ You gain Knowledge (geography), Knowledge (nature), Ride, and Survival as class skills.

     if (hero.childlives[skKnowGeog] = 1) then
           perform hero.child[skKnowGeog].setfocus
           perform focus.assign[Helper.ClassSkill]
           perform focus.assignstr["TradeSkill." & this.idstring]
     endif
     if (hero.childlives[skKnowNat] = 1) then
           perform hero.child[skKnowNat].setfocus
           perform focus.assign[Helper.ClassSkill]
           perform focus.assignstr["TradeSkill." & this.idstring]
     endif
     perform hero.child[skRide].setfocus
     perform focus.assign[Helper.ClassSkill]
     perform focus.assignstr["TradeSkill." & this.idstring]
     perform hero.child[skSurvival].setfocus
     perform focus.assign[Helper.ClassSkill]
     perform focus.assignstr["TradeSkill." & this.idstring]

     perform this.assign[TradeSkill.skKnowGeog]
     perform this.assign[TradeSkill.skKnowNat]
     perform this.assign[TradeSkill.skRide]
     perform this.assign[TradeSkill.skSurvival]]]></eval>
    <eval phase="Final" priority="15100" index="2"><![CDATA[~ Get out if disabled
     doneif (tagis[Helper.SpcDisable] <> 0)
     ~ or a duplicate.
     doneif (tagis[Helper.FirstCopy] = 0)

     ~ You can attempt a Ride check in place of a Handle Animal check to interact with a mount that is helpful to you while you are touching it.

     #situational[hero.childfound[skRide], " may use Ride to Handle Animal a helpful mount while touching it.", field[thingname].text]]]></eval>
    </thing>
  <thing id="sogTlHandler" name="Handler" compset="SoGTalent" description="You gain Handle Animal, Knowledge (nature), Ride, and Survival as class skills. You may teach creatures 2 additional tricks using the handle animal skill." uniqueness="useronce">
    <usesource source="pPF1e_Sph_Guile" parent="pPF1e_Sph" name="Spheres of Guile"/>
    <tag group="SoGSphere" tag="Vocation" name="Vocation" abbrev="Vocation"/>
    <tag group="SoGTlClass" tag="Talent" name="Basic Talent" abbrev="Basic Talent"/>
    <tag group="SoGTalDesc" tag="Trade" name="Trade" abbrev="Trade"/>
    <tag group="SoGTalDesc" tag="Utility" name="Utility" abbrev="Utility"/>
    <eval phase="First" priority="11000"><![CDATA[~ Get out if disabled
     doneif (tagis[Helper.SpcDisable] <> 0)
     ~ or a duplicate.
     doneif (tagis[Helper.FirstCopy] = 0)

     ~ You gain Handle Animal, Knowledge (nature), Ride, and Survival as class skills.

     perform hero.child[skHandleAn].setfocus
     perform focus.assign[Helper.ClassSkill]
     perform focus.assignstr["TradeSkill." & this.idstring]
     if (hero.childlives[skKnowNat] = 1) then
           perform hero.child[skKnowNat].setfocus
           perform focus.assign[Helper.ClassSkill]
           perform focus.assignstr["TradeSkill." & this.idstring]
     endif
     perform hero.child[skRide].setfocus
     perform focus.assign[Helper.ClassSkill]
     perform focus.assignstr["TradeSkill." & this.idstring]
     perform hero.child[skSurvival].setfocus
     perform focus.assign[Helper.ClassSkill]
     perform focus.assignstr["TradeSkill." & this.idstring]

     perform this.assign[TradeSkill.skHandleAn]
     perform this.assign[TradeSkill.skKnowNat]
     perform this.assign[TradeSkill.skRide]
     perform this.assign[TradeSkill.skSurvival]]]></eval>
    </thing>
  <thing id="sogTlInterlocutor" name="Interlocutor" compset="SoGTalent" description="You gain Bluff, Diplomacy, Linguistics, and Sense Motive as class skills. You may use your Wisdom modifier in place of your Charisma modifier for Diplomacy checks to improve an attitude and for Bluff checks to make a claim." uniqueness="useronce">
    <usesource source="pPF1e_Sph_Guile" parent="pPF1e_Sph" name="Spheres of Guile"/>
    <tag group="SoGSphere" tag="Vocation" name="Vocation" abbrev="Vocation"/>
    <tag group="SoGTlClass" tag="Talent" name="Basic Talent" abbrev="Basic Talent"/>
    <tag group="SoGTalDesc" tag="Trade" name="Trade" abbrev="Trade"/>
    <tag group="SoGTalDesc" tag="Utility" name="Utility" abbrev="Utility"/>
    <tag group="Helper" tag="SpecUp" name="SpecUp" abbrev="SpecUp"/>
    <tag group="Hide" tag="Activation" name="Activation" abbrev="Activation"/>
    <eval phase="First" priority="11000"><![CDATA[~ Get out if disabled
     doneif (tagis[Helper.SpcDisable] <> 0)
     ~ or a duplicate.
     doneif (tagis[Helper.FirstCopy] = 0)

     ~ You gain Bluff, Diplomacy, Linguistics, and Sense Motive as class skills.

     perform hero.child[skBluff].setfocus
     perform focus.assign[Helper.ClassSkill]
     perform focus.assignstr["TradeSkill." & this.idstring]
     perform hero.child[skDiplo].setfocus
     perform focus.assign[Helper.ClassSkill]
     perform focus.assignstr["TradeSkill." & this.idstring]
     perform hero.child[skLinguist].setfocus
     perform focus.assign[Helper.ClassSkill]
     perform focus.assignstr["TradeSkill." & this.idstring]
     perform hero.child[skSenseMot].setfocus
     perform focus.assign[Helper.ClassSkill]
     perform focus.assignstr["TradeSkill." & this.idstring]

     perform this.assign[TradeSkill.skBluff]
     perform this.assign[TradeSkill.skDiplo]
     perform this.assign[TradeSkill.skLinguist]
     perform this.assign[TradeSkill.skSenseMot]]]></eval>
    <eval phase="Attr" priority="100003" index="2"><![CDATA[~ Get out if disabled
     doneif (tagis[Helper.SpcDisable] <> 0)
     ~ or a duplicate.
     doneif (tagis[Helper.FirstCopy] = 0)

     ~ You may use your Wisdom modifier in place of your Charisma modifier for Diplomacy checks to improve an attitude and for Bluff checks to make a claim.

     var bCHA as number
     bCHA = hero.child[aCHA].field[aModBonus].value
     bCHA -= hero.child[aWIS].field[aModBonus].value
     var bWIS as number
     bWIS = 0 - bCHA

     if (bWIS > 0) then
       perform hero.childfound[skDiplo].setfocus
       if (state.isfocus <> 0) then
         #situational[focus, "+" & bWIS & " to improve an attitude.", field[thingname].text]
         perform state.clearfocus
       endif
       perform hero.childfound[skBluff].setfocus
       if (state.isfocus <> 0) then
         #situational[focus, "+" & bWIS & " to make a claim.", field[thingname].text]
       endif
     endif]]></eval>
    </thing>
  <thing id="sogTlKnight" name="Knight" compset="SoGTalent" description="You gain Handle Animal, Intimidate, Knowledge (nobility), and Ride as class skills. You may add the enhancement bonus of any armor, shield, or weapon you possess to checks made to assess proficiency or pose a menace." uniqueness="useronce">
    <usesource source="pPF1e_Sph_Guile" parent="pPF1e_Sph" name="Spheres of Guile"/>
    <tag group="SoGSphere" tag="Vocation" name="Vocation" abbrev="Vocation"/>
    <tag group="SoGTlClass" tag="Talent" name="Basic Talent" abbrev="Basic Talent"/>
    <tag group="SoGTalDesc" tag="Trade" name="Trade" abbrev="Trade"/>
    <tag group="SoGTalDesc" tag="Utility" name="Utility" abbrev="Utility"/>
    <tag group="ChooseSrc1" tag="Hero" name="All Picks on Hero" abbrev="All Picks on Hero"/>
    <tag group="Helper" tag="SpecUp" name="SpecUp" abbrev="SpecUp"/>
    <tag group="Hide" tag="Activation" name="Activation" abbrev="Activation"/>
    <eval phase="First" priority="11000"><![CDATA[~ Get out if disabled
     doneif (tagis[Helper.SpcDisable] <> 0)
     ~ or a duplicate.
     doneif (tagis[Helper.FirstCopy] = 0)

     ~ You gain Handle Animal, Intimidate, Knowledge (nobility), and Ride as class skills.

     perform hero.child[skHandleAn].setfocus
     perform focus.assign[Helper.ClassSkill]
     perform focus.assignstr["TradeSkill." & this.idstring]
     perform hero.child[skIntim].setfocus
     perform focus.assign[Helper.ClassSkill]
     perform focus.assignstr["TradeSkill." & this.idstring]
     if (hero.childlives[skKnowNobl] = 1) then
           perform hero.child[skKnowNobl].setfocus
           perform focus.assign[Helper.ClassSkill]
           perform focus.assignstr["TradeSkill." & this.idstring]
     endif
     perform hero.child[skRide].setfocus
     perform focus.assign[Helper.ClassSkill]
     perform focus.assignstr["TradeSkill." & this.idstring]

     perform this.assign[TradeSkill.skHandleAn]
     perform this.assign[TradeSkill.skIntim]
     perform this.assign[TradeSkill.skKnowNobl]
     perform this.assign[TradeSkill.skRide]]]></eval>
    <eval phase="Attr" priority="100003" index="2"><![CDATA[~ Get out if disabled
     doneif (tagis[Helper.SpcDisable] <> 0)
     ~ or a duplicate.
     doneif (tagis[Helper.FirstCopy] = 0)

     ~ You may add the enhancement bonus of any armor, shield, or weapon you possess to checks made to assess proficiency or pose a menace.

     var bon as number
     var new as number
     var sk as number

     foreach pick in hero from BaseArmor where "ArmorClass.?"
       if (eachpick.field[gIsEquip].value <> 0) then
         new = maximum(new, eachpick.field[BonEnhance].value)
       endif
     nexteach

     bon = new
     perform hero.childfound[skCrafArm].setfocus
     if (state.isfocus <> 0) then
       sk = new - focus.field[BonEnhance].value
       if (sk > 0) then
         #situational[focus, "+" & sk & " assess proficiency for armor.", field[thingname].text]
       endif
       perform state.clearfocus
     endif

     new = 0
     foreach pick in hero from BaseWep where "IsWeapon.?"
       if (eachpick.field[gIsEquip].value <> 0) then
         new = maximum(new, eachpick.field[BonEnhance].value)
       endif
     nexteach

     bon = maximum(bon, new)

     perform hero.childfound[skIntim].setfocus
     if (state.isfocus <> 0) then
       sk = bon - focus.field[BonEnhance].value
       if (sk > 0) then
         #situational[focus, "+" & sk & " to pose a menace.", field[thingname].text]
       endif
       perform state.clearfocus
     endif
     perform hero.childfound[skProfSold].setfocus
     if (state.isfocus <> 0) then
       sk = bon - focus.field[BonEnhance].value
       if (sk > 0) then
         #situational[focus, "+" & sk & " to assess proficiency.", field[thingname].text]
       endif
       perform state.clearfocus
     endif]]></eval>
    </thing>
  <thing id="sogTlMerchant" name="Merchant" compset="SoGTalent" description="You gain Appraise, Bluff, Diplomacy, and Knowledge (local) as class skills. When you give a creature a gift worth 10% the heroic NPC wealth of the target’s level, it functions as a gift worth 15% of the heroic NPC wealth of the target’s level." uniqueness="useronce">
    <usesource source="pPF1e_Sph_Guile" parent="pPF1e_Sph" name="Spheres of Guile"/>
    <tag group="SoGSphere" tag="Vocation" name="Vocation" abbrev="Vocation"/>
    <tag group="SoGTlClass" tag="Talent" name="Basic Talent" abbrev="Basic Talent"/>
    <tag group="SoGTalDesc" tag="Trade" name="Trade" abbrev="Trade"/>
    <tag group="SoGTalDesc" tag="Utility" name="Utility" abbrev="Utility"/>
    <eval phase="First" priority="11000"><![CDATA[~ Get out if disabled
     doneif (tagis[Helper.SpcDisable] <> 0)
     ~ or a duplicate.
     doneif (tagis[Helper.FirstCopy] = 0)

     ~ You gain Appraise, Bluff, Diplomacy, and Knowledge (local) as class skills.

     perform hero.child[skAppraise].setfocus
     perform focus.assign[Helper.ClassSkill]
     perform focus.assignstr["TradeSkill." & this.idstring]
     perform hero.child[skBluff].setfocus
     perform focus.assign[Helper.ClassSkill]
     perform focus.assignstr["TradeSkill." & this.idstring]
     perform hero.child[skDiplo].setfocus
     perform focus.assign[Helper.ClassSkill]
     perform focus.assignstr["TradeSkill." & this.idstring]
     if (hero.childlives[skKnowLoc] = 1) then
           perform hero.child[skKnowLoc].setfocus
           perform focus.assign[Helper.ClassSkill]
           perform focus.assignstr["TradeSkill." & this.idstring]
     endif

     perform this.assign[TradeSkill.skAppraise]
     perform this.assign[TradeSkill.skBluff]
     perform this.assign[TradeSkill.skDiplo]
     perform this.assign[TradeSkill.skKnowLoc]]]></eval>
    </thing>
  <thing id="sogTlMiner" name="Miner" compset="SoGTalent" description="You gain Appraise, Escape Artist, Knowledge (dungeoneering), and Knowledge (engineering) as class skills. You gain a +4 insight bonus on Perception checks to notice natural deposits of precious metals or minerals or gems, and a +4 insight bonus on Appraise checks to determine their worth. When you can use a weapon (typically a pick or hammer) as a tool of your trade, you add your weapon’s enhancement bonus on trained Craft and Profession checks." uniqueness="useronce">
    <usesource source="pPF1e_Sph_Guile" parent="pPF1e_Sph" name="Spheres of Guile"/>
    <tag group="SoGSphere" tag="Vocation" name="Vocation" abbrev="Vocation"/>
    <tag group="SoGTlClass" tag="Talent" name="Basic Talent" abbrev="Basic Talent"/>
    <tag group="SoGTalDesc" tag="Trade" name="Trade" abbrev="Trade"/>
    <tag group="SoGTalDesc" tag="Utility" name="Utility" abbrev="Utility"/>
    <tag group="ChooseSrc1" tag="Hero" name="All Picks on Hero" abbrev="All Picks on Hero"/>
    <tag group="Helper" tag="SpecUp" name="SpecUp" abbrev="SpecUp"/>
    <tag group="Hide" tag="Activation" name="Activation" abbrev="Activation"/>
    <eval phase="First" priority="11000"><![CDATA[~ Get out if disabled
     doneif (tagis[Helper.SpcDisable] <> 0)
     ~ or a duplicate.
     doneif (tagis[Helper.FirstCopy] = 0)

     ~ You gain Appraise, Escape Artist, Knowledge (dungeoneering), and Knowledge (engineering) as class skills.

     perform hero.child[skAppraise].setfocus
     perform focus.assign[Helper.ClassSkill]
     perform focus.assignstr["TradeSkill." & this.idstring]
     perform hero.child[skEscape].setfocus
     perform focus.assign[Helper.ClassSkill]
     perform focus.assignstr["TradeSkill." & this.idstring]
     if (hero.childlives[skKnowDun] = 1) then
           perform hero.child[skKnowDun].setfocus
           perform focus.assign[Helper.ClassSkill]
           perform focus.assignstr["TradeSkill." & this.idstring]
     endif
     if (hero.childlives[skKnowEng] = 1) then
           perform hero.child[skKnowEng].setfocus
           perform focus.assign[Helper.ClassSkill]
           perform focus.assignstr["TradeSkill." & this.idstring]
     endif


     perform this.assign[TradeSkill.skAppraise]
     perform this.assign[TradeSkill.skEscape]
     perform this.assign[TradeSkill.skKnowDun]
     perform this.assign[TradeSkill.skKnowEng]]]></eval>
    <eval phase="Attr" priority="100003" index="2">~ Get out if disabled
     doneif (tagis[Helper.SpcDisable] &lt;> 0)
     ~ or a duplicate.
     doneif (tagis[Helper.FirstCopy] = 0)

     ~ You gain a +4 insight bonus on Perception checks to notice natural deposits of precious metals or minerals or gems, and a +4 insight bonus on Appraise checks to determine their worth. When you can use a weapon (typically a pick or hammer) as a tool of your trade, you add your weapon’s enhancement bonus on trained Craft and Profession checks.

     var bon as number
     perform hero.childfound[skPercep].setfocus
     if (state.isfocus &lt;> 0) then
       bon = 4 - focus.field[BonInsight].value
       if (bon > 0) then
         #situational[focus, "+" &amp; bon &amp; " to notice natural deposits of precious metals or minerals or gems.", field[thingname].text]
       endif
       perform state.clearfocus
     endif

     perform hero.childfound[skAppraise].setfocus
     if (state.isfocus &lt;> 0) then
       bon = 4 - focus.field[BonInsight].value
       if (bon > 0) then
         #situational[focus, "+" &amp; bon &amp; " to determine worth of natural deposits of precious metals or minerals or gems.", field[thingname].text]
       endif
       perform state.clearfocus
     endif

     foreach pick in hero from BaseWep where "wFtrGroup.Hammers | IsWeapon.wWarhammer? | IsWeapon.wHamm? | wFtrGroup.Axes"
       if (eachpick.field[gIsEquip].value &lt;> 0) then
         #applybonus[BonEnhance, hero.childfound[skCrafArm], eachpick.field[BonEnhance].value]
         #applybonus[BonEnhance, hero.childfound[skCrafWeap], eachpick.field[BonEnhance].value]
         #applybonus[BonEnhance, hero.childfound[skCrafSton], eachpick.field[BonEnhance].value]
       endif
     nexteach</eval>
    </thing>
  <thing id="sogTlOrator" name="Orator" compset="SoGTalent" description="You gain Bluff, Diplomacy, Intimidate, and Knowledge (history) as class skills. When you modify a character’s attitude with the Diplomacy or Intimidate skill, the attitude change lasts 5 times longer than it otherwise would." uniqueness="useronce">
    <usesource source="pPF1e_Sph_Guile" parent="pPF1e_Sph" name="Spheres of Guile"/>
    <tag group="SoGSphere" tag="Vocation" name="Vocation" abbrev="Vocation"/>
    <tag group="SoGTlClass" tag="Talent" name="Basic Talent" abbrev="Basic Talent"/>
    <tag group="SoGTalDesc" tag="Trade" name="Trade" abbrev="Trade"/>
    <tag group="SoGTalDesc" tag="Utility" name="Utility" abbrev="Utility"/>
    <eval phase="First" priority="11000"><![CDATA[~ Get out if disabled
     doneif (tagis[Helper.SpcDisable] <> 0)
     ~ or a duplicate.
     doneif (tagis[Helper.FirstCopy] = 0)

     ~ You gain Bluff, Diplomacy, Intimidate, and Knowledge (history) as class skills.

     perform hero.child[skBluff].setfocus
     perform focus.assign[Helper.ClassSkill]
     perform focus.assignstr["TradeSkill." & this.idstring]
     perform hero.child[skDiplo].setfocus
     perform focus.assign[Helper.ClassSkill]
     perform focus.assignstr["TradeSkill." & this.idstring]
     perform hero.child[skIntim].setfocus
     perform focus.assign[Helper.ClassSkill]
     perform focus.assignstr["TradeSkill." & this.idstring]
     if (hero.childlives[skKnowHist] = 1) then
           perform hero.child[skKnowHist].setfocus
           perform focus.assign[Helper.ClassSkill]
           perform focus.assignstr["TradeSkill." & this.idstring]
     endif

     perform this.assign[TradeSkill.skBluff]
     perform this.assign[TradeSkill.skDiplo]
     perform this.assign[TradeSkill.skIntim]
     perform this.assign[TradeSkill.skKnowHist]]]></eval>
    <eval phase="Final" priority="15100" index="2">~ Get out if disabled
     doneif (tagis[Helper.SpcDisable] &lt;> 0)
     ~ or a duplicate.
     doneif (tagis[Helper.FirstCopy] = 0)

     ~ When you modify a character’s attitude with the Diplomacy or Intimidate skill, the attitude change lasts 5 times longer than it otherwise would.

     #situational[hero.childfound[skDiplo], "Modified attitudes change lasts 5 times longer.", field[thingname].text]
     #situational[hero.childfound[skIntim], "Modified attitudes change lasts 5 times longer.", field[thingname].text]</eval>
    </thing>
  <thing id="sogTlPhilosopher" name="Philosopher" compset="SoGTalent" description="You gain Knowledge (history), Knowledge (nature), Knowledge (religion), and Sense Motive as class skills. You can use the better of your Intelligence or Wisdom modifier when attempting Sense Motive checks." uniqueness="useronce">
    <usesource source="pPF1e_Sph_Guile" parent="pPF1e_Sph" name="Spheres of Guile"/>
    <tag group="SoGSphere" tag="Vocation" name="Vocation" abbrev="Vocation"/>
    <tag group="SoGTlClass" tag="Talent" name="Basic Talent" abbrev="Basic Talent"/>
    <tag group="SoGTalDesc" tag="Trade" name="Trade" abbrev="Trade"/>
    <tag group="SoGTalDesc" tag="Utility" name="Utility" abbrev="Utility"/>
    <tag group="Helper" tag="SpecUp" name="SpecUp" abbrev="SpecUp"/>
    <eval phase="First" priority="11000"><![CDATA[~ Get out if disabled
     doneif (tagis[Helper.SpcDisable] <> 0)
     ~ or a duplicate.
     doneif (tagis[Helper.FirstCopy] = 0)

     ~ You gain Knowledge (history), Knowledge (nature), Knowledge (religion), and Sense Motive as class skills.

     if (hero.childlives[skKnowHist] = 1) then
           perform hero.child[skKnowHist].setfocus
           perform focus.assign[Helper.ClassSkill]
           perform focus.assignstr["TradeSkill." & this.idstring]
     endif
     if (hero.childlives[skKnowNat] = 1) then
           perform hero.child[skKnowNat].setfocus
           perform focus.assign[Helper.ClassSkill]
           perform focus.assignstr["TradeSkill." & this.idstring]
     endif
     if (hero.childlives[skKnowRel] = 1) then
           perform hero.child[skKnowRel].setfocus
           perform focus.assign[Helper.ClassSkill]
           perform focus.assignstr["TradeSkill." & this.idstring]
     endif
     perform hero.child[skSenseMot].setfocus
     perform focus.assign[Helper.ClassSkill]
     perform focus.assignstr["TradeSkill." & this.idstring]

     perform this.assign[TradeSkill.skKnowHist]
     perform this.assign[TradeSkill.skKnowNat]
     perform this.assign[TradeSkill.skKnowRel]
     perform this.assign[TradeSkill.skSenseMot]]]></eval>
    <eval phase="Attr" priority="100003" index="2"><![CDATA[~ Get out if disabled
     doneif (tagis[Helper.SpcDisable] <> 0)
     ~ or a duplicate.
     doneif (tagis[Helper.FirstCopy] = 0)

     ~ You can use the better of your Intelligence or Wisdom modifier when attempting Sense Motive checks.

     perform hero.child[skSenseMot].assign[SkillOpt.aINT]
     perform hero.child[skSenseMot].assign[SkillOpt.aWIS]]]></eval>
    </thing>
  <thing id="sogTlPirate" name="Pirate" compset="SoGTalent" description="You gain Appraise, Climb, Intimidate, and Swim as class skills. You may use your Acrobatics or Climb modifier on Acrobatics checks to balance and Climb checks made to swing on a rope." uniqueness="useronce">
    <comment>TODO Need to Code</comment>
    <usesource source="pPF1e_Sph_Guile" parent="pPF1e_Sph" name="Spheres of Guile"/>
    <tag group="SoGSphere" tag="Vocation" name="Vocation" abbrev="Vocation"/>
    <tag group="SoGTlClass" tag="Talent" name="Basic Talent" abbrev="Basic Talent"/>
    <tag group="SoGTalDesc" tag="Trade" name="Trade" abbrev="Trade"/>
    <tag group="SoGTalDesc" tag="Utility" name="Utility" abbrev="Utility"/>
    <tag group="Hide" tag="Activation" name="Activation" abbrev="Activation"/>
    <eval phase="Attr" priority="100003" index="2"><![CDATA[~ Get out if disabled
     doneif (tagis[Helper.SpcDisable] <> 0)
     ~ or a duplicate.
     doneif (tagis[Helper.FirstCopy] = 0)

     ~ You may use your Acrobatics or Climb modifier on Acrobatics checks to balance and Climb checks made to swing on a rope.]]></eval>
    <eval phase="First" priority="11000"><![CDATA[~ Get out if disabled
     doneif (tagis[Helper.SpcDisable] <> 0)
     ~ or a duplicate.
     doneif (tagis[Helper.FirstCopy] = 0)

     ~ You gain Appraise, Climb, Intimidate, and Swim as class skills.

     perform hero.child[skAppraise].setfocus
     perform focus.assign[Helper.ClassSkill]
     perform focus.assignstr["TradeSkill." & this.idstring]
     perform hero.child[skClimb].setfocus
     perform focus.assign[Helper.ClassSkill]
     perform focus.assignstr["TradeSkill." & this.idstring]
     perform hero.child[skIntim].setfocus
     perform focus.assign[Helper.ClassSkill]
     perform focus.assignstr["TradeSkill." & this.idstring]
     perform hero.child[skSwim].setfocus
     perform focus.assign[Helper.ClassSkill]
     perform focus.assignstr["TradeSkill." & this.idstring]

     perform this.assign[TradeSkill.skAppraise]
     perform this.assign[TradeSkill.skClimb]
     perform this.assign[TradeSkill.skIntim]
     perform this.assign[TradeSkill.skSwim]]]></eval>
    </thing>
  <thing id="sogTlPriest" name="Priest" compset="SoGTalent" description="You gain Knowledge (planes), Knowledge (religion), Sense Motive, and Spellcraft as class skills. You gain a +2 insight bonus on all skill checks regarding your specific faith or members of your specific faith (this includes checks such as Diplomacy checks and Sense Motive checks against members of the faith in addition to Knowledge checks regarding your faith)." uniqueness="useronce">
    <usesource source="pPF1e_Sph_Guile" parent="pPF1e_Sph" name="Spheres of Guile"/>
    <tag group="SoGSphere" tag="Vocation" name="Vocation" abbrev="Vocation"/>
    <tag group="SoGTlClass" tag="Talent" name="Basic Talent" abbrev="Basic Talent"/>
    <tag group="SoGTalDesc" tag="Trade" name="Trade" abbrev="Trade"/>
    <tag group="SoGTalDesc" tag="Utility" name="Utility" abbrev="Utility"/>
    <tag group="Hide" tag="Activation" name="Activation" abbrev="Activation"/>
    <eval phase="First" priority="11000"><![CDATA[~ Get out if disabled
     doneif (tagis[Helper.SpcDisable] <> 0)
     ~ or a duplicate.
     doneif (tagis[Helper.FirstCopy] = 0)

     ~ You gain Knowledge (planes), Knowledge (religion), Sense Motive, and Spellcraft as class skills.

     if (hero.childlives[skKnowPlan] = 1) then
           perform hero.child[skKnowPlan].setfocus
           perform focus.assign[Helper.ClassSkill]
           perform focus.assignstr["TradeSkill." & this.idstring]
     endif
     if (hero.childlives[skKnowRel] = 1) then
           perform hero.child[skKnowRel].setfocus
           perform focus.assign[Helper.ClassSkill]
           perform focus.assignstr["TradeSkill." & this.idstring]
     endif
     perform hero.child[skSenseMot].setfocus
     perform focus.assign[Helper.ClassSkill]
     perform focus.assignstr["TradeSkill." & this.idstring]
     perform hero.child[skSpellcr].setfocus
     perform focus.assign[Helper.ClassSkill]
     perform focus.assignstr["TradeSkill." & this.idstring]

     perform this.assign[TradeSkill.skKnowPlan]
     perform this.assign[TradeSkill.skKnowRel]
     perform this.assign[TradeSkill.skSenseMot]
     perform this.assign[TradeSkill.skSpellcr]]]></eval>
    </thing>
  <thing id="sogTlRacer" name="Racer" compset="SoGTalent" description="You gain Fly, Handle Animal, Ride, and Swim as class skills. All of your movement speeds or those of any mount you are riding increase by 5 feet whenever you or they take a run action and for the purpose of calculating overland movement speed." uniqueness="useronce">
    <usesource source="pPF1e_Sph_Guile" parent="pPF1e_Sph" name="Spheres of Guile"/>
    <tag group="SoGSphere" tag="Vocation" name="Vocation" abbrev="Vocation"/>
    <tag group="SoGTlClass" tag="Talent" name="Basic Talent" abbrev="Basic Talent"/>
    <tag group="SoGTalDesc" tag="Trade" name="Trade" abbrev="Trade"/>
    <tag group="SoGTalDesc" tag="Utility" name="Utility" abbrev="Utility"/>
    <tag group="Hide" tag="Activation" name="Activation" abbrev="Activation"/>
    <eval phase="First" priority="11000"><![CDATA[~ Get out if disabled
     doneif (tagis[Helper.SpcDisable] <> 0)
     ~ or a duplicate.
     doneif (tagis[Helper.FirstCopy] = 0)

     ~ You gain Fly, Handle Animal, Ride, and Swim as class skills.

     perform hero.child[skFly].setfocus
     perform focus.assign[Helper.ClassSkill]
     perform focus.assignstr["TradeSkill." & this.idstring]
     perform hero.child[skHandleAn].setfocus
     perform focus.assign[Helper.ClassSkill]
     perform focus.assignstr["TradeSkill." & this.idstring]
     perform hero.child[skRide].setfocus
     perform focus.assign[Helper.ClassSkill]
     perform focus.assignstr["TradeSkill." & this.idstring]
     perform hero.child[skSwim].setfocus
     perform focus.assign[Helper.ClassSkill]
     perform focus.assignstr["TradeSkill." & this.idstring]

     perform this.assign[TradeSkill.skFly]
     perform this.assign[TradeSkill.skHandleAn]
     perform this.assign[TradeSkill.skRide]
     perform this.assign[TradeSkill.skSwim]]]></eval>
    </thing>
  <thing id="sogTlSailor" name="Sailor" compset="SoGTalent" description="You gain Acrobatics, Knowledge (geography), Survival, and Swim as class skills. You take no penalties to Swim checks for keeping a creature or object your size or smaller at the surface or move it with you." uniqueness="useronce">
    <usesource source="pPF1e_Sph_Guile" parent="pPF1e_Sph" name="Spheres of Guile"/>
    <tag group="SoGSphere" tag="Vocation" name="Vocation" abbrev="Vocation"/>
    <tag group="SoGTlClass" tag="Talent" name="Basic Talent" abbrev="Basic Talent"/>
    <tag group="SoGTalDesc" tag="Trade" name="Trade" abbrev="Trade"/>
    <tag group="SoGTalDesc" tag="Utility" name="Utility" abbrev="Utility"/>
    <tag group="Hide" tag="Activation" name="Activation" abbrev="Activation"/>
    <eval phase="First" priority="11000"><![CDATA[~ Get out if disabled
     doneif (tagis[Helper.SpcDisable] <> 0)
     ~ or a duplicate.
     doneif (tagis[Helper.FirstCopy] = 0)

     ~ You gain Acrobatics, Knowledge (geography), Survival, and Swim as class skills.

     perform hero.child[skAcrobat].setfocus
     perform focus.assign[Helper.ClassSkill]
     perform focus.assignstr["TradeSkill." & this.idstring]
     if (hero.childlives[skKnowGeog] = 1) then
           perform hero.child[skKnowGeog].setfocus
           perform focus.assign[Helper.ClassSkill]
           perform focus.assignstr["TradeSkill." & this.idstring]
     endif
     perform hero.child[skSurvival].setfocus
     perform focus.assign[Helper.ClassSkill]
     perform focus.assignstr["TradeSkill." & this.idstring]
     perform hero.child[skSwim].setfocus
     perform focus.assign[Helper.ClassSkill]
     perform focus.assignstr["TradeSkill." & this.idstring]

     perform this.assign[TradeSkill.skAcrobat]
     perform this.assign[TradeSkill.skKnowGeog]
     perform this.assign[TradeSkill.skSurvival]
     perform this.assign[TradeSkill.skSwim]]]></eval>
    </thing>
  <thing id="sogTlScout" name="Scout" compset="SoGTalent" description="You gain Acrobatics, Knowledge (geography), Stealth, and Survival as class skills. The DC of Perception checks increases by 1 for every 20 feet of distance you have from the source or object rather than for every 10 feet." uniqueness="useronce">
    <usesource source="pPF1e_Sph_Guile" parent="pPF1e_Sph" name="Spheres of Guile"/>
    <tag group="SoGSphere" tag="Vocation" name="Vocation" abbrev="Vocation"/>
    <tag group="SoGTlClass" tag="Talent" name="Basic Talent" abbrev="Basic Talent"/>
    <tag group="SoGTalDesc" tag="Trade" name="Trade" abbrev="Trade"/>
    <tag group="SoGTalDesc" tag="Utility" name="Utility" abbrev="Utility"/>
    <tag group="Hide" tag="Activation" name="Activation" abbrev="Activation"/>
    <eval phase="First" priority="11000"><![CDATA[~ Get out if disabled
     doneif (tagis[Helper.SpcDisable] <> 0)
     ~ or a duplicate.
     doneif (tagis[Helper.FirstCopy] = 0)

     ~ You gain Acrobatics, Knowledge (geography), Stealth, and Survival as class skills.

     perform hero.child[skAcrobat].setfocus
     perform focus.assign[Helper.ClassSkill]
     perform focus.assignstr["TradeSkill." & this.idstring]
     if (hero.childlives[skKnowGeog] = 1) then
           perform hero.child[skKnowGeog].setfocus
           perform focus.assign[Helper.ClassSkill]
           perform focus.assignstr["TradeSkill." & this.idstring]
     endif
     perform hero.child[skStealth].setfocus
     perform focus.assign[Helper.ClassSkill]
     perform focus.assignstr["TradeSkill." & this.idstring]
     perform hero.child[skSurvival].setfocus
     perform focus.assign[Helper.ClassSkill]
     perform focus.assignstr["TradeSkill." & this.idstring]

     perform this.assign[TradeSkill.skAcrobat]
     perform this.assign[TradeSkill.skKnowGeog]
     perform this.assign[TradeSkill.skStealth]
     perform this.assign[TradeSkill.skSurvival]]]></eval>
    </thing>
  <thing id="sogTlScrounger" name="Scrounger" compset="SoGTalent" description="You gain Knowledge (local), Sleight of Hand, Survival, and Swim as class skills. You automatically succeed at skill checks to get along in the wild and protect against the weather. The bonus to Fortitude saves granted against severe weather by successful Survival checks increases by 2." uniqueness="useronce">
    <usesource source="pPF1e_Sph_Guile" parent="pPF1e_Sph" name="Spheres of Guile"/>
    <tag group="SoGSphere" tag="Vocation" name="Vocation" abbrev="Vocation"/>
    <tag group="SoGTlClass" tag="Talent" name="Basic Talent" abbrev="Basic Talent"/>
    <tag group="SoGTalDesc" tag="Trade" name="Trade" abbrev="Trade"/>
    <tag group="SoGTalDesc" tag="Utility" name="Utility" abbrev="Utility"/>
    <tag group="Hide" tag="Activation" name="Activation" abbrev="Activation"/>
    <eval phase="First" priority="11000"><![CDATA[~ Get out if disabled
     doneif (tagis[Helper.SpcDisable] <> 0)
     ~ or a duplicate.
     doneif (tagis[Helper.FirstCopy] = 0)

     ~ You gain Knowledge (local), Sleight of Hand, Survival, and Swim as class skills.

     if (hero.childlives[skKnowLoc] = 1) then
           perform hero.child[skKnowLoc].setfocus
           perform focus.assign[Helper.ClassSkill]
           perform focus.assignstr["TradeSkill." & this.idstring]
     endif
     perform hero.child[skSleight].setfocus
     perform focus.assign[Helper.ClassSkill]
     perform focus.assignstr["TradeSkill." & this.idstring]
     perform hero.child[skSurvival].setfocus
     perform focus.assign[Helper.ClassSkill]
     perform focus.assignstr["TradeSkill." & this.idstring]
     perform hero.child[skSwim].setfocus
     perform focus.assign[Helper.ClassSkill]
     perform focus.assignstr["TradeSkill." & this.idstring]

     perform this.assign[TradeSkill.skKnowLoc]
     perform this.assign[TradeSkill.skSleight]
     perform this.assign[TradeSkill.skSurvival]
     perform this.assign[TradeSkill.skSwim]]]></eval>
    </thing>
  <thing id="sogTlSoldierOfFor" name="Soldier Of Fortune" compset="SoGTalent" description="You gain Appraise, Intimidate, Knowledge (local), and Sense Motive as class skills. When you evaluate a service, bribe, or creature’s prowess, you only need to evaluate them for 1 round rather than 3 rounds." uniqueness="useronce">
    <usesource source="pPF1e_Sph_Guile" parent="pPF1e_Sph" name="Spheres of Guile"/>
    <tag group="SoGSphere" tag="Vocation" name="Vocation" abbrev="Vocation"/>
    <tag group="SoGTlClass" tag="Talent" name="Basic Talent" abbrev="Basic Talent"/>
    <tag group="SoGTalDesc" tag="Trade" name="Trade" abbrev="Trade"/>
    <tag group="SoGTalDesc" tag="Utility" name="Utility" abbrev="Utility"/>
    <tag group="Hide" tag="Activation" name="Activation" abbrev="Activation"/>
    <eval phase="First" priority="11000"><![CDATA[~ Get out if disabled
     doneif (tagis[Helper.SpcDisable] <> 0)
     ~ or a duplicate.
     doneif (tagis[Helper.FirstCopy] = 0)

     ~ You gain Appraise, Intimidate, Knowledge (local), and Sense Motive as class skills.


     perform hero.child[skAppraise].setfocus
     perform focus.assign[Helper.ClassSkill]
     perform focus.assignstr["TradeSkill." & this.idstring]
     perform hero.child[skIntim].setfocus
     perform focus.assign[Helper.ClassSkill]
     perform focus.assignstr["TradeSkill." & this.idstring]
     if (hero.childlives[skKnowLoc] = 1) then
           perform hero.child[skKnowLoc].setfocus
           perform focus.assign[Helper.ClassSkill]
           perform focus.assignstr["TradeSkill." & this.idstring]
     endif
     perform hero.child[skSenseMot].setfocus
     perform focus.assign[Helper.ClassSkill]
     perform focus.assignstr["TradeSkill." & this.idstring]

     perform this.assign[TradeSkill.skAppraise]
     perform this.assign[TradeSkill.skIntim]
     perform this.assign[TradeSkill.skKnowLoc]
     perform this.assign[TradeSkill.skSenseMot]]]></eval>
    </thing>
  <thing id="sogTlTechnician" name="Technician" compset="SoGTalent" description="You gain Disable Device, Heal, Knowledge (dungeoneering), and Knowledge (engineering) as class skills. You are considered to be trained in any skill used against a technology-based subject. If the skill in question requires training to use even against non-technological subjects, you must still have ranks in that skill in order to gain the benefit.\n\n{b}Associated Feat{/b}: Technologist (Pathfinder Campaign Setting: Technology Guide)." uniqueness="useronce">
    <usesource source="pPF1e_Sph_Guile" parent="pPF1e_Sph" name="Spheres of Guile"/>
    <tag group="SoGSphere" tag="Vocation" name="Vocation" abbrev="Vocation"/>
    <tag group="SoGTlClass" tag="Talent" name="Basic Talent" abbrev="Basic Talent"/>
    <tag group="SoGTalDesc" tag="Trade" name="Trade" abbrev="Trade"/>
    <tag group="SoGTalDesc" tag="Utility" name="Utility" abbrev="Utility"/>
    <tag group="HasFeat" tag="fTechnolog"/>
    <tag group="Hide" tag="Activation" name="Activation" abbrev="Activation"/>
    <eval phase="First" priority="11000"><![CDATA[~ Get out if disabled
     doneif (tagis[Helper.SpcDisable] <> 0)
     ~ or a duplicate.
     doneif (tagis[Helper.FirstCopy] = 0)

     ~ You gain Disable Device, Heal, Knowledge (dungeoneering), and Knowledge (engineering) as class skills.

     perform hero.child[skDisable].setfocus
     perform focus.assign[Helper.ClassSkill]
     perform focus.assignstr["TradeSkill." & this.idstring]
     perform hero.child[skHeal].setfocus
     perform focus.assign[Helper.ClassSkill]
     perform focus.assignstr["TradeSkill." & this.idstring]
     if (hero.childlives[skKnowDun] = 1) then
           perform hero.child[skKnowDun].setfocus
           perform focus.assign[Helper.ClassSkill]
           perform focus.assignstr["TradeSkill." & this.idstring]
     endif
     if (hero.childlives[skKnowEng] = 1) then
           perform hero.child[skKnowEng].setfocus
           perform focus.assign[Helper.ClassSkill]
           perform focus.assignstr["TradeSkill." & this.idstring]
     endif

     perform this.assign[TradeSkill.skDisable]
     perform this.assign[TradeSkill.skHeal]
     perform this.assign[TradeSkill.skKnowDun]
     perform this.assign[TradeSkill.skKnowEng]]]></eval>
    </thing>
  <thing id="sogTlTrapper" name="Trapper" compset="SoGTalent" description="You gain Disable Device, Knowledge (geography), Knowledge (nature), and Survival as class skills. You can use the higher of your Dexterity or Intelligence modifiers when attempting Craft (traps) checks." uniqueness="useronce">
    <usesource source="pPF1e_Sph_Guile" parent="pPF1e_Sph" name="Spheres of Guile"/>
    <tag group="SoGSphere" tag="Vocation" name="Vocation" abbrev="Vocation"/>
    <tag group="SoGTlClass" tag="Talent" name="Basic Talent" abbrev="Basic Talent"/>
    <tag group="SoGTalDesc" tag="Trade" name="Trade" abbrev="Trade"/>
    <tag group="SoGTalDesc" tag="Utility" name="Utility" abbrev="Utility"/>
    <tag group="Helper" tag="SpecUp" name="SpecUp" abbrev="SpecUp"/>
    <eval phase="First" priority="11000"><![CDATA[~ Get out if disabled
     doneif (tagis[Helper.SpcDisable] <> 0)
     ~ or a duplicate.
     doneif (tagis[Helper.FirstCopy] = 0)

     ~ You gain Disable Device, Knowledge (geography), Knowledge (nature), and Survival as class skills.

     perform hero.child[skDisable].setfocus
     perform focus.assign[Helper.ClassSkill]
     perform focus.assignstr["TradeSkill." & this.idstring]
     if (hero.childlives[skKnowGeog] = 1) then
           perform hero.child[skKnowGeog].setfocus
           perform focus.assign[Helper.ClassSkill]
           perform focus.assignstr["TradeSkill." & this.idstring]
     endif
     if (hero.childlives[skKnowNat] = 1) then
           perform hero.child[skKnowNat].setfocus
           perform focus.assign[Helper.ClassSkill]
           perform focus.assignstr["TradeSkill." & this.idstring]
     endif
     perform hero.child[skSurvival].setfocus
     perform focus.assign[Helper.ClassSkill]
     perform focus.assignstr["TradeSkill." & this.idstring]

     perform this.assign[TradeSkill.skDisable]
     perform this.assign[TradeSkill.skKnowGeog]
     perform this.assign[TradeSkill.skKnowNat]
     perform this.assign[TradeSkill.skSurvival]]]></eval>
    <eval phase="Attr" priority="100003" index="2"><![CDATA[~ Get out if disabled
     doneif (tagis[Helper.SpcDisable] <> 0)
     ~ or a duplicate.
     doneif (tagis[Helper.FirstCopy] = 0)

     ~ You can use the higher of your Dexterity or Intelligence modifiers when attempting Craft (traps) checks.

     perform hero.childfound[skCrafTrap].assign[SkillOpt.aDEX]
     perform hero.childfound[skCrafTrap].assign[SkillOpt.aINT]]]></eval>
    </thing>
  <thing id="sogTlVirtuoso" name="Virtuoso" compset="SoGTalent" description="You gain Disguise, Knowledge (history), Knowledge (nobility), and Linguistics as class skills. Choose a single Perform skill which you have ranks in (such as Perform (dance) or Perform (sing)). You can use either Dexterity or Constitution score in place of your Charisma score when attempting Perform checks of that type." uniqueness="useronce">
    <fieldval field="usrCandid1" value="component.BaseSkill &amp; ClassSkill.Perform"/>
    <usesource source="pPF1e_Sph_Guile" parent="pPF1e_Sph" name="Spheres of Guile"/>
    <tag group="SoGSphere" tag="Vocation" name="Vocation" abbrev="Vocation"/>
    <tag group="SoGTlClass" tag="Talent" name="Basic Talent" abbrev="Basic Talent"/>
    <tag group="SoGTalDesc" tag="Trade" name="Trade" abbrev="Trade"/>
    <tag group="SoGTalDesc" tag="Utility" name="Utility" abbrev="Utility"/>
    <tag group="ChooseSrc1" tag="Hero" name="All Picks on Hero" abbrev="All Picks on Hero"/>
    <tag group="Helper" tag="SpecUp" name="SpecUp" abbrev="SpecUp"/>
    <eval phase="First" priority="11000"><![CDATA[~ Get out if disabled
     doneif (tagis[Helper.SpcDisable] <> 0)
     ~ or a duplicate.
     doneif (tagis[Helper.FirstCopy] = 0)

      ~ You gain Disguise, Knowledge (history), Knowledge (nobility), and Linguistics as class skills

      perform hero.child[skDisguise].setfocus
      perform focus.assign[Helper.ClassSkill]
      perform focus.assignstr["TradeSkill." & this.idstring]
      if (hero.childlives[skKnowHist] = 1) then
           perform hero.child[skKnowHist].setfocus
           perform focus.assign[Helper.ClassSkill]
           perform focus.assignstr["TradeSkill." & this.idstring]
      endif
      if (hero.childlives[skKnowNobl] = 1) then
           perform hero.child[skKnowNobl].setfocus
           perform focus.assign[Helper.ClassSkill]
           perform focus.assignstr["TradeSkill." & this.idstring]
      endif
      perform hero.child[skLinguist].setfocus
      perform focus.assign[Helper.ClassSkill]
      perform focus.assignstr["TradeSkill." & this.idstring]

      perform this.assign[TradeSkill.skDisguise]
      perform this.assign[TradeSkill.skKnowHist]
      perform this.assign[TradeSkill.skKnowNobl]
      perform this.assign[TradeSkill.skLinguist]]]></eval>
    <eval phase="Attr" priority="100003" index="2"><![CDATA[~ Get out if disabled
      doneif (tagis[Helper.SpcDisable] <> 0)
      ~ or a duplicate.
      doneif (tagis[Helper.FirstCopy] = 0)

      doneif (field[usrChosen1].ischosen = 0)

     ~ Choose a single Perform skill which you have ranks in (such as Perform (dance) or Perform (sing)). You can use either Dexterity or Constitution score in place of your Charisma score when attempting Perform checks of that type.

       if (field[usrChosen1].chosen.field[skRanks].value > 0) then
         perform field[usrChosen1].chosen.assign[SkillOpt.aDEX]
         perform field[usrChosen1].chosen.assign[SkillOpt.aCON]
       endif]]>
       <after name="Calc skRanks"/>
       </eval>
    </thing>
  <thing id="sogTlAdeptAdminis" name="Adept Administrator" compset="SoGTalent" description="You unlock skill leverage with Profession (barrister, clerk, scribe, or librarian), and may add half your Profession (barrister, clerk, scribe, or librarian) ranks (whichever is highest) as an insight bonus to Linguistics and Profession checks to spot a forgery, organize and deal with paperwork, and notice discrepancies in paperwork.\n\nIf you spend 1 minute reading a contract or similar legal document, you immediately become aware of the existence of any deliberate obfuscations or loopholes, although you do not know exactly what they are unless you spend 1 use of skill leverage. You also notice any secret messages present in a written page after this minute.\n\nAdditionally, you can create a forgery in 5 rounds per page, or as a plan that is revealed as a full-round action to produce up to 20 pages of one document you forged, encoded, or researched a translation for. Alternatively, you can reveal this plan to retrieve a text or document you could have legitimately acquired (either by paying for it or by succeeding at a relevant skill check to request them).\n\nIf you must attempt a skill check to acquire, translate, or forge the document, you make the attempt now. You can take 10 on the skill check.\n\nIf your campaign uses research rules, you are treated as if you had 10 ranks in the relevant skill for determining how much you reduce a library’s kp by on a successful research check." uniqueness="useronce">
    <fieldval field="usrCandid1" value="component.BaseSkill &amp; (thingid.skProfBarr | thingid.skProfCler | thingid.skProfScri | thingid.skProfLibr){br}{br}{br}{br}{br}"/>
    <tag group="SoGSphere" tag="Vocation"/>
    <tag group="SoGTlClass" tag="Talent"/>
    <tag group="SoGTalDesc" tag="Plan"/>
    <tag group="SoGTalDesc" tag="Utility"/>
    <tag group="LvNamePar" tag="AppText"/>
    <tag group="LvNamePar" tag="AppValue"/>
    <tag group="LvNamePar" tag="SignAppVal"/>
    <tag group="ChooseSrc1" tag="Hero"/>
    <bootstrap thing="abSoGSkLeverage"></bootstrap>
    <eval phase="First"><![CDATA[~ Get out if disabled
     doneif (tagis[Helper.SpcDisable] <> 0)
     ~ or a duplicate.
     doneif (tagis[Helper.FirstCopy] = 0)
     ~ or not chosen.
     doneif (field[usrChosen1].ischosen = 0)

     perform hero.childfound[sogTlSpVocation].setfocus
     doneif (state.isfocus = 0)
     perform focus.assignstr["SkLeverage." & field[usrChosen1].chosen.idstring]]]></eval>
    <eval phase="PostLevel" priority="9500" index="2"><![CDATA[~ Get out if disabled
     doneif (tagis[Helper.SpcDisable] <> 0)
     ~ or a duplicate.
     doneif (tagis[Helper.FirstCopy] = 0)

     var bon as number
     var fin as number
     foreach pick in hero from BaseSkill where "thingid.skProfBarr | thingid.skProfCler | thingid.skProfLibr | thingid.skProfScri"
       fin = maximum(fin,round(eachpick.field[skRanks].value/2,0,-1))
     nexteach

     doneif (fin <= 0)
     field[abValue].value = fin
     field[abText].text = "insight bonus"

     ~ insight bonus to Linguistics and Profession checks to spot a forgery, organize and deal with paperwork, and notice discrepancies in paperwork.

     foreach pick in hero from BaseSkill where "thingid.skProfBarr | thingid.skProfCler | thingid.skProfLibr | thingid.skProfScri | thingid.skLinguist"
       bon = fin - eachpick.field[BonInsight].value
       if (bon > 0) then
         #situational[eachpick, "+" & bon & " spot a forgery, organize and deal with paperwork, and notice discrepancies in paperwork.", field[thingname].text]
       endif
     nexteach]]>
     <after name="Calc skRanks"/>
     </eval>
    </thing>
  <thing id="sogTlAdeptAdventu" name="Adept Adventurer" compset="SoGTalent" description="You unlock skill leverage with one of the Profession skills listed below. Additionally, you gain the following benefits if you have unlocked skill leverage with the appropriate Profession skill:\n\n    * {b}Profession (adventurer or monster slayer){/b}: You can use Profession (adventurer or monster slayer) instead of a Knowledge check to identify the abilities and weaknesses of creatures, and are considered trained when making such checks. You can spend 1 use of skill leverage when making such a check to roll it twice and take the highest result.\n    * {b}Profession (soldier){/b}: You increase any bonus due to battlefield positioning (such as flanking, higher ground, or cover) by 1, and whenever such a benefit would end, you retain the benefits of that bonus until the end of your next turn." uniqueness="useronce">
    <fieldval field="usrCandid1" value="component.BaseSkill &amp; (thingid.skProfRMonsSlay | thingid.skMHAdvent | thingid.skProfSold)"/>
    <tag group="SoGSphere" tag="Vocation"/>
    <tag group="SoGTlClass" tag="Talent"/>
    <tag group="ChooseSrc1" tag="Hero"/>
    <bootstrap thing="abSoGSkLeverage"></bootstrap>
    <eval phase="PostLevel" priority="9500"><![CDATA[~ Get out if disabled
     doneif (tagis[Helper.SpcDisable] <> 0)
     ~ or a duplicate.
     doneif (tagis[Helper.FirstCopy] = 0)
     ~ or not chosen.
     doneif (field[usrChosen1].ischosen = 0)

     perform hero.childfound[sogTlSpVocation].setfocus
     doneif (state.isfocus = 0)
     perform focus.assignstr["SkLeverage." & field[usrChosen1].chosen.idstring]]]></eval>
    </thing>
  <thing id="sogTlAdeptBuilder" name="Adept Builder" compset="SoGTalent" description="Whenever you supervise or participate in the construction of a building, you reduce the raw material costs by 10%, including build point and capital costs.\n\nYou unlock skill leverage with one of the Profession skills listed below. Additionally, you gain the following benefits if you have unlocked skill leverage with the appropriate Profession skill:\n\n    * {b}Profession (architect or dungeoneer){/b}: You can spend 10 minutes (or reveal this as a plan) observing a building to gain a rough impression of the layout of the building itself, including the general purpose of the rooms contained within, and whether or not there are any hidden rooms within the building and their rough location (but not how to access the room itself). You can spend 1 use of skill leverage to use this ability in only 1 minute.\n    * {b}Profession (engineer or siege engineer){/b}: As a standard action that provokes attacks of opportunity, you can attempt to take control of a construct that is adjacent to you by succeeding a Profession (engineer or siege engineer) check (DC 15 + the construct's Hit Dice). On a success, the creature becomes staggered for 1 minute. If the construct has fewer Hit Dice than the ranks you possess in Profession (engineer or siege engineer), the construct also becomes under your control for 1 minute. The construct receives a Will saving throw at the end of their turn each round they remain staggered (or controlled) this way, removing the effect on a successful save." uniqueness="useronce">
    <fieldval field="usrCandid1" value="component.BaseSkill &amp; (thingid.skProfArch | thingid.skProfRDungeoneer | thingid.skProfEngi | thingid.skProfSieg)"/>
    <tag group="SoGSphere" tag="Vocation"/>
    <tag group="SoGTlClass" tag="Talent"/>
    <tag group="ChooseSrc1" tag="Hero"/>
    <bootstrap thing="abSoGSkLeverage"></bootstrap>
    <eval phase="PostLevel" priority="1500"><![CDATA[~ Get out if disabled
     doneif (tagis[Helper.SpcDisable] <> 0)
     ~ or a duplicate.
     doneif (tagis[Helper.FirstCopy] = 0)
     ~ or not chosen.
     doneif (field[usrChosen1].ischosen = 0)

     perform hero.childfound[sogTlSpVocation].setfocus
     doneif (state.isfocus = 0)
     perform focus.assignstr["SkLeverage." & field[usrChosen1].chosen.idstring]]]></eval>
    </thing>
  <thing id="sogTlAdeptCulinar" name="Adept Culinarian" compset="SoGTalent" description="You can spend 1 hour to prepare a meal (for Profession (baker or cook)) or drinks (for Profession (brewer)) for a number of creatures equal to 3 + 1/2 your ranks in the relevant Profession skill; creatures who consume the meal or drink over the course of 10 minutes gain an amount of temporary hit points equal to the ranks you possess in the associated Profession skill, in addition to a +2 alchemical bonus to saving throws against the sickened and nauseated conditions for 8 hours. If you can already prepare a meal in a similar fashion (such as the courser’s forage ability), you can apply this talent’s benefits to the prepared meal.\n\nAdditionally, the DC of any ingested poisons you placed within such food or drink increases by 1. These bonuses increase by +2/+1 respectively for every 5 ranks in Profession (baker, brewer, or cook) you possess (whichever is higher).\n\nThese benefits are not granted to magical or alchemical food or drink." uniqueness="useronce">
    <tag group="SoGSphere" tag="Vocation"/>
    <tag group="SoGTlClass" tag="Talent"/>
    <tag group="LvNameApp" tag="AppText"/>
    <tag group="LvNameApp" tag="AppValue"/>
    <tag group="LvNameApp" tag="SignAppVal"/>
    <tag group="LvNamePar" tag="AppText2"/>
    <tag group="LvNamePar" tag="AppValue2"/>
    <tag group="LvNamePar" tag="IncRange"/>
    <tag group="LvNamePar" tag="SignAppVal"/>
    <eval phase="PostLevel" priority="9500"><![CDATA[~ Get out if disabled
     doneif (tagis[Helper.SpcDisable] <> 0)
     ~ or a duplicate.
     doneif (tagis[Helper.FirstCopy] = 0)

     var bon as number
     foreach pick in hero from BaseSkill where "thingid.skProfBake | thingid.skProfBrew | thingid.skProfCook"
       bon = maximum(bon,eachpick.field[skRanks].value)
     nexteach

     ~ Creatures +2 + 1 per 2 ranks
     field[abValue3].value = 3 + round(bon/2,0,-1)
     field[abRangText].text = signed(field[abValue3].value) & " creatures"

     ~ Alchemical Bonus +2 +2 per 5 ranks
     field[abValue].value = 2 + 2 * round(bon/5,0,-1)
     field[abText].text = "save"

     ~ Poison DC +1 +1 per 5 ranks
     field[abValue2].value = 1 + 1 * round(bon/5,0,-1)
     field[abText2].text = "DC"]]>
     <after name="Calc skRanks"/>
     </eval>
    </thing>
  <thing id="sogTlAdeptHandler" name="Adept Handler" compset="SoGTalent" description="You only need to spend 1 day to train an animal for the riding purpose (learning the tricks come, heel, and stay), or you may spend 1 use of skill leverage to reduce this to 4 hours. This general purpose does not count towards the animal’s usual maximum of tricks or general purposes they may learn. You halve the time required to teach an animal a trick or general purpose.\n\nAdditionally, when using Handle Animal to command an animal to perform a task or trick, you may do so as a standard action to command a number of animals that can perceive you equal to your ranks in Profession (shepherd or stable master)." uniqueness="useronce">
    <tag group="SoGSphere" tag="Vocation"/>
    <tag group="SoGTlClass" tag="Talent"/>
    <tag group="SoGTalDesc" tag="Utility"/>
    </thing>
  <thing id="sogTlAdeptHunter" name="Adept Hunter" compset="SoGTalent" description="You unlock skill leverage with one of the Profession skills listed below. Additionally, you gain the following benefits if you have unlocked skill leverage with the appropriate Profession skill:\n\n    * {b}Profession (butcher){/b}: If you would successfully damage a creature while inside them (such as from being swallowed whole), you deal an additional amount of damage equal to 1/2 your ranks in Profession (butcher); this damage is multiplied by a critical hit. Additionally, once per round whenever you confirm a critical hit, the weapon damage of the attack (but no other damage dice rolled) is maximized, and the target suffers 1 point of bleed damage.\n    * {b}Profession (fisherman){/b}: You gain tremorsense, except only allowing you to detect anything in contact with the same body of water as you. The range is 10 feet, or 20 feet if you are holding a fishing pole or a weapon from the spears fighter weapon group and the object is touching the water.\n    * {b}Profession (trapper){/b}: You can spend 1 minute with a trap you have created or discovered (and can handle safely) to improve it, increasing the saving throw to avoid it by 2, and the DC to notice or disable the trap by an amount equal to 1/2 your ranks in Profession (trapper)." uniqueness="useronce">
    <fieldval field="usrCandid1" value="component.BaseSkill &amp; (thingid.skProfTrap | thingid.skProfFish | thingid.skProfButc)"/>
    <tag group="SoGSphere" tag="Vocation"/>
    <tag group="SoGTlClass" tag="Talent"/>
    <tag group="SbNameApp" tag="AppText2"/>
    <tag group="SbNameApp" tag="AppValue2"/>
    <tag group="SbNameApp" tag="SignAppVal"/>
    <tag group="SbNamePar" tag="AppText"/>
    <tag group="SbNamePar" tag="AppValue"/>
    <tag group="ChooseSrc1" tag="Hero"/>
    <bootstrap thing="abSoGSkLeverage"></bootstrap>
    <eval phase="PostLevel" priority="1500"><![CDATA[~ Get out if disabled
     doneif (tagis[Helper.SpcDisable] <> 0)
     ~ or a duplicate.
     doneif (tagis[Helper.FirstCopy] = 0)
     ~ or not chosen.
     doneif (field[usrChosen1].ischosen = 0)

     perform hero.childfound[sogTlSpVocation].setfocus
     doneif (state.isfocus = 0)
     perform focus.assignstr["SkLeverage." & field[usrChosen1].chosen.idstring]]]></eval>
    <eval phase="PostLevel" priority="9500" index="2"><![CDATA[~ Get out if disabled
     doneif (tagis[Helper.SpcDisable] <> 0)
     ~ or a duplicate.
     doneif (tagis[Helper.FirstCopy] = 0)

     perform hero.childfound[skProfButc].setfocus
     if (state.isfocus <> 0) then
       if (focus.tagis[SkLeverage.?] <> 0) then
         ~ Butcher Damage 1/2 your ranks
         field[abValue].value = round(focus.field[skRanks].value/2,0,-1)
         field[abText].text = "damage"
       endif
     endif
     perform state.clearfocus

     perform hero.childfound[skProfTrap].setfocus
     if (state.isfocus <> 0) then
       if (focus.tagis[SkLeverage.?] <> 0) then
         ~ Trapper save/DC 1/2 your ranks
         field[abValue2].value = round(focus.field[skRanks].value/2,0,-1)
         field[abText2].text = "save/DC"
       endif
     endif]]>
     <after name="Calc skRanks"/>
     </eval>
    </thing>
  <thing id="sogTlAdeptTrader" name="Adept Trader" compset="SoGTalent" description="You unlock skill leverage with one of the Profession skills listed below. Additionally, you gain the following benefits if you have unlocked skill leverage with the appropriate Profession skill:\n\n    * {b}Profession (driver, pilot, or sailor){/b}: You may use Profession (driver, pilot, or sailor) for any driving check, and may make an accelerate, decelerate, or turn action as a move action instead of a standard action. Additionally, when turning a vehicle, you reduce the DC required to do so by 5.\n    * {b}Profession (merchant){/b}: Whenever you purchase an item that costs 250 gp or less, you can buy it at 90% of the market price. At 4 ranks in Profession (merchant), this increases to 500 gp; this gp limit is multiplied by four for every 4 ranks thereafter (2,000 gp at 8 ranks, 8,000 gp at 12 ranks, and so on).\n    * {b}Profession (porter){/b}: You add 1/2 your ranks in Profession (porter) to your Strength score when determining your carrying capacity. Additionally, whenever you are carrying a medium or heavy load, you reduce the check penalty (and increase the maximum Dexterity bonus allowed) by 2, and may move at your normal speed while carrying a medium load." uniqueness="useronce">
    <fieldval field="usrCandid1" value="component.BaseSkill &amp; (thingid.skProfDriv | thingid.skMHPilot | thingid.skProfSail | thingid. skProfMerc | thingid. skProfPort)"/>
    <tag group="SoGSphere" tag="Vocation"/>
    <tag group="SoGTlClass" tag="Talent"/>
    <tag group="SbNameApp" tag="AppText2"/>
    <tag group="SbNameApp" tag="AppValue2"/>
    <tag group="SbNameApp" tag="SignAppVal"/>
    <tag group="SbNamePar" tag="AppText"/>
    <tag group="SbNamePar" tag="AppValue"/>
    <tag group="ChooseSrc1" tag="Hero"/>
    <bootstrap thing="abSoGSkLeverage"></bootstrap>
    <eval phase="PostLevel" priority="1500"><![CDATA[~ Get out if disabled
     doneif (tagis[Helper.SpcDisable] <> 0)
     ~ or a duplicate.
     doneif (tagis[Helper.FirstCopy] = 0)
     ~ or not chosen.
     doneif (field[usrChosen1].ischosen = 0)

     perform hero.childfound[sogTlSpVocation].setfocus
     doneif (state.isfocus = 0)
     perform focus.assignstr["SkLeverage." & field[usrChosen1].chosen.idstring]]]></eval>
    <eval phase="PostLevel" priority="9500" index="2"><![CDATA[~ Get out if disabled
     doneif (tagis[Helper.SpcDisable] <> 0)
     ~ or a duplicate.
     doneif (tagis[Helper.FirstCopy] = 0)

     var bon as number
     perform hero.childfound[skProfMerc].setfocus
     if (state.isfocus <> 0) then
       if (focus.tagis[SkLeverage.?] <> 0) then
         var gp as number
         bon = round(focus.field[skRanks].value/4,0,-1)
         if (bon = 0) then
           gp = 250
         elseif (bon = 1) then
           gp = 500
         else
           ~ f(x) = 2000 * 4^{x - 2}
           bon -= 1
           gp = 2000 * power(4, bon)
         endif
         field[abValue].value = gp
         field[abText].text = "gp"
       endif
     endif
     perform state.clearfocus

     perform hero.childfound[skProfPort].setfocus
     if (state.isfocus <> 0) then
       if (focus.tagis[SkLeverage.?] <> 0) then
         bon = round(focus.field[skRanks].value/2,0,-1)
         herofield[tEncumSTR].value += bon
         herofield[tEncMedACP].value += 2
         herofield[tEncHvyACP].value += 2
         herofield[tEncMedMax].value += 2
         herofield[tEncHvyMax].value += 2
         field[abValue2].value = bon
         field[abText2].text = "encumbrance strength"
         ~ Don't make us sturdy if we are equipping medium/heavy armor.
         doneif (hero.tagexpr[Hero.MedArmor | Hero.HeavyArmor] <> 0)
         ~ Carrying a Medium load is ok
         perform hero.assign[Hero.Sturdy]
       endif
     endif]]>
     <after name="Calc skRanks"/>
     </eval>
    </thing>
  <thing id="sogTlIndustriousW" name="Industrious Worker" compset="SoGTalent" description="When using a skill check to earn income (such as Craft, Perform, or Profession), you earn an additional 50%; for every 5 ranks you possess in the associated skill, you earn an additional 50%. For example, if you earn 6 silver pieces from an enjoyable performance, you earn 9 silver pieces instead.\n\nIf the skill check was used to assist an establishment that provides mundane services (such as waiting tables at an inn, performing at a tavern, etc.), the quality of your performance provides the establishment more income, and in exchange they offer you routine services for free (such as free meals or a free room or cabin—but not the best available).\n\nIf you are using the Downtime rules (Pathfinder Roleplaying Game: Ultimate Campaign), you gain a +2 insight bonus to any skill checks attempted to earn capital. Additionally, you treat the spending limit of Goods, Influence, and Labor within a settlement as being 25% higher." uniqueness="useronce">
    <tag group="SoGSphere" tag="Vocation"/>
    <tag group="SoGTlClass" tag="Talent"/>
    <tag group="SoGTalDesc" tag="Utility"/>
    </thing>
  <thing id="sogTlSkillTenacit" name="Skill Tenacity" compset="SoGTalent" description="When you gain this talent, choose one skill that you have unlocked skill leverage with. After you spend skill leverage to use change tactics with a skill check of that type, you can choose to discard the extra die in order to reroll the d20. If you do, you must keep the new d20 result, even if it is lower.\n\nYou may select this talent multiple times, each time selecting an additional skill that you have unlocked skill leverage with.">
    <fieldval field="usrCandid1" value="component.BaseSkill &amp; SkLeverage.?"/>
    <tag group="SoGSphere" tag="Vocation"/>
    <tag group="SoGTlClass" tag="Talent"/>
    </thing>
  <thing id="sogTlVersatileLev" name="Versatile Leverage (Background)" compset="SoGTalent" description="Choose three skills that are class skills for you, at least one of which must be a background skill. You unlock skill leverage with these skills.\n\nYou may select this talent multiple times, each time choosing three additional skills.\n\n{b}Note{/b}: Choose the background skill with this thing.">
    <fieldval field="usrCandid1" value="component.BaseSkill &amp; Helper.ClassSkill &amp; Helper.BackSkill"/>
    <tag group="SoGSphere" tag="Vocation"/>
    <tag group="SoGTlClass" tag="Talent"/>
    <tag group="SoGTalDesc" tag="Utility"/>
    <tag group="ChooseSrc1" tag="Hero"/>
    <tag group="User" tag="NoAutoName"/>
    <bootstrap thing="sogTlVersatileLeH">
      <autotag group="Helper" tag="Free"/>
      </bootstrap>
    <eval phase="PostLevel" priority="1500"><![CDATA[~ Get out if disabled
     doneif (tagis[Helper.SpcDisable] <> 0)
     ~ or not chosen.
     doneif (field[usrChosen1].ischosen = 0)

     perform hero.childfound[sogTlSpVocation].setfocus
     doneif (state.isfocus = 0)

     ~ Assign to this, so I can use in validation.
     perform assignstr["SkLeverage." & field[usrChosen1].chosen.idstring]
     perform focus.pushtags[SkLeverage.?]]]></eval>
    <evalrule phase="Final" priority="2147483647" message="You may not duplicate skills or have missing skill choices." summary="You may not duplicate skills or have missing skill choices."><![CDATA[     @valid = 0
     validif (tagis[Helper.SpcDisable] <> 0)
     ~ or not chosen.
     doneif (field[usrChosen1].ischosen = 0)
     foreach pick in hero from SoGTalent where "thingid." & idstring

       if (eachpick.uniqindex <> this.uniqindex) then
         if (eachpick.intersect[SkLeverage,SkLeverage] <> 0) then
           done
         endif
       endif
     nexteach

     @valid = 0
     @message = "The first choice must be a background skill." 
     doneif (field[usrChosen1].chosen.tagis[Helper.BackSkill] = 0)

     ~ or less than 3 unique SkLeverage.? tags
     @message = "Requires at least 3 skills, including the 2 on the second line." 
     doneif (tagunique[SkLeverage.?] < 3)

     @valid = 1]]></evalrule>
    </thing>
  <thing id="sogTlTeacher" name="Teacher" compset="SoGTalent" description="When you aid another’s skill check for a skill you are trained in, you can grant the benefit to an additional ally or increase the aid another bonus by 1. You may increase the bonus by an additional 1 or select an additional ally for every 5 ranks you possess in that skill.\n\nIf you spend 1 use of skill leverage on a skill check to aid another using a skill you have unlocked skill leverage with, you can grant each aided character a free use of skill leverage on their skill instead of granting a bonus. They need not have unlocked skill leverage with the skill to use this free skill leverage on the aided check.">
    <fieldval field="usrCandid1" value="component.BaseSkill &amp; SkLeverage.?"/>
    <tag group="SoGSphere" tag="Vocation"/>
    <tag group="SoGTlClass" tag="Talent"/>
    <tag group="SoGTalDesc" tag="Utility"/>
    </thing>
  <thing id="sogTlVersatileLeH" name="Versatile Leverage (others)" compset="SoGTalent" description="{b}Note{/b}: Choose two skills that are class skills for you with this thing.">
    <fieldval field="usrCandid1" value="component.BaseSkill &amp; Helper.ClassSkill"/>
    <fieldval field="usrCandid2" value="component.BaseSkill &amp; Helper.ClassSkill"/>
    <usesource source="pPF1e_Sph_Guile" parent="pPF1e_Sph" name="Spheres of Guile"/>
    <tag group="SphOfGuil" tag="Helper" name="Helper" abbrev="Helper"/>
    <tag group="SoGSphere" tag="Vocation" name="Vocation" abbrev="Vocation"/>
    <tag group="SoGTlClass" tag="Talent" name="Basic Talent" abbrev="Basic Talent"/>
    <tag group="SoGTalDesc" tag="Utility"/>
    <tag group="ChooseSrc1" tag="Hero" name="All Picks on Hero" abbrev="All Picks on Hero"/>
    <tag group="ChooseSrc2" tag="Hero" name="All Picks on Hero" abbrev="All Picks on Hero"/>
    <tag group="Helper" tag="SpecUp" name="SpecUp" abbrev="SpecUp"/>
    <tag group="Hide" tag="Activation" name="Activation" abbrev="Activation"/>
    <tag group="User" tag="NoAutoName" name="NoAutoName" abbrev="NoAutoName"/>
    <eval phase="First" priority="11000"><![CDATA[~ Get out if disabled
      doneif (isroot = 0)
      doneif (root.tagis[Helper.SpcDisable] <> 0)

     ~ If root was picked by a Utility Start, we pull that tag to sort adjacent.
     perform root.pulltags[SoGTlClass.InitTalent]

      doneif (field[usrChosen1].ischosen = 0)
      doneif (field[usrChosen2].ischosen = 0)

     ~ Assign to this, so I can use in validation.
     perform assignstr["SkLeverage." & field[usrChosen1].chosen.idstring]
     perform assignstr["SkLeverage." & field[usrChosen2].chosen.idstring]

     ~ Push to root
     perform root.pushtags[SkLeverage.?]]]></eval>
    <evalrule phase="Final" priority="2147483647" message="You may not duplicate skills or missing skill choices." summary="You may not duplicate skills or missing skill choices."><![CDATA[     @valid = 0
     doneif (isroot = 0)
     validif (root.tagis[Helper.SpcDisable] <> 0)
     ~ or not chosen.
     doneif (field[usrChosen1].ischosen = 0)
     doneif (field[usrChosen2].ischosen = 0)

     ~ or less than 2 unique SkLeverage.? tags on the second line.
     @message = "Requires at least 2 skills on the second line of choosers."
     doneif (tagunique[SkLeverage.?] < 2)

     @valid = 1]]></evalrule>
    </thing>
  <thing id="sogTlSkillConfide" name="Skill Confidence" compset="SoGTalent" description="{b}Prerequisites{/b}: 5 ranks in each of the chosen skills.\n\nChoose two skills that are class skills for you other than Use Magic Device, at least one of which must be a background skill. You may always take 10 on these skills even when distracted or in danger.\n\nYou may select this talent multiple times, each time selecting two new skills.">
    <fieldval field="usrCandid1" value="component.BaseSkill &amp; Helper.ClassSkill &amp; !thingid.skUseMagic"/>
    <fieldval field="usrCandid2" value="component.BaseSkill"/>
    <usesource source="pPF1e_Sph_Guile" parent="pPF1e_Sph" name="Spheres of Guile"/>
    <tag group="SoGSphere" tag="Vocation" name="Vocation" abbrev="Vocation"/>
    <tag group="SoGTlClass" tag="Talent" name="Basic Talent" abbrev="Basic Talent"/>
    <tag group="ChooseSrc1" tag="Hero" name="All Picks on Hero" abbrev="All Picks on Hero"/>
    <tag group="ChooseSrc2" tag="Hero" name="All Picks on Hero" abbrev="All Picks on Hero"/>
    <tag group="Helper" tag="SpecUp" name="SpecUp" abbrev="SpecUp"/>
    <tag group="Hide" tag="Activation" name="Activation" abbrev="Activation"/>
    <tag group="User" tag="NoAutoName" name="NoAutoName" abbrev="NoAutoName"/>
    <eval phase="First" priority="11000"><![CDATA[~ Get out if disabled
      doneif (tagis[Helper.SpcDisable] <> 0)

      doneif (field[usrChosen1].ischosen = 0)
      doneif (field[usrChosen2].ischosen = 0)

      perform field[usrChosen1].chosen.setfocus
      perform focus.assign[Helper.ClassSkill]
      perform focus.assignstr["TradeSkill." & this.idstring]
      perform focus.pulltags[Target.?]
      #situational[focus, "may take 10 even when distracted or in danger.", field[thingname].text]
      perform this.assignstr["TradeSkill." & focus.idstring]

      perform field[usrChosen2].chosen.setfocus
      perform focus.assign[Helper.ClassSkill]
      perform focus.assignstr["TradeSkill." & this.idstring]
      perform focus.pulltags[Target.?]
      #situational[focus, "may take 10 even when distracted or in danger.", field[thingname].text]
      perform this.assignstr["TradeSkill." & focus.idstring]]]></eval>
    <evalrule phase="Final" priority="2147483647" message="You may not duplicate skills or have missing skill choices." summary="You may not duplicate skills or have missing skill choices."><![CDATA[     @valid = 0
     validif (tagis[Helper.SpcDisable] <> 0)
     ~ or not chosen.
     doneif (field[usrChosen1].ischosen = 0)
     doneif (field[usrChosen2].ischosen = 0)

     foreach pick in hero from SoGTalent where "thingid." & idstring
       if (eachpick.uniqindex <> this.uniqindex) then
         if (eachpick.intersect[Target,Target] <> 0) then
           done
         endif
       endif
     nexteach

     @valid = 0
     @message = "The first choice must be a background skill."
     doneif (field[usrChosen1].chosen.tagis[Helper.BackSkill] = 0)

     ~ or less than 2 unique Target.? tags
     @message = "Requires at least 2 skills."
     doneif (tagunique[Target.?] < 2)

     @message = "5 ranks in " & field[usrChosen1].chosen.field[name].text & " required."
     doneif (field[usrChosen1].chosen.field[skRanks].value < 5)
     @message = "5 ranks in " & field[usrChosen2].chosen.field[name].text & " required."
     doneif (field[usrChosen2].chosen.field[skRanks].value < 5)

     @valid = 1]]>
     <after name="Calc skRanks"/></evalrule>
    </thing>
  <thing id="sogTlWorkingFolk" name="Working Folk" compset="SoGTalent" description="You possess specific job skills and keep them honed. When you gain this talent, you gain ranks in a single Artistry or Profession skill of your choice equal to your total Hit Dice; whenever you gain a permanent Hit Die (generally, when you gain a level) you gain an additional rank. If you already possess ranks in the chosen skill, you may immediately retrain them. You do not get to retrain when temporarily gaining this talent. You unlock skill leverage with this skill.\n\nYou can take this talent multiple times, choosing a different skill each time.">
    <fieldval field="usrCandid1" value="component.BaseSkill &amp; (Helper.SkCatProf | Helper.SkCatArt | ClassSkill.Profession | ClassSkill.Artistry)"/>
    <usesource source="pPF1e_Sph_Guile" parent="pPF1e_Sph" name="Spheres of Guile"/>
    <tag group="SoGSphere" tag="Vocation" name="Vocation" abbrev="Vocation"/>
    <tag group="SoGTlClass" tag="Talent" name="Basic Talent" abbrev="Basic Talent"/>
    <tag group="SoGTalDesc" tag="Utility"/>
    <tag group="ChooseSrc1" tag="Hero" name="All Picks on Hero" abbrev="All Picks on Hero"/>
    <tag group="HasFeat" tag="fSkillFoc" name="Skill Focus" abbrev="Skill Focus"/>
    <eval phase="PostLevel" priority="2000" name="Change Skill Leverage"><![CDATA[     doneif (tagis[Helper.SpcDisable] <> 0)
     doneif (field[usrChosen1].ischosen = 0)

     perform hero.findchild[SoGTalent,"SoGSphere.Vocation & SoGTlClass.GainSphere"].setfocus
     doneif (state.isfocus = 0)

     perform focus.assignstr["SkLeverage." & field[usrChosen1].chosen.idstring]

     ~ Assign here to track duplicate skill assigned.
     perform assignstr["SkLeverage." & field[usrChosen1].chosen.idstring]]]>
     <after name="Assign initial Skill Leverage"/>
     </eval>
    <eval phase="PostLevel" priority="15000" name="Skill Acuity Skill Focus">~set our focus to the selected pick
      call fTargetFoc
      doneif (state.isfocus = 0)

      ~ Assign a tag so we have a talent that is associated with skill focus feat.
      perform focus.assign[Helper.SkillFocus]
      <after name="Suppress Innate Skills"/></eval>
    <eval phase="PreLevel" priority="4000"><![CDATA[~ Get out if disabled
     doneif (tagis[Helper.SpcDisable] <> 0)

      call fTargetFoc
      doneif (state.isfocus = 0)

      ~Now give the skill ranks
      focus.field[skItem].value += hero.tagcount[Hero.HitDice]]]>
      <before name="Calc skRanks"/>
      </eval>
    <evalrule phase="Final" priority="2147483647" index="3" message="You may only have Working Folk applied to a skill once" summary="You may only have Working Folk applied to a skill once"><![CDATA[     @valid = 0
     validif (tagis[Helper.SpcDisable] <> 0)
     ~ or not chosen.
     doneif (field[usrChosen1].ischosen = 0)

     foreach pick in hero from SoGTalent where "thingid." & idstring
       if (eachpick.uniqindex <> this.uniqindex) then
         if (eachpick.intersect[SkLeverage,SkLeverage] <> 0) then
           done
         endif
       endif
     nexteach

     @valid = 1]]></evalrule>
    </thing>
  <thing id="sogTlSkillAcuity" name="Skill Acuity" compset="SoGTalent" description="Choose one skill that is a class skill for you. You gain an insight bonus to checks attempted with that skill equal to 1/2 your ranks in that skill, rounded down (minimum 1) and unlock skill leverage with that skill.\n\nThis talent may be selected multiple times, each time applying to a different skill.\n\n{b}Associated Feat{/b}: Skill Focus (chosen skill).">
    <fieldval field="usrCandid1" value="component.BaseSkill &amp; ClassSkill.?"/>
    <usesource source="pPF1e_Sph_Guile"/>
    <tag group="SoGSphere" tag="Vocation"/>
    <tag group="SoGTlClass" tag="Talent"/>
    <tag group="ChooseSrc1" tag="Hero"/>
    <tag group="HasFeat" tag="fSkillFoc"/>
    <eval phase="PostLevel" priority="9000"><![CDATA[~ Get out if disabled
     doneif (tagis[Helper.SpcDisable] <> 0)

      call fTargetFoc
      doneif (state.isfocus = 0)

      ~ 1/2 your ranks in that skill, rounded down (minimum 1)
      field[abValue].value = maximum(1,round(focus.field[skRanks].value/2,0,-1))
      #applybonus[BonInsight,focus,field[abValue].value]]]>
      <after name="Calc skRanks"/>
      </eval>
    <eval phase="PostLevel" priority="2000" name="Change Skill Leverage"><![CDATA[     doneif (tagis[Helper.SpcDisable] <> 0)
     doneif (field[usrChosen1].ischosen = 0)

     perform hero.findchild[SoGTalent,"SoGSphere.Vocation & SoGTlClass.GainSphere"].setfocus
     doneif (state.isfocus = 0)

     perform focus.assignstr["SkLeverage." & field[usrChosen1].chosen.idstring]

          ~ Assign here to track duplicate skill assigned.
     perform assignstr["SkLeverage." & field[usrChosen1].chosen.idstring]]]>
     <after name="Assign initial Skill Leverage"/>
     </eval>
    <eval phase="PostLevel" priority="15000" name="Skill Acuity Skill Focus">~set our focus to the selected pick
      call fTargetFoc
      doneif (state.isfocus = 0)

      ~ Assign a tag so we have a talent that is associated with skill focus feat.
      perform focus.assign[Helper.SkillFocus]
      <after name="Suppress Innate Skills"/></eval>
    <evalrule phase="Final" priority="99999999999999" index="3" message="You may only have Skill Acuity applied to a skill once"><![CDATA[     @valid = 0
     validif (tagis[Helper.SpcDisable] <> 0)
     ~ or not chosen.
     doneif (field[usrChosen1].ischosen = 0)

     foreach pick in hero from SoGTalent where "thingid." & idstring
       if (eachpick.uniqindex <> this.uniqindex) then
         if (eachpick.intersect[SkLeverage,SkLeverage] <> 0) then
           done
         endif
       endif
     nexteach

     @valid = 1]]></evalrule>
    </thing>
  <thing id="cVigSkilledSoc" name="Skilled Socialite" compset="CustomSpec" description="A vigilante can select a [utility] talent in place of a social talent. He may select this social talent multiple times.\n\nAuthor Note: Its intended to be able to take any utility talent from other spheres if using the variant rule [LotS Utility Talents in Non-Skill Spheres]." summary="Select a [utility] talent in place of a social talent.">
    <comment>Hydronz's (the author) clarified how this works on Discord: https://discord.com/channels/533773201549819925/533774611415040010/1317126790048776262</comment>
    <fieldval field="usrCandid1" value="component.DDSTalent &amp; (SoGTalDesc.Utility | SoGTlClass.Expanded)"/>
    <usesource source="pPF1e_Sph_Guile"/>
    <tag group="SpecSource" tag="cHelpVig" name="Vigilante" abbrev="Vigilante"/>
    <tag group="ChooseSrc1" tag="Hero"/>
    <tag group="AbilType" tag="Extra" name="Extraordinary Ability" abbrev="Ex"/>
    <tag group="Helper" tag="Secondary" name="Secondary" abbrev="Secondary"/>
    <tag group="User" tag="NoAutoName"/>
    <tag group="abAction" tag="None" name="No action" abbrev="None"/>
    <tag group="abCategory" tag="VigSocTal" name="Vigilante Social Talent" abbrev="Vigilante Social Talent"/>
    <eval phase="First" name="Add a Skilled Socialite Utility Talent"><![CDATA[~ Add one [utility] talent.
     doneif (tagis[Helper.SpcDisable] <> 0)

     debug "🛠 Adding one [utility] talent from Skilled Socialite."
     hero.findchild[Resource, "thingid.resSGUtilTal"].field[resMax].value += 1

     doneif (hero.tagis[source.pPF1e_ExpUtil] = 0)

     ~ Also add here if enabled.
     debug "🛠 Adding one Expanded [utility] talent from Skilled Socialite."
     hero.findchild[Resource, "thingid.resSGExUtilTal"].field[resMax].value += 1]]>
     <before name="Increment talents spent if applicable"/>
     <before name="Increment talents spent if applicable SoG"/>
     </eval>
    <eval phase="First" name="Disable the utility talent if not in social persona."><![CDATA[     ~ do nothing if disabled
     doneif (tagis[Helper.SpcDisable] <> 0)

     ~ done if nothing chosen
     doneif (field[usrChosen1].ischosen = 0)

     perform hero.findchild[Ability,"Ability.cVigIDHelp & !Helper.SpcDisable"].setfocus
     doneif (state.isfocus = 0)

     ~ done if in Social persona.
     doneif (focus.field[usrIndex].value = 0) 

     perform field[usrChosen1].chosen.setfocus
     doneif (state.isfocus = 0)

     perform focus.assign[Helper.SpcDisable]]]></eval>
    <evalrule phase="Final" priority="99999999999999" message="You must select a [utility] talent with the bonus talent provided by the Skilled Socialite.\n\nWhen the optional rule {b}Utility Talents in Non-Skill Spheres{/b} is enabled, this enables Expaneded Utility Talents.">~ confirm our selection is a [utility] talent
     @valid = 0
     doneif (field[usrChosen1].ischosen = 0)
     doneif (field[usrChosen1].chosen.tagis[SoGTalDesc.Utility] + field[usrChosen1].chosen.tagis[TalentDesc.Utility] = 0)

     @valid = 1</evalrule>
    </thing>
  <thing id="sogTlUtilStart" name="Utility Start" compset="SoGTalent" description="This meta talent supports several different ways of taking a skill sphere as a [utility] talent. Most skill spheres cannot otherwise be gained in place of utility talents.\n\nThe following options are available:\n●{nbsp}You can take a drawback with the [utility start] tag to gain the base sphere with a [utility] talent.\n\n{indent 0}Unlike in Spheres of Power and Spheres of Might, drawbacks in Spheres of Guile are not specifically part of a trade tradition, and are therefore included on the sphere pages.\n\nTo use this feature, take this meta talent in the Utility Talents list and one of the following base spheres in Skill Sphere Talents list:\n{indent 30}Artifice, Bluster, BodyControl, Communication, Navigation, Subterfuge\n{indent 0}Then choose a Utility Start drawback on the sphere's tab or a compatible [utility] talent in the Utility Talents.\n\nTODO: This does not work yet, it is a skeleton. It may be better to build directly into the drawbacks similar to how this is supported Vocation and Communication." summary="Gain a base sphere as a [utility] talent.">
    <comment><![CDATA[Need to make these:
Artifice - Careful Engineer [utility start]
		You cannot create trinkets (nor can you benefit
		from talents that augment them) and you lose the
		function granted by your chosen package. You gain
		the Artificer's Eye or Favorite Tools talent, in
		addition to a (flourish) talent of your choice.
		Special: This drawback can be taken as a [utility
		start] if the chosen (flourish) talent is a utility
		talent.
Bluster -  Boundless Wit [utility start]
		You find countless openings to practice your wits. You gain the
		Verbal Trap talent and do not gain the quip ability.
	- Deadly Presence [utility start]
		You prefer to have a threatening or imposing aura about you,
		instead of a glare. You do not gain the quip ability, and gain the
		Nebulous Threat talent.
Body Control - Thermoregulation [utility start]
		You do not gain the Maintain Stamina (control)
		talent. You gain the Regulate Heat talent instead.
Navigation - Cartographer [utility start]
		You prefer the art of mapping the world, rather than surviving
		and navigating it. You lose the acclimate and pathing abilities,
		and gain either the Cartographer's Knack or Lay Of The Land talent.
            - Heedless Advance [utility start]
		Your desire to navigate is built on a boundless passion for
		exploration more than an understanding of your environment. You
		lose the acclimate and pathing abilities, and gain either the
		Fleet Movement or Triumphant Arrival talent.
Spellhacking - Destabilized Focus
		Through a damaged implement, unstable source of
		magic, or some other source of instability, you
		have adapted to using these mishaps to your advantage.
		You do not gain the hack magic ability (or a (hack)
		talent of your choice), and gain a (mishap) talent
		of your choice instead. If you choose a [utility]
		(mishap) talent, the base sphere gains the [utility]
		tag.
              - Stable Instrument
		You do not gain the control mishap ability, and
		gain the Steady Hacker talent instead. If you choose
		a [utility] talent as your free (hack) talent, the
		base sphere gains the [utility] tag.
    component.SoGTalent & SoGSphere.GainSphere & SoGTlClass.UtilStart]]></comment>
    <fieldval field="usrCandid1" value="component.SoGTalent &amp; SoGTlClass.GainSphere &amp; SoGTlClass.UtilStart"/>
    <fieldval field="usrCandid2" value="component.SoGDrawbk &amp; SoGTlClass.UtilStart"/>
    <usesource source="pPF1e_Sph_Guile"/>
    <tag group="SoGTlClass" tag="GainSphere"/>
    <tag group="SoGTlClass" tag="Utility"/>
    <tag group="SoGTalDesc" tag="Utility"/>
    <tag group="ChooseSrc1" tag="Hero"/>
    <tag group="ChooseSrc2" tag="Hero"/>
    <tag group="User" tag="NoAutoName"/>
    <eval phase="PostLevel" priority="1000" name="Utility Start increase resMax"><![CDATA[doneif (tagis[Helper.SpcDisable] = 1)
     doneif (field[usrChosen1].ischosen = 0)

     perform field[usrChosen1].chosen.setfocus
     doneif (state.isfocus = 0)

     ~ Since we are starting via the Utility Start feature, this [utility] talent
     ~     costs a [utility] talent. In exchange, we grant 1 Skill Sphere talent
     ~     you may use for the base sphere. You must also take a drawback with
     ~     [utility start]. Select those with the two choosers.
     perform hero.findchild[Resource, "thingid.resSGSSGen"].setfocus

     doneif (state.isfocus = 0)

     ~ Increase our available generic skills.
     focus.field[resMax].value += 1
     debug "💸 " & this.field[name].text & "(" & this.uniqindex & ") on resource resSGSSGen +1 resMax 2234"
     ]]></eval>
    <evalrule phase="Final" priority="2147483647" message="You must choose a Utility Start drawback."><![CDATA[doneif (tagis[Helper.SpcDisable] = 1)
     doneif (field[usrChosen1].ischosen = 0)

     @valid = 0

     if (field[usrChosen2].ischosen <> 0) then
          ~ We have a second choice chosen, check if it is a UtilStart
          if (field[usrChosen2].chosen.tagis[SoGTlClass.UtilStart] <> 0) then
               @valid = 1
          endif
      endif]]></evalrule>
    </thing>
  <thing id="sogTlBuyof" name="- Buyoff Drawback -" compset="SoGTalent" description="Select this option to mark one of your drawbacks as being bought off. The drawback will remain on your character but will no longer function." summary="Select a drawback to buy off.">
    <fieldval field="usrCandid1" value="component.SoGDrawbk &amp; !SoGTlClass.ReqRetrain"/>
    <usesource source="pPF1e_Sph_Guile"/>
    <tag group="SphOfGuil" tag="CustTalent"/>
    <tag group="SoGTlClass" tag="Talent"/>
    <tag group="ChooseSrc1" tag="Hero"/>
    <tag group="Helper" tag="SpecUp"/>
    <eval phase="First" priority="50">doneif (field[usrChosen1].ischosen = 0)

      perform field[usrChosen1].chosen.assign[Helper.SpecUp]
      perform field[usrChosen1].chosen.assign[SphOfGuil.DBBuyoff]
      perform field[usrChosen1].chosen.delete[Helper.ShowSpec]</eval>
    </thing>
  <thing id="sogTlFlawlessFlou" name="Flawless Flourish" compset="SoGTalent" description="{b}Prerequisites{/b}: Associated skill 3 ranks, Artifice sphere (at least one (flourish) talent).\n\nYour flourishes no longer require maintenance." uniqueness="useronce">
    <usesource source="pPF1e_Sph_Guile"/>
    <tag group="SoGSphere" tag="Artifice"/>
    <tag group="SoGTlClass" tag="ExcepTalent"/>
    <exprreq message="3 ranks in the Associated Skill."><![CDATA[hero.childfound[sogTlSpArtifice].field[tAssocRanks].value >= 3]]></exprreq>
    <exprreq message="At least one (flourish) talent."><![CDATA[tagcount[SoGHasTlDs.ArtFlouris] > 0]]></exprreq>
    </thing>
  <thing id="sogTlSequesteredS" name="Sequestered Support" compset="SoGTalent" description="{b}Prerequisites{/b}: Associated 5 ranks, Communication sphere (Recall Support).\n\nWhenever you use the Recall Support talent, it no longer has a limit on the types of rolls it can benefit (as long as it could normally benefit from aid another). If the aid attempt requires an opponent to be relevant to, the aided creature chooses the opponent when they ponder your words.\n\nYou can spend 1 use of skill leverage when using the Recall Support talent to have part of your cognitive ability ‘stored’ within the creature for the next day, allowing them to ponder your words a number of times per day equal to 1/2 your ranks in the sphere’s associated skill." uniqueness="useronce">
    <fieldval field="abText" value="/day"/>
    <usesource source="pPF1e_DRS_HarDis"/>
    <usesource source="pPF1e_Sph_Guile"/>
    <tag group="SoGSphere" tag="Communication"/>
    <tag group="SoGTlClass" tag="ExcepTalent"/>
    <tag group="SoGAbV1Sc" tag="1_2A"/>
    <tag group="AbilType" tag="Super"/>
    <eval phase="Render" priority="400"><![CDATA[~ Do nothing if disabled.
  doneif (tagis[Helper.SpcDisable] <> 0)

  if (hero.tagis[HasAbility.sogTlRecallSuppor] <> 0) then
    perform assign[LvNamePar.AppText]
    perform assign[LvNamePar.AppValue]
  endif]]></eval>
    <exprreq message="5 ranks in the Associated Skill."><![CDATA[hero.childfound[sogTlSpCommunicat].field[tAssocRanks].value >= 5]]></exprreq>
    <exprreq message="Recall Support required."><![CDATA[#hasability[sogTlRecallSuppor] <> 0]]></exprreq>
    </thing>
  <thing id="sogTlDisenchantDi" name="Disenchanting Diatribe" compset="SoGTalent" description="{b}Prerequisites{/b}: Linguistics 5 ranks, Communication sphere (Mental Loophole).\n\nYou can use Linguistics to find a loophole in any one spell that allowed a Will saving throw other than a curse. If the spell was mind-affecting, the new save is attempted with a +4 insight bonus. You end the spell if the new saving throw succeeds.\n\nIf you have at least 10 ranks in Linguistics, you can find a loophole in any curse (regardless of whether it allowed a saving throw or what the save was) if you spend 1 minute and a total of 2 uses of skill leverage per target and your Linguistics check succeeds against the DC to dispel it. If the curse did not normally allow a save, the target can attempt a Will saving throw to end it." uniqueness="useronce">
    <fieldval field="abText" value="/day"/>
    <usesource source="pPF1e_DRS_HarDis"/>
    <usesource source="pPF1e_Sph_Guile"/>
    <tag group="SoGSphere" tag="Communication"/>
    <tag group="SoGTlClass" tag="ExcepTalent"/>
    <exprreq message="5 ranks in Linguistics."><![CDATA[#skillranks[skLinguist] >= 5]]></exprreq>
    <exprreq message="Mental Loophole required."><![CDATA[#hasability[sogTlMentLoophole] <> 0]]></exprreq>
    </thing>
  <thing id="sogTlInspireDevot" name="Inspire Devotion" compset="SoGTalent" description="{b}Prerequisites{/b}: Diplomacy 10 ranks, Communication sphere.\n\nYou can use the Diplomacy skill to improve a creature’s attitude toward you above helpful, but only if you appeal to one of the creature’s major motivations as part of a Diplomacy check to improve its attitude. If you do and either you exceed the DC to make the creature helpful by 5 or you make an already helpful creature helpful, the target attempts a Will saving throw. On a failed save, for 1 hour per rank in Diplomacy you possess the creature gains a new minor motivation: their relationship with you. On a successful save, the target’s new motivation lasts for 1 round.\n\nWhile the creature has this motivation, you need not attempt checks to request help that is not costly. They grant one modestly costly request without compensation, including assisting you in combat if they believe they are unlikely to die. You cannot target that creature again for 24 hours. This is a mind-affecting charm effect.\n\nAt 15 ranks, this motivation is a major one." uniqueness="useronce">
    <fieldval field="abText" value="/day"/>
    <usesource source="pPF1e_DRS_HarDis"/>
    <usesource source="pPF1e_Sph_Guile"/>
    <tag group="SoGSphere" tag="Communication"/>
    <tag group="SoGTlClass" tag="ExcepTalent"/>
    <tag group="AbilType" tag="Super"/>
    <exprreq message="10 ranks in Diplomacy."><![CDATA[#skillranks[skDiplo] >= 10]]></exprreq>
    </thing>
  <thing id="sogTlOverwhelmiSu" name="Overwhelming Suggestion" compset="SoGTalent" description="{b}Prerequisites{/b}: Diplomacy 5 ranks, Communication sphere.\n\nAs a standard action, you can make a request without attempting a Diplomacy check as long as you can phrase it as furthering one of the target’s desires or goals or avoiding one of the target’s fears (however tenuously). The target attempts a Will saving throw. They get a +5 bonus on the saving throw if the request would be costly or dangerous to them. On a failed save, they agree for 1 hour as long as the request is not obviously self-destructive. You cannot target that creature again for 24 hours. This is a language-dependent mind-affecting compulsion effect." uniqueness="useronce">
    <usesource source="pPF1e_DRS_HarDis"/>
    <usesource source="pPF1e_Sph_Guile"/>
    <tag group="SoGSphere" tag="Communication"/>
    <tag group="SoGTlClass" tag="ExcepTalent"/>
    <exprreq message="5 ranks in Diplomacy."><![CDATA[#skillranks[skDiplo] >= 5]]></exprreq>
    </thing>
  <thing id="sogTlDemandingLet" name="Demanding Letter" compset="SoGTalent" description="{b}Prerequisites{/b}: Associated skill 3 ranks, Communication sphere.\n\nYou have many contacts among merchants, explorers, mages, and other travelers who can carry your missives far and wide. You can reveal a plan that you have sent a missive to a recipient up to 100 miles away per rank in the associated skill you possess. The target receives the letter when you reveal the plan. You must unambiguously identify the recipient by name or location and profession. Someone impersonating the target at their usual location receives the letter in their place.\n\nIf you cannot adequately specify the target, the letter returns to you unopened the next day. If the target hides from the public, the letter finds them if they have left a trail that could be found with a successful Survival check using your associated skill modifier.\n\nIf you possess at least 7 ranks in the associated skill, the range is anywhere on the same planet and has a chance to find a target if their trail is within 100 miles of any settlement. If you possess at least 10 ranks, the range extends to any plane of existence known to you and can reach targets who are hidden as long as they are not shielded from magic that would reveal their location.\n\nIf you spend 1 use of skill leverage, the letter can carry the effect of any one use of Diplomacy or of a Communication talent you possess, but only to the intended recipient and only if they read it. You must spend an additional use of skill leverage to impart the effect of an exceptional talent. The effect of the letter lasts no more than 24 hours once read, even if it would usually last longer." uniqueness="useronce">
    <fieldval field="abText" value="/day"/>
    <usesource source="pPF1e_DRS_HarDis"/>
    <usesource source="pPF1e_Sph_Guile"/>
    <tag group="SoGSphere" tag="Communication"/>
    <tag group="SoGTlClass" tag="ExcepTalent"/>
    <tag group="SoGTalDesc" tag="Plan"/>
    <tag group="SoGTalDesc" tag="Utility"/>
    <tag group="SoGAbV1Sc" tag="1_2A"/>
    <exprreq message="3 ranks in the Associated Skill."><![CDATA[hero.childfound[sogTlSpCommunicat].field[tAssocRanks].value >= 3]]></exprreq>
    </thing>
  <thing id="sogTlFailureToCom" name="Failure To Communicate" compset="SoGTalent" description="{b}Prerequisites{/b}: Linguistics 5 ranks, Communication sphere (Veiled Dialogue (utility)).\n\nAdopting this approach is a swift action. Until you adopt a new approach, you distract all other creatures from communicating using any language, causing affected creatures to shout nonsense or make distracting gestures instead of their intended speech. Each other creature within 60 feet of you is unable to use or understand any language or provide verbal components for spellcasting until it leaves this approach’s radius or this approach ends. A creature may attempt a Will saving throw as a standard action. You cannot affect a creature with this approach for 24 hours after they successfully save against this effect. This is a visual and auditory effect. Creatures are only affected by this approach as long as they can see or hear you. This is a supernatural effect." uniqueness="useronce">
    <fieldval field="abText" value="/day"/>
    <usesource source="pPF1e_Sph_Guile"/>
    <usesource source="pPF1e_Sph_OJestHB"/>
    <tag group="SoGSphere" tag="Communication"/>
    <tag group="SoGTlClass" tag="ExcepTalent"/>
    <tag group="SoGTalDesc" tag="Approach"/>
    <tag group="SoGTalDesc" tag="Utility"/>
    <tag group="AbilType" tag="Super"/>
    <exprreq message="5 ranks in Linguistics."><![CDATA[#skillranks[skLinguist] >= 5]]></exprreq>
    <exprreq message="Veiled Dialogue required."><![CDATA[#hasability[sogTlVeiledDialog] <> 0]]></exprreq>
    </thing>
  <thing id="sogTlCommunicBrea" name="Communication Breakthrough" compset="SoGTalent" description="{b}Prerequisites:{/b} Linguistics 3 ranks, Communication sphere.\n\nPlant creatures, constructs, oozes, vermin, and undead that share your rapport and who know at least one language are not immune to your language-dependent abilities even if those abilities are mind-affecting. If you also have the Beast Whisperer talent, you can add non-construct mindless creatures to your rapport and affect any non-construct creatures that share your rapport with language-dependent effects even if they don’t have a language. If a creature would otherwise be immune, it gets a +5 bonus on saving throws against the effect.\n\nYou can choose this talent multiple times. Each time you take it after the first, choose a creature type. Creatures of that type do not have to share your rapport for you to bypass their immunity to language-dependent mind-affecting effects (although they must still know a language unless you have the Beast Whisperer talent)." uniqueness="useronce">
    <usesource source="pPF1e_Sph_Guile"/>
    <tag group="SoGSphere" tag="Communication"/>
    <tag group="SoGTlClass" tag="ExcepTalent"/>
    <exprreq message="3 ranks in Linguistics."><![CDATA[#skillranks[skLinguist] >= 3]]></exprreq>
    </thing>
  <thing id="sogTlPreserveRemn" name="Preserve Remnants" compset="SoGTalent" description="{b}Prerequisites:{/b} Spellhacking sphere.\n\nWhenever you cast a spell from a scroll, you can attempt an associated skill check with a DC equal to 20 + the scroll’s caster level as part of the attempt. On a success, the magical writing does not vanish for 1 round, allowing the scroll to be used again within this period (unless its casting time is longer than a standard action). A scroll cannot benefit from this talent more than once, nor can this talent be used if the spell stored within the scroll requires a material component worth more than 10 gp.\n\nFor every 5 ranks in the associated skill you possess, the magical writing persists for an additional round." uniqueness="useronce">
    <fieldval field="abText" value="rounds"/>
    <fieldval field="abValue" value="1"/>
    <usesource source="pPF1e_DRS_ThaPot"/>
    <usesource source="pPF1e_Sph_Guile"/>
    <tag group="SoGSphere" tag="Spellhacking"/>
    <tag group="SoGTlClass" tag="ExcepTalent"/>
    <tag group="SoGAbV1Sc" tag="1_5A"/>
    <tag group="LvNamePar" tag="AppText"/>
    <tag group="LvNamePar" tag="AppValue"/>
    </thing>
  <thing id="sogTlRetargetMagi" name="Retarget Magic" compset="SoGTalent" description="{b}Prerequisites:{/b} Associated skill 15 ranks, Spellhacking sphere (Splinter Magic).\n\nWhen you apply Splinter Magic, you can move the targeted magical effect rather than duplicate it. Splinter Magic’s special conditions for targeted effects that only have 1 target do not apply. If you successfully affect the new target, the magical effect ends on the previous target.\n\nYou can apply Splinter Magic as a mishap using control mishap if you move the effect to a target randomly chosen by the GM, causing the spell to take effect solely on the new target instead of the intended target." uniqueness="useronce">
    <usesource source="pPF1e_Sph_Guile"/>
    <tag group="SoGSphere" tag="Spellhacking"/>
    <tag group="SoGTlClass" tag="ExcepTalent"/>
    <exprreq message="Splinter Magic required."><![CDATA[#hasability[sogTlSHSplinterMa] <> 0]]></exprreq>
    <exprreq message="15 ranks in the Associated Skill."><![CDATA[hero.childfound[sogTlSpSpellHack].field[tAssocRanks].value >= 15]]></exprreq>
    </thing>
  <thing id="sogTlDimensioTuni" name="Dimension Tuning" compset="SoGTalent" description="{b}Prerequisites:{/b} Associated skill 5 ranks.\n\n{b}Target:{/b} A magical area effect with a duration other than instantaneous, concentration, or permanent, or with at least one variable, numeric effect\n\nYou can increase a magical area in each dimension by 50%. If it has a suitable duration and effects, they are each reduced by 25%. If it has such a duration but no variable, numeric effects, reduce its duration by half. If its duration is instantaneous, concentration, or permanent, then reduce its variable, numeric effects by half.\n\nIf you possess at least 10 ranks in the associated skill, you can take this talent a second time. Doing so allows you to either double or halve the magical effect’s area in each dimension. Doubling the area reduces any variable, numeric effects of the area as well as its duration by 50% each. Halving the area increases any variable, numeric effects of the area by 50% as if with the Empower Spell feat and doubles the remaining duration as if with the Enlarge Spell feat.">
    <comment>TODO Fix taking a second time.</comment>
    <fieldval field="tMaxTaken" value="2"/>
    <usesource source="pPF1e_Sph_Guile"/>
    <tag group="SphOfGuil" tag="LnNoCount"/>
    <tag group="SoGSphere" tag="Spellhacking"/>
    <tag group="SoGTlClass" tag="ExcepTalent"/>
    <tag group="SoGTalDesc" tag="Hack"/>
    <tag group="LvNamePar" tag="AppText"/>
    <tag group="SbNamePar" tag="AppText"/>
    <eval phase="PostAttr" priority="12000"><![CDATA[~ Get out if disabled
  doneif (tagis[Helper.SpcDisable] <> 0)
  ~ Or if only taken once.
  doneif (field[tTaken].value <= 1)
  ~ Or if less than 10 ranks.
  doneif (field[tAssocRanks].value < 10)
  ~ Or if not FirstCopy
  if (tagis[Helper.FirstCopy] = 0) then
    perform assign[Helper.SpecUp]
    done
  endif

  ~ We have 10+ ranks and are taken more than once.
  field[abValue].value = 1
  field[abText].text = "double & ½"]]></eval>
    <evalrule phase="Final" priority="2147483647" message="You must have 10 ranks in the Associated Skill to take twice." summary="You must have 10 ranks in the Associated Skill to take twice."><![CDATA[@valid = 0
  ~ Valid if disabled.
  validif (tagis[Helper.SpcDisable] <> 0)
  ~ Or a duplicate.
  validif (tagis[Helper.FirstCopy] = 0)
  ~ Or we have 10 ranks and taken twice.
  validif (field[abValue].value = 1)]]></evalrule>
    <exprreq message="5 ranks in the Associated Skill."><![CDATA[hero.childfound[sogTlSpSpellHack].field[tAssocRanks].value >= 5]]></exprreq>
    </thing>
  <thing id="sogTlSubvertContr" name="Subvert Control" compset="SoGTalent" description="{b}Prerequisites:{/b} Associated skill 7 ranks, Spellhacking sphere.\n\n{b}Target:{/b} A magical effect that has the option for the caster to dismiss, alter, or direct it after it takes effect\n\nYou gain the same degree of control over the effect as the caster has. You do not prevent the caster from continuing to control it using their own actions. If the spell is dismissible, you can dismiss it. If the effect can normally be moved, you can move it using the same action. If the effect allows the caster to issue new orders or suggestions, you can do so but any order that contradicts the caster’s previous order is only followed if you succeed at an opposed Charisma check against the caster.\n\nIf you have also applied the Subvert Information (hack) to the effect, your Subvert Information can interfere with the caster’s ability to control the effect. When you use this option, the next time the caster sends a command to the hacked effect, the attempt fails unless they succeed at a caster level check against DC 10 + the ranks in the associated skill you possess." uniqueness="useronce">
    <usesource source="pPF1e_Sph_Guile"/>
    <tag group="SoGSphere" tag="Spellhacking"/>
    <tag group="SoGTlClass" tag="ExcepTalent"/>
    <tag group="SoGTalDesc" tag="Hack"/>
    <exprreq message="7 ranks in Associated Skill."><![CDATA[hero.childfound[sogTlSpSpellHack].field[tAssocRanks].value >= 7]]></exprreq>
    </thing>
  <thing id="sogTlSuspendMagic" name="Suspend Magic" compset="SoGTalent" description="{b}Prerequisites:{/b} Associated skill 5 ranks, Spellhacking sphere.\n\n{b}Target:{/b} A magical effect\n\nYou suppress the target effect for a duration you choose, at least 1 minute or up to the maximum duration you can apply a (hack) talent. While suppressed, the effect’s duration does not elapse. (You can remove this hack to resume the duration early.) If this talent is applied to an effect as it is cast, the effect is prevented from beginning (or calling for saving throws or spell resistance) until the hack is removed and the target or area is only set approximately. When this hack is removed from an effect that had not begun yet, the effect begins as intended if both the source and the intended target or area are within 30 feet of each other or within 30 feet of where they were when the magic was suspended. Failing that, you can intentionally remove Suspend Magic with hack magic to choose a new target or area as the suspended effect resumes. Otherwise, the GM chooses the target or area in roughly the analogous distance and direction from the source’s current location as the intended target or area was from the source’s location when you hacked magic.\n\nIf you also have the Conditional Hack exceptional talent and apply it to this hack, the suspended magic interferes with contingency spells or other similar effects on you, preventing them from triggering until the conditional Suspend Magic hack is removed. If the suspended effect resumes early due to a Conditional Hack and the effect’s caster level was higher than two-thirds the number of ranks in the associated skill you possess, its caster level is reduced to that maximum if it would not bring the spell below its minimum caster level (for example, caster level 11th is the minimum for a 6th-level wizard spell). If the spell’s caster level would be reduced below the minimum, the spell becomes a mishap, with the effect of one of your (mishap) talents of the GM’s choice.\n\nIf you also have the Prescient Hack talent, you can cast an undefined spell as part of preparing your plans in order to have the option of revealing a suspended spell.\n\nYou expend a spell slot or other resources for the spell when you prepare plans, but do not choose which spell it is or make any choices for it until you reveal it. If you reveal the spell did not use all the resources, the unspent resources become available to you. If you expend all your plans without revealing the spell, the slot becomes available to you (without a spell prepared, if you are a prepared spellcaster)." uniqueness="useronce">
    <usesource source="pPF1e_Sph_Guile"/>
    <tag group="SoGSphere" tag="Spellhacking"/>
    <tag group="SoGTlClass" tag="ExcepTalent"/>
    <tag group="SoGTalDesc" tag="Hack"/>
    <tag group="SoGTalDesc" tag="Mishap"/>
    <exprreq message="5 ranks in Associated Skill."><![CDATA[hero.childfound[sogTlSpSpellHack].field[tAssocRanks].value >= 5]]></exprreq>
    </thing>
  <thing id="sogTlConditioHack" name="Conditional Hack" compset="SoGTalent" description="{b}Prerequisites:{/b} Associated skill 10 ranks, Spellhacking sphere.\n\nWhen you hack magic, you can choose an observable condition that will remove the hack. Triggers react to what appears to be the case within 15 feet of the hacked target. Disguises and illusions can fool them. Normal darkness does not defeat a visual trigger, but magical darkness or invisibility does. Silent movement or magical silence defeats audible triggers. Audible triggers can be keyed to general types of noises or to a specific noise or spoken word. Actions can serve as triggers if they are visible or audible." uniqueness="useronce">
    <usesource source="pPF1e_Sph_Guile"/>
    <tag group="SoGSphere" tag="Spellhacking"/>
    <tag group="SoGTlClass" tag="ExcepTalent"/>
    <exprreq message="10 ranks in the Associated Skill."><![CDATA[hero.childfound[sogTlSpSpellHack].field[tAssocRanks].value >= 10]]></exprreq>
    </thing>
  <thing id="sogTlBoundRetaine" name="Bound Retainer" compset="SoGTalent" description="{b}Prerequisites:{/b} Knowledge (arcana) or Knowledge (religion) 10 ranks, Faction sphere ((retainer) package).\n\nYour faction secures the service of an outsider to be your retainer through planar binding, planar ally, or similar magic.\n\n{b}Spirit Ally{/b}\n\n{b}Role 1 Authorization{/b} noncombatant, {b}3 Authorizations{/b} defend an area (combatant), {b}5 Authorizations{/b} any task that does not go against the creature’s nature or betray the faction (combatant); {b}Statistics{/b} As an outsider from the summon monster list of a level equal to half the number of ranks in the associated skill you possess. When you permanently gain this talent, you can work with your GM to replace monsters on the list with different monsters of similar challenge rating as appropriate for your faction (for example, many religions allow clerics to replace monsters with the appropriate servitors of the religion’s deity)." uniqueness="useronce">
    <usesource source="pPF1e_Sph_Guile"/>
    <tag group="SoGSphere" tag="Faction"/>
    <tag group="SoGTlClass" tag="ExcepTalent"/>
    <tag group="SoGTalDesc" tag="FacRetaine"/>
    <tag group="SoGReqPkg" tag="Retainer"/>
    <prereq message="Knowledge (arcana) or Knowledge (religion) 10 ranks required.">
      <validate><![CDATA[
        validif (#skillranks[skKnowArca] >= 10)
        validif (#skillranks[skKnowRel] >= 10)]]></validate>
      </prereq>
    </thing>
  <thing id="sogTlMagicalMerce" name="Magical Mercenary Retainer" compset="SoGTalent" description="{b}Prerequisites:{/b} Associated skill 5 ranks, Faction sphere ((retainer) package, (supply) package, Scroll Cache, Wand Supply).\n\nYou can requisition a war wizard or other magical mercenary as your retainer.\n\n{b}Magical Mercenary{/b}\n\n{b}Role 1 Authorization{/b} Cast up to to one spell per rank in the associated skill within 4 hours’ travel, avoiding hostile strongholds like dungeons (noncombatant without equipment), {b}2 Authorizations{/b} Defend a defensible position or travel far overland to cast spells while avoiding dungeons or other hostile strongholds (combatant with equipment), {b}3 Authorizations{/b} Fight in any other combat (without likely death or betraying the faction) (combatant with equipment);\n\n{b}Skills{/b} (1 primary, 3 secondary) Knowledge (arcana, nature, planes, or religion, chosen individually), Spellcraft; {b}Statistics{/b} The mercenary uses standard statistics and equipment for an NPC of a class suitable to provide the faction’s spellcasting services, with character level up to your retainer Hit Dice maximum." uniqueness="useronce">
    <usesource source="pPF1e_Sph_Guile"/>
    <tag group="SoGSphere" tag="Faction"/>
    <tag group="SoGTlClass" tag="ExcepTalent"/>
    <tag group="SoGTalDesc" tag="FacRetaine"/>
    <tag group="SoGTalDesc" tag="FacSupply"/>
    <tag group="SoGReqPkg" tag="Retainer"/>
    <tag group="SoGReqPkg" tag="Supply"/>
    <exprreq message="Scroll Cache required."><![CDATA[#hasability[sogTlScrollCache] <> 0]]></exprreq>
    <exprreq message="5 ranks in the Associated Skill."><![CDATA[hero.childfound[sogTlSpFaction].field[tAssocRanks].value >= 5]]></exprreq>
    <exprreq message="Wand Supply required."><![CDATA[#hasability[sogTlWandSupply] <> 0]]></exprreq>
    </thing>
  <thing id="sogTlRetainerDeta" name="Retainer Detail" compset="SoGTalent" description="{b}Prerequisites:{/b} Associated skill 3 ranks, Faction sphere ((retainer) package, any talent granting a retainer profession with a combatant role).\n\nYou can requisition two combatant retainers at a time. You must pay the authorization costs for each retainer, and the maximum level or Hit Dice for each one is reduced by 1 while you have two of them.\n\nYou can take this talent a second time. If you do, having two retainers does not reduce their maximum level. You can also choose to requisition a third combatant retainer, but if you do all three have their maximum level or Hit Dice are reduced by 1 each." uniqueness="useronce">
    <comment>TODO Code prereq for profession with a combatant role).</comment>
    <usesource source="pPF1e_Sph_Guile"/>
    <tag group="SoGSphere" tag="Faction"/>
    <tag group="SoGTlClass" tag="ExcepTalent"/>
    <tag group="SoGTalDesc" tag="FacRetaine"/>
    <tag group="SoGReqPkg" tag="Retainer"/>
    <exprreq message="3 ranks in the Associated Skill."><![CDATA[hero.childfound[sogTlSpFaction].field[tAssocRanks].value >= 3]]></exprreq>
    </thing>
  <thing id="sogTlSurvivalReta" name="Survivalist Retainer" compset="SoGTalent" description="{b}Prerequisites:{/b} Associated skill 3 ranks, Faction sphere ((retainer) package, (supply) package, Magical Armory).\n\nYou can choose an explorer, skilled hunter, priest of nature, herbalist, or other wilderness traveler as your faction retainer.\n\n{b}Survivalist{/b}\n\n{b}Role 2 Authorizations{/b} Guide you and cooperate with you against wilderness hazards and enemies while traveling overland or transiting through settlements (combatant with equipment), {b}3 Authorizations{/b} Enter dungeons, monster lairs, or other strongholds alongside you (combatant with equipment);\n\n{b}Skills{/b} (2 primary, 4 secondary) Climb, Handle Animal, Heal, Knowledge (geography), Knowledge (nature), Profession (herbalist), Ride, Survival, Swim; {b}Statistics{/b} As an NPC barbarian, druid, hunter, or ranger with character level up to your retainer Hit Dice maximum." uniqueness="useronce">
    <usesource source="pPF1e_Sph_Guile"/>
    <tag group="SoGSphere" tag="Faction"/>
    <tag group="SoGTlClass" tag="ExcepTalent"/>
    <tag group="SoGTalDesc" tag="FacRetaine"/>
    <tag group="SoGTalDesc" tag="FacSupply"/>
    <tag group="SoGReqPkg" tag="Retainer"/>
    <tag group="SoGReqPkg" tag="Supply"/>
    <exprreq message="3 ranks in the Associated Skill."><![CDATA[hero.childfound[sogTlSpFaction].field[tAssocRanks].value >= 3]]></exprreq>
    <exprreq message="Magical Armor required."><![CDATA[#hasability[sogTlMagicalArmor] <> 0]]></exprreq>
    </thing>
  </document>
